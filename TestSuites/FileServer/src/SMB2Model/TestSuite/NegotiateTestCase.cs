// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class NegotiateTestCase : PtfTestClassBase {
        
        public NegotiateTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c);
        
        public delegate void NegotiateResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision);
        
        public delegate void ComNegotiateRequestDelegate1();
        
        public delegate void NegotiateRequestDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.INegotiateAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig).MakeByRefType());
        
        static System.Reflection.EventInfo NegotiateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.INegotiateAdapter), "NegotiateResponse");
        
        static System.Reflection.MethodBase ComNegotiateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.INegotiateAdapter), "ComNegotiateRequest", typeof(Microsoft.Modeling.Sequence<string>));
        
        static System.Reflection.MethodBase NegotiateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.INegotiateAdapter), "NegotiateRequest", typeof(Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>));
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.INegotiateAdapter INegotiateAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.INegotiateAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.INegotiateAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.INegotiateAdapter))));
            this.Manager.Subscribe(NegotiateResponseInfo, this.INegotiateAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS0() {
            this.Manager.BeginTest("NegotiateTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS0ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS0ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS0ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS0ReadConfigChecker3)));
            if ((temp21 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.???",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S16\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S17\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S18\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S19\'");
                    int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker123)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker124)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker125)));
                    if ((temp20 == 0)) {
                        NegotiateTestCaseS121();
                        goto label19;
                    }
                    if ((temp20 == 1)) {
                        this.Manager.Comment("reaching state \'S130\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S131\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S132\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S133\'");
                            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.002",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                            this.Manager.Comment("reaching state \'S134\'");
                            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S135\'");
                            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                            this.INegotiateAdapterInstance.ExpectDisconnect();
                            this.Manager.Comment("reaching state \'S136\'");
                            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                            this.Manager.Comment("reaching state \'S137\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker4)));
                        }
                        goto label19;
                    }
                    if ((temp20 == 2)) {
                        NegotiateTestCaseS20();
                        goto label19;
                    }
                    if ((temp20 == 3)) {
                        NegotiateTestCaseS26();
                        goto label19;
                    }
                    if ((temp20 == 4)) {
                        NegotiateTestCaseS82();
                        goto label19;
                    }
                    if ((temp20 == 5)) {
                        NegotiateTestCaseS82();
                        goto label19;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker123)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker124)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker125)));
                label19:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker)));
                }
                goto label20;
            }
            if ((temp21 == 1)) {
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S142\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker126))) != -1)) {
                    this.Manager.Comment("reaching state \'S143\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S144\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S145\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S146\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S147\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker126)));
                }
                goto label20;
            }
            if ((temp21 == 2)) {
                this.Manager.Comment("reaching state \'S148\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S149\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                        " family, processing MUST continue as specified in 3.3.5.3.2.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S151\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S152\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker127))) != -1)) {
                    this.Manager.Comment("reaching state \'S153\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S154\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S155\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S156\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S157\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker127)));
                }
                goto label20;
            }
            if ((temp21 == 3)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S6\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker128))) != -1)) {
                    this.Manager.Comment("reaching state \'S7\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S8\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S9\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S10\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S11\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker128)));
                }
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S16");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S16");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S19");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S19");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS121() {
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S123\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                        "1, and not reply.\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S128\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker2)));
            }
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S19");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S19");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S132");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S19");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S19");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS20() {
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S22\'");
            int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker122)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S107\'");
                goto label18;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.???",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S112\'");
                goto label18;
            }
            if ((temp19 == 2)) {
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S117\'");
                goto label18;
            }
            if ((temp19 == 3)) {
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S120\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker15)));
                if ((temp1 == 0)) {
                    NegotiateTestCaseS121();
                    goto label0;
                }
                if ((temp1 == 1)) {
                    NegotiateTestCaseS121();
                    goto label0;
                }
                if ((temp1 == 2)) {
                    NegotiateTestCaseS121();
                    goto label0;
                }
                if ((temp1 == 3)) {
                    NegotiateTestCaseS121();
                    goto label0;
                }
                if ((temp1 == 4)) {
                    NegotiateTestCaseS121();
                    goto label0;
                }
                if ((temp1 == 5)) {
                    this.Manager.Comment("reaching state \'S129\'");
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker15)));
            label0:
;
                goto label18;
            }
            if ((temp19 == 4)) {
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S25\'");
                int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker117)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker118)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker119)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker120)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker121)));
                if ((temp18 == 0)) {
                    NegotiateTestCaseS26();
                    goto label17;
                }
                if ((temp18 == 1)) {
                    NegotiateTestCaseS82();
                    goto label17;
                }
                if ((temp18 == 2)) {
                    NegotiateTestCaseS82();
                    goto label17;
                }
                if ((temp18 == 3)) {
                    NegotiateTestCaseS82();
                    goto label17;
                }
                if ((temp18 == 4)) {
                    NegotiateTestCaseS82();
                    goto label17;
                }
                if ((temp18 == 5)) {
                    NegotiateTestCaseS82();
                    goto label17;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker117)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker118)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker119)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker120)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker121)));
            label17:
;
                goto label18;
            }
            if ((temp19 == 5)) {
                NegotiateTestCaseS82();
                goto label18;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker122)));
        label18:
;
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S22");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S22");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S22");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S22");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S22");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S22");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S22");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S22");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S22");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S22");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S25");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S25");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS26() {
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S28\'");
            int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker111)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker112)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker113)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker114)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker115)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S31\'");
                int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker106)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker107)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker108)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker109)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker110)));
                if ((temp16 == 0)) {
                    this.Manager.Comment("reaching state \'S32\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S33\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S34\'");
                    int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker101)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker102)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker103)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker104)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker105)));
                    if ((temp15 == 0)) {
                        this.Manager.Comment("reaching state \'S35\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S36\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S37\'");
                        int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker96)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker97)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker98)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker99)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker100)));
                        if ((temp14 == 0)) {
                            this.Manager.Comment("reaching state \'S38\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                            this.Manager.Comment("reaching state \'S39\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S40\'");
                            int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker91)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker92)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker93)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker94)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker95)));
                            if ((temp13 == 0)) {
                                NegotiateTestCaseS41();
                                goto label12;
                            }
                            if ((temp13 == 1)) {
                                NegotiateTestCaseS82();
                                goto label12;
                            }
                            if ((temp13 == 2)) {
                                NegotiateTestCaseS82();
                                goto label12;
                            }
                            if ((temp13 == 3)) {
                                NegotiateTestCaseS82();
                                goto label12;
                            }
                            if ((temp13 == 4)) {
                                NegotiateTestCaseS82();
                                goto label12;
                            }
                            if ((temp13 == 5)) {
                                NegotiateTestCaseS82();
                                goto label12;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker91)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker92)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker93)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker94)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker95)));
                        label12:
;
                            goto label13;
                        }
                        if ((temp14 == 1)) {
                            NegotiateTestCaseS82();
                            goto label13;
                        }
                        if ((temp14 == 2)) {
                            NegotiateTestCaseS82();
                            goto label13;
                        }
                        if ((temp14 == 3)) {
                            NegotiateTestCaseS82();
                            goto label13;
                        }
                        if ((temp14 == 4)) {
                            NegotiateTestCaseS82();
                            goto label13;
                        }
                        if ((temp14 == 5)) {
                            NegotiateTestCaseS82();
                            goto label13;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker96)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker97)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker98)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker99)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker100)));
                    label13:
;
                        goto label14;
                    }
                    if ((temp15 == 1)) {
                        NegotiateTestCaseS82();
                        goto label14;
                    }
                    if ((temp15 == 2)) {
                        NegotiateTestCaseS82();
                        goto label14;
                    }
                    if ((temp15 == 3)) {
                        NegotiateTestCaseS82();
                        goto label14;
                    }
                    if ((temp15 == 4)) {
                        NegotiateTestCaseS82();
                        goto label14;
                    }
                    if ((temp15 == 5)) {
                        NegotiateTestCaseS82();
                        goto label14;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker101)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker102)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker103)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker104)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker105)));
                label14:
;
                    goto label15;
                }
                if ((temp16 == 1)) {
                    NegotiateTestCaseS82();
                    goto label15;
                }
                if ((temp16 == 2)) {
                    NegotiateTestCaseS82();
                    goto label15;
                }
                if ((temp16 == 3)) {
                    NegotiateTestCaseS82();
                    goto label15;
                }
                if ((temp16 == 4)) {
                    NegotiateTestCaseS82();
                    goto label15;
                }
                if ((temp16 == 5)) {
                    NegotiateTestCaseS82();
                    goto label15;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker106)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker107)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker108)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker109)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker110)));
            label15:
;
                goto label16;
            }
            if ((temp17 == 1)) {
                NegotiateTestCaseS82();
                goto label16;
            }
            if ((temp17 == 2)) {
                NegotiateTestCaseS82();
                goto label16;
            }
            if ((temp17 == 3)) {
                NegotiateTestCaseS82();
                goto label16;
            }
            if ((temp17 == 4)) {
                NegotiateTestCaseS82();
                goto label16;
            }
            if ((temp17 == 5)) {
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S97\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker116))) != -1)) {
                    this.Manager.Comment("reaching state \'S98\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S99\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S100\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S101\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S102\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker116)));
                }
                goto label16;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker111)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker112)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker113)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker114)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker115)));
        label16:
;
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S28");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S28");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S34");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S37");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS41() {
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S43\'");
            int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker86)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker87)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker88)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker89)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker90)));
            if ((temp12 == 0)) {
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S45\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S46\'");
                int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker81)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker82)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker83)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker84)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker85)));
                if ((temp11 == 0)) {
                    this.Manager.Comment("reaching state \'S47\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S48\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S49\'");
                    int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker76)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker77)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker78)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker79)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker80)));
                    if ((temp10 == 0)) {
                        this.Manager.Comment("reaching state \'S50\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S51\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S52\'");
                        int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker26)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker71)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker72)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker73)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker74)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker75)));
                        if ((temp9 == 0)) {
                            this.Manager.Comment("reaching state \'S53\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                            this.Manager.Comment("reaching state \'S54\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S55\'");
                            int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker27)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker66)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker67)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker68)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker69)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker70)));
                            if ((temp8 == 0)) {
                                NegotiateTestCaseS56();
                                goto label7;
                            }
                            if ((temp8 == 1)) {
                                NegotiateTestCaseS82();
                                goto label7;
                            }
                            if ((temp8 == 2)) {
                                NegotiateTestCaseS82();
                                goto label7;
                            }
                            if ((temp8 == 3)) {
                                NegotiateTestCaseS82();
                                goto label7;
                            }
                            if ((temp8 == 4)) {
                                NegotiateTestCaseS82();
                                goto label7;
                            }
                            if ((temp8 == 5)) {
                                NegotiateTestCaseS82();
                                goto label7;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker27)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker66)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker67)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker68)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker69)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker70)));
                        label7:
;
                            goto label8;
                        }
                        if ((temp9 == 1)) {
                            NegotiateTestCaseS82();
                            goto label8;
                        }
                        if ((temp9 == 2)) {
                            NegotiateTestCaseS82();
                            goto label8;
                        }
                        if ((temp9 == 3)) {
                            NegotiateTestCaseS82();
                            goto label8;
                        }
                        if ((temp9 == 4)) {
                            NegotiateTestCaseS82();
                            goto label8;
                        }
                        if ((temp9 == 5)) {
                            NegotiateTestCaseS82();
                            goto label8;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker26)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker71)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker72)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker73)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker74)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker75)));
                    label8:
;
                        goto label9;
                    }
                    if ((temp10 == 1)) {
                        NegotiateTestCaseS82();
                        goto label9;
                    }
                    if ((temp10 == 2)) {
                        NegotiateTestCaseS82();
                        goto label9;
                    }
                    if ((temp10 == 3)) {
                        NegotiateTestCaseS82();
                        goto label9;
                    }
                    if ((temp10 == 4)) {
                        NegotiateTestCaseS82();
                        goto label9;
                    }
                    if ((temp10 == 5)) {
                        NegotiateTestCaseS82();
                        goto label9;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker76)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker77)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker78)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker79)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker80)));
                label9:
;
                    goto label10;
                }
                if ((temp11 == 1)) {
                    NegotiateTestCaseS82();
                    goto label10;
                }
                if ((temp11 == 2)) {
                    NegotiateTestCaseS82();
                    goto label10;
                }
                if ((temp11 == 3)) {
                    NegotiateTestCaseS82();
                    goto label10;
                }
                if ((temp11 == 4)) {
                    NegotiateTestCaseS82();
                    goto label10;
                }
                if ((temp11 == 5)) {
                    NegotiateTestCaseS82();
                    goto label10;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker81)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker82)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker83)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker84)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker85)));
            label10:
;
                goto label11;
            }
            if ((temp12 == 1)) {
                NegotiateTestCaseS56();
                goto label11;
            }
            if ((temp12 == 2)) {
                NegotiateTestCaseS82();
                goto label11;
            }
            if ((temp12 == 3)) {
                NegotiateTestCaseS82();
                goto label11;
            }
            if ((temp12 == 4)) {
                NegotiateTestCaseS82();
                goto label11;
            }
            if ((temp12 == 5)) {
                NegotiateTestCaseS82();
                goto label11;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker86)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker87)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker88)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker89)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker90)));
        label11:
;
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S46");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S52");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS56() {
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S58\'");
            int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker61)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker62)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker63)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker64)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker65)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S61\'");
                int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker29)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker56)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker57)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker58)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker59)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker60)));
                if ((temp6 == 0)) {
                    this.Manager.Comment("reaching state \'S62\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Comment("reaching state \'S63\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S64\'");
                    int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker30)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker51)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker52)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker53)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker54)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker55)));
                    if ((temp5 == 0)) {
                        this.Manager.Comment("reaching state \'S65\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                        this.Manager.Comment("reaching state \'S66\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S67\'");
                        int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker31)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker46)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker47)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker48)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker49)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker50)));
                        if ((temp4 == 0)) {
                            this.Manager.Comment("reaching state \'S68\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                            this.Manager.Comment("reaching state \'S69\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S70\'");
                            int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker32)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker41)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker42)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker43)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker44)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker45)));
                            if ((temp3 == 0)) {
                                this.Manager.Comment("reaching state \'S71\'");
                                this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                                this.Manager.Comment("reaching state \'S72\'");
                                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                this.Manager.Comment("reaching state \'S73\'");
                                int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker33)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker35)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker37)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker38)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker39)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker40)));
                                if ((temp2 == 0)) {
                                    this.Manager.Comment("reaching state \'S74\'");
                                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                "Head",
                                                                "Tail"}, new object[] {
                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                            "Head",
                                                                            "Tail"}, new object[] {
                                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                                    this.Manager.Comment("reaching state \'S75\'");
                                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                    this.Manager.Comment("reaching state \'S76\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker34))) != -1)) {
                                        this.Manager.Comment("reaching state \'S77\'");
                                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Rep"}, new object[] {
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                                "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                                "1, and not reply.\"");
                                        this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                                        this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                                        this.Manager.Comment("reaching state \'S78\'");
                                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                        this.Manager.Comment("reaching state \'S79\'");
                                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                                        this.INegotiateAdapterInstance.ExpectDisconnect();
                                        this.Manager.Comment("reaching state \'S80\'");
                                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                                        this.Manager.Comment("reaching state \'S81\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker34)));
                                    }
                                    goto label1;
                                }
                                if ((temp2 == 1)) {
                                    NegotiateTestCaseS82();
                                    goto label1;
                                }
                                if ((temp2 == 2)) {
                                    NegotiateTestCaseS82();
                                    goto label1;
                                }
                                if ((temp2 == 3)) {
                                    NegotiateTestCaseS82();
                                    goto label1;
                                }
                                if ((temp2 == 4)) {
                                    NegotiateTestCaseS82();
                                    goto label1;
                                }
                                if ((temp2 == 5)) {
                                    NegotiateTestCaseS82();
                                    goto label1;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker33)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker35)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker37)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker38)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker39)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker40)));
                            label1:
;
                                goto label2;
                            }
                            if ((temp3 == 1)) {
                                NegotiateTestCaseS82();
                                goto label2;
                            }
                            if ((temp3 == 2)) {
                                NegotiateTestCaseS82();
                                goto label2;
                            }
                            if ((temp3 == 3)) {
                                NegotiateTestCaseS82();
                                goto label2;
                            }
                            if ((temp3 == 4)) {
                                NegotiateTestCaseS82();
                                goto label2;
                            }
                            if ((temp3 == 5)) {
                                NegotiateTestCaseS82();
                                goto label2;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker32)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker41)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker42)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker43)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker44)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker45)));
                        label2:
;
                            goto label3;
                        }
                        if ((temp4 == 1)) {
                            NegotiateTestCaseS82();
                            goto label3;
                        }
                        if ((temp4 == 2)) {
                            NegotiateTestCaseS82();
                            goto label3;
                        }
                        if ((temp4 == 3)) {
                            NegotiateTestCaseS82();
                            goto label3;
                        }
                        if ((temp4 == 4)) {
                            NegotiateTestCaseS82();
                            goto label3;
                        }
                        if ((temp4 == 5)) {
                            NegotiateTestCaseS82();
                            goto label3;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker31)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker46)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker47)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker48)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker49)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker50)));
                    label3:
;
                        goto label4;
                    }
                    if ((temp5 == 1)) {
                        NegotiateTestCaseS82();
                        goto label4;
                    }
                    if ((temp5 == 2)) {
                        NegotiateTestCaseS82();
                        goto label4;
                    }
                    if ((temp5 == 3)) {
                        NegotiateTestCaseS82();
                        goto label4;
                    }
                    if ((temp5 == 4)) {
                        NegotiateTestCaseS82();
                        goto label4;
                    }
                    if ((temp5 == 5)) {
                        NegotiateTestCaseS82();
                        goto label4;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker30)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker51)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker52)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker53)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker54)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker55)));
                label4:
;
                    goto label5;
                }
                if ((temp6 == 1)) {
                    NegotiateTestCaseS82();
                    goto label5;
                }
                if ((temp6 == 2)) {
                    NegotiateTestCaseS82();
                    goto label5;
                }
                if ((temp6 == 3)) {
                    NegotiateTestCaseS82();
                    goto label5;
                }
                if ((temp6 == 4)) {
                    NegotiateTestCaseS82();
                    goto label5;
                }
                if ((temp6 == 5)) {
                    NegotiateTestCaseS82();
                    goto label5;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker29)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker56)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker57)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker58)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker59)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker60)));
            label5:
;
                goto label6;
            }
            if ((temp7 == 1)) {
                NegotiateTestCaseS82();
                goto label6;
            }
            if ((temp7 == 2)) {
                NegotiateTestCaseS82();
                goto label6;
            }
            if ((temp7 == 3)) {
                NegotiateTestCaseS82();
                goto label6;
            }
            if ((temp7 == 4)) {
                NegotiateTestCaseS82();
                goto label6;
            }
            if ((temp7 == 5)) {
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S94\'");
                goto label6;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker61)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker62)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker63)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker64)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker65)));
        label6:
;
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker28(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker29(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker30(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker31(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker32(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker33(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker34(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S76");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S76");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker35(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS82() {
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                "Head",
                                                                "Tail"}, new object[] {
                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                            "Head",
                                                                            "Tail"}, new object[] {
                                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S84\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker36))) != -1)) {
                this.Manager.Comment("reaching state \'S85\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                        "1, and not reply.\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S89\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS0NegotiateResponseChecker36)));
            }
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker36(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker37(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker38(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker39(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker40(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker41(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker42(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker43(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker44(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker45(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker46(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker47(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker48(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker49(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker50(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker51(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker52(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker53(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker54(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker55(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker56(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker57(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker58(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker59(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker60(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker61(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker62(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker63(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker64(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker65(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker66(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker67(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker68(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker69(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker70(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker71(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S52");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker72(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S52");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker73(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S52");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker74(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S52");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker75(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S52");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker76(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker77(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker78(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker79(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker80(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker81(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S46");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker82(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S46");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker83(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S46");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker84(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S46");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker85(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S46");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker86(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker87(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker88(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker89(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker90(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker91(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker92(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker93(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker94(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker95(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker96(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S37");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker97(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S37");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker98(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S37");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker99(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S37");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker100(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S37");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker101(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S34");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker102(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S34");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker103(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S34");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker104(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S34");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker105(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S34");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker106(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker107(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker108(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker109(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker110(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker111(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S28");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S28");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker112(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S28");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S28");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker113(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S28");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S28");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker114(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S28");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S28");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker115(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S28");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S28");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker116(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker117(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S25");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S25");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker118(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S25");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S25");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker119(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S25");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S25");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker120(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S25");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S25");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker121(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S25");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S25");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker122(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S22");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S22");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker123(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S19");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S19");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker124(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S19");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S19");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker125(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S19");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S19");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker126(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker127(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S152");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect family, processing MUST continue as specified in 3.3.5.3.2."", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                    " family, processing MUST continue as specified in 3.3.5.3.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1");
        }
        
        private void NegotiateTestCaseS0NegotiateResponseChecker128(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        #endregion
        
        #region Test Starting in S1018
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1018() {
            this.Manager.BeginTest("NegotiateTestCaseS1018");
            this.Manager.Comment("reaching state \'S1018\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp22;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp22);
            this.Manager.AddReturn(ReadConfigInfo, null, temp22);
            this.Manager.Comment("reaching state \'S1019\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1018ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1018ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1018ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1018ReadConfigChecker3)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S1020\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1021\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1022\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1023\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1024\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1018NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1025\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1026\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1027\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1028\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1029\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1018NegotiateResponseChecker)));
                }
                goto label21;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S1030\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1031\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1032\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                this.Manager.Comment("reaching state \'S1033\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1034\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1018NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1035\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1036\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1037\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1038\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1039\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1018NegotiateResponseChecker1)));
                }
                goto label21;
            }
            if ((temp23 == 2)) {
                NegotiateTestCaseS183();
                goto label21;
            }
            if ((temp23 == 3)) {
                NegotiateTestCaseS189();
                goto label21;
            }
            throw new InvalidOperationException("never reached");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1018ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1019");
        }
        
        private void NegotiateTestCaseS1018NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1024");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1024");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1018ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1019");
        }
        
        private void NegotiateTestCaseS1018NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1034");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1034");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1018ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1019");
        }
        
        private void NegotiateTestCaseS183() {
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("executing step \'call SetupConnection()\'");
            this.INegotiateAdapterInstance.SetupConnection();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                    " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                    "ndow size of 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 2.002",
                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    ".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                    "string \"SMB 2.002\".<217>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                    "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
            this.Manager.Comment("reaching state \'S186\'");
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
            this.Manager.Comment("reaching state \'S187\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1018NegotiateResponseChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S188\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1018NegotiateResponseChecker2)));
            }
        }
        
        private void NegotiateTestCaseS1018NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S187");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S187");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1018ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1019");
        }
        
        private void NegotiateTestCaseS189() {
            this.Manager.Comment("reaching state \'S189\'");
            this.Manager.Comment("executing step \'call SetupConnection()\'");
            this.INegotiateAdapterInstance.SetupConnection();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                    " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                    "ndow size of 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
            this.Manager.Comment("reaching state \'S190\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 2.002",
                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                    " family, processing MUST continue as specified in 3.3.5.3.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                    "string \"SMB 2.002\".<217>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                    "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
            this.Manager.Comment("reaching state \'S192\'");
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
            this.Manager.Comment("reaching state \'S193\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1018NegotiateResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S194\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1018NegotiateResponseChecker3)));
            }
        }
        
        private void NegotiateTestCaseS1018NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S193");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S193");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect family, processing MUST continue as specified in 3.3.5.3.2."", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                    " family, processing MUST continue as specified in 3.3.5.3.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S1040
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1040() {
            this.Manager.BeginTest("NegotiateTestCaseS1040");
            this.Manager.Comment("reaching state \'S1040\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp24;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp24);
            this.Manager.AddReturn(ReadConfigInfo, null, temp24);
            this.Manager.Comment("reaching state \'S1041\'");
            int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1040ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1040ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1040ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1040ReadConfigChecker3)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S1042\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1043\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1044\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1045\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1046\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1040NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1047\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1048\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1049\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1050\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1051\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1040NegotiateResponseChecker)));
                }
                goto label22;
            }
            if ((temp25 == 1)) {
                this.Manager.Comment("reaching state \'S1052\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1053\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1054\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1055\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1056\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1040NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1057\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1058\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1059\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1060\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1061\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1040NegotiateResponseChecker1)));
                }
                goto label22;
            }
            if ((temp25 == 2)) {
                NegotiateTestCaseS183();
                goto label22;
            }
            if ((temp25 == 3)) {
                NegotiateTestCaseS189();
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1040ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1041");
        }
        
        private void NegotiateTestCaseS1040NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1046");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1046");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1040ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1041");
        }
        
        private void NegotiateTestCaseS1040NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1056");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1056");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1040ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1041");
        }
        
        private void NegotiateTestCaseS1040ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1041");
        }
        #endregion
        
        #region Test Starting in S1062
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1062() {
            this.Manager.BeginTest("NegotiateTestCaseS1062");
            this.Manager.Comment("reaching state \'S1062\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp26;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp26);
            this.Manager.AddReturn(ReadConfigInfo, null, temp26);
            this.Manager.Comment("reaching state \'S1063\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1062ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1062ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1062ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1062ReadConfigChecker3)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S1064\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1065\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1066\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1067\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1068\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1062NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1069\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "SMB 2.???",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                    this.Manager.Comment("reaching state \'S1070\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1071\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1072\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1073\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1062NegotiateResponseChecker)));
                }
                goto label23;
            }
            if ((temp27 == 1)) {
                this.Manager.Comment("reaching state \'S1074\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1075\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1076\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1077\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1078\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1062NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1079\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1080\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1081\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1082\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1083\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1062NegotiateResponseChecker1)));
                }
                goto label23;
            }
            if ((temp27 == 2)) {
                NegotiateTestCaseS183();
                goto label23;
            }
            if ((temp27 == 3)) {
                NegotiateTestCaseS189();
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1062ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1063");
        }
        
        private void NegotiateTestCaseS1062NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1068");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1068");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1062ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1063");
        }
        
        private void NegotiateTestCaseS1062NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1078");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1078");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1062ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1063");
        }
        
        private void NegotiateTestCaseS1062ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1063");
        }
        #endregion
        
        #region Test Starting in S1084
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1084() {
            this.Manager.BeginTest("NegotiateTestCaseS1084");
            this.Manager.Comment("reaching state \'S1084\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp28;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp28);
            this.Manager.AddReturn(ReadConfigInfo, null, temp28);
            this.Manager.Comment("reaching state \'S1085\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1084ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1084ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1084ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1084ReadConfigChecker3)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S1086\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1087\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1088\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1089\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1090\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1084NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1091\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1092\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1093\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1094\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1095\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1084NegotiateResponseChecker)));
                }
                goto label24;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S1096\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1097\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1098\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.???",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S1099\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1100\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1084NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1101\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1102\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1103\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1104\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1105\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1084NegotiateResponseChecker1)));
                }
                goto label24;
            }
            if ((temp29 == 2)) {
                NegotiateTestCaseS183();
                goto label24;
            }
            if ((temp29 == 3)) {
                NegotiateTestCaseS189();
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1084ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1085");
        }
        
        private void NegotiateTestCaseS1084NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1090");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1090");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1084ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1085");
        }
        
        private void NegotiateTestCaseS1084NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1100");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1100");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1084ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1085");
        }
        
        private void NegotiateTestCaseS1084ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1085");
        }
        #endregion
        
        #region Test Starting in S1106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1106() {
            this.Manager.BeginTest("NegotiateTestCaseS1106");
            this.Manager.Comment("reaching state \'S1106\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp30;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp30);
            this.Manager.AddReturn(ReadConfigInfo, null, temp30);
            this.Manager.Comment("reaching state \'S1107\'");
            int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1106ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1106ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1106ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1106ReadConfigChecker3)));
            if ((temp31 == 0)) {
                this.Manager.Comment("reaching state \'S1108\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1109\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1110\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                this.Manager.Comment("reaching state \'S1111\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1112\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1106NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1113\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1114\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1115\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1116\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1117\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1106NegotiateResponseChecker)));
                }
                goto label25;
            }
            if ((temp31 == 1)) {
                this.Manager.Comment("reaching state \'S1118\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1119\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1120\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.???",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S1121\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1122\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1106NegotiateResponseChecker1))) != -1)) {
                    NegotiateTestCaseS20();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1106NegotiateResponseChecker1)));
                }
                goto label25;
            }
            if ((temp31 == 2)) {
                NegotiateTestCaseS183();
                goto label25;
            }
            if ((temp31 == 3)) {
                NegotiateTestCaseS189();
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1106ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1107");
        }
        
        private void NegotiateTestCaseS1106NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1112");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1106ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1107");
        }
        
        private void NegotiateTestCaseS1106NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1122");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1122");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1106ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1107");
        }
        
        private void NegotiateTestCaseS1106ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1107");
        }
        #endregion
        
        #region Test Starting in S1123
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1123() {
            this.Manager.BeginTest("NegotiateTestCaseS1123");
            this.Manager.Comment("reaching state \'S1123\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp32;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp32);
            this.Manager.AddReturn(ReadConfigInfo, null, temp32);
            this.Manager.Comment("reaching state \'S1124\'");
            int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1123ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1123ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1123ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1123ReadConfigChecker3)));
            if ((temp33 == 0)) {
                this.Manager.Comment("reaching state \'S1125\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1126\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1127\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1128\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1129\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1123NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1130\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1131\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1132\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1133\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1134\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1123NegotiateResponseChecker)));
                }
                goto label26;
            }
            if ((temp33 == 1)) {
                this.Manager.Comment("reaching state \'S1135\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1136\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1137\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 1.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is not present in the dialect list and the se" +
                        "rver does not implement SMB, the server MUST disconnect the connection, as speci" +
                        "fied in section 3.3.7.1, without sending a response.\"");
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS1138();
                goto label26;
            }
            if ((temp33 == 2)) {
                NegotiateTestCaseS183();
                goto label26;
            }
            if ((temp33 == 3)) {
                NegotiateTestCaseS189();
                goto label26;
            }
            throw new InvalidOperationException("never reached");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1123ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1124");
        }
        
        private void NegotiateTestCaseS1123NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1129");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1123ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1124");
        }
        
        private void NegotiateTestCaseS1138() {
            this.Manager.Comment("reaching state \'S1138\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ComNegotiateRequestInfo, null, new ComNegotiateRequestDelegate1(this.NegotiateTestCaseS1123ComNegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S1139\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S1140\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S1141\'");
        }
        
        private void NegotiateTestCaseS1123ComNegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS1123ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1124");
        }
        
        private void NegotiateTestCaseS1123ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1124");
        }
        #endregion
        
        #region Test Starting in S1142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1142() {
            this.Manager.BeginTest("NegotiateTestCaseS1142");
            this.Manager.Comment("reaching state \'S1142\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp34;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp34);
            this.Manager.AddReturn(ReadConfigInfo, null, temp34);
            this.Manager.Comment("reaching state \'S1143\'");
            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1142ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1142ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1142ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1142ReadConfigChecker3)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S1144\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1145\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1146\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1147\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1148\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1142NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1149\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1150\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1151\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1152\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1153\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1142NegotiateResponseChecker)));
                }
                goto label27;
            }
            if ((temp35 == 1)) {
                this.Manager.Comment("reaching state \'S1154\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1155\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1156\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is not present in the dialect list and the se" +
                        "rver does not implement SMB, the server MUST disconnect the connection, as speci" +
                        "fied in section 3.3.7.1, without sending a response.\"");
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS1157();
                goto label27;
            }
            if ((temp35 == 2)) {
                NegotiateTestCaseS183();
                goto label27;
            }
            if ((temp35 == 3)) {
                NegotiateTestCaseS189();
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1142ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1143");
        }
        
        private void NegotiateTestCaseS1142NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1142ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1143");
        }
        
        private void NegotiateTestCaseS1157() {
            this.Manager.Comment("reaching state \'S1157\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ComNegotiateRequestInfo, null, new ComNegotiateRequestDelegate1(this.NegotiateTestCaseS1142ComNegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S1158\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S1159\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S1160\'");
        }
        
        private void NegotiateTestCaseS1142ComNegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS1142ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1143");
        }
        
        private void NegotiateTestCaseS1142ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1143");
        }
        #endregion
        
        #region Test Starting in S1161
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1161() {
            this.Manager.BeginTest("NegotiateTestCaseS1161");
            this.Manager.Comment("reaching state \'S1161\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp36;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp36);
            this.Manager.AddReturn(ReadConfigInfo, null, temp36);
            this.Manager.Comment("reaching state \'S1162\'");
            int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1161ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1161ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1161ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1161ReadConfigChecker3)));
            if ((temp37 == 0)) {
                this.Manager.Comment("reaching state \'S1163\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1164\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1165\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1166\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1167\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1161NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1168\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1169\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1170\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1171\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1172\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1161NegotiateResponseChecker)));
                }
                goto label28;
            }
            if ((temp37 == 1)) {
                this.Manager.Comment("reaching state \'S1173\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1174\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1175\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S1176\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1177\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1161NegotiateResponseChecker1))) != -1)) {
                    NegotiateTestCaseS41();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1161NegotiateResponseChecker1)));
                }
                goto label28;
            }
            if ((temp37 == 2)) {
                NegotiateTestCaseS183();
                goto label28;
            }
            if ((temp37 == 3)) {
                NegotiateTestCaseS189();
                goto label28;
            }
            throw new InvalidOperationException("never reached");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1161ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1162");
        }
        
        private void NegotiateTestCaseS1161NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1161ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1162");
        }
        
        private void NegotiateTestCaseS1161NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1161ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1162");
        }
        
        private void NegotiateTestCaseS1161ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1162");
        }
        #endregion
        
        #region Test Starting in S1178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1178() {
            this.Manager.BeginTest("NegotiateTestCaseS1178");
            this.Manager.Comment("reaching state \'S1178\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp38;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp38);
            this.Manager.AddReturn(ReadConfigInfo, null, temp38);
            this.Manager.Comment("reaching state \'S1179\'");
            int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1178ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1178ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1178ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1178ReadConfigChecker3)));
            if ((temp44 == 0)) {
                this.Manager.Comment("reaching state \'S1180\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1181\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1182\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1183\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1184\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1185\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1186\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1187\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1188\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1189\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker)));
                }
                goto label34;
            }
            if ((temp44 == 1)) {
                this.Manager.Comment("reaching state \'S1190\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1191\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1192\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS1193();
                goto label34;
            }
            if ((temp44 == 2)) {
                NegotiateTestCaseS183();
                goto label34;
            }
            if ((temp44 == 3)) {
                NegotiateTestCaseS189();
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1178ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1179");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1184");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1178ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1179");
        }
        
        private void NegotiateTestCaseS1193() {
            this.Manager.Comment("reaching state \'S1193\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS1178NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S1194\'");
            int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker29)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker30)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker31)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker32)));
            if ((temp43 == 0)) {
                this.Manager.Comment("reaching state \'S1195\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                this.Manager.Comment("reaching state \'S1196\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1197\'");
                int temp42 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker26)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker27)));
                if ((temp42 == 0)) {
                    this.Manager.Comment("reaching state \'S1198\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Comment("reaching state \'S1199\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1200\'");
                    int temp41 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker22)));
                    if ((temp41 == 0)) {
                        this.Manager.Comment("reaching state \'S1201\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                        this.Manager.Comment("reaching state \'S1202\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1203\'");
                        int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker17)));
                        if ((temp40 == 0)) {
                            this.Manager.Comment("reaching state \'S1204\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                            this.Manager.AddReturn(NegotiateRequestInfo, null);
                            NegotiateTestCaseS1205();
                            goto label30;
                        }
                        if ((temp40 == 1)) {
                            NegotiateTestCaseS1235();
                            goto label30;
                        }
                        if ((temp40 == 2)) {
                            NegotiateTestCaseS1235();
                            goto label30;
                        }
                        if ((temp40 == 3)) {
                            NegotiateTestCaseS1235();
                            goto label30;
                        }
                        if ((temp40 == 4)) {
                            NegotiateTestCaseS1235();
                            goto label30;
                        }
                        if ((temp40 == 5)) {
                            NegotiateTestCaseS1235();
                            goto label30;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker17)));
                    label30:
;
                        goto label31;
                    }
                    if ((temp41 == 1)) {
                        NegotiateTestCaseS1235();
                        goto label31;
                    }
                    if ((temp41 == 2)) {
                        NegotiateTestCaseS1235();
                        goto label31;
                    }
                    if ((temp41 == 3)) {
                        NegotiateTestCaseS1235();
                        goto label31;
                    }
                    if ((temp41 == 4)) {
                        NegotiateTestCaseS1235();
                        goto label31;
                    }
                    if ((temp41 == 5)) {
                        NegotiateTestCaseS1235();
                        goto label31;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker22)));
                label31:
;
                    goto label32;
                }
                if ((temp42 == 1)) {
                    NegotiateTestCaseS1235();
                    goto label32;
                }
                if ((temp42 == 2)) {
                    NegotiateTestCaseS1235();
                    goto label32;
                }
                if ((temp42 == 3)) {
                    NegotiateTestCaseS1235();
                    goto label32;
                }
                if ((temp42 == 4)) {
                    NegotiateTestCaseS1235();
                    goto label32;
                }
                if ((temp42 == 5)) {
                    NegotiateTestCaseS1235();
                    goto label32;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker26)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker27)));
            label32:
;
                goto label33;
            }
            if ((temp43 == 1)) {
                NegotiateTestCaseS1235();
                goto label33;
            }
            if ((temp43 == 2)) {
                NegotiateTestCaseS1235();
                goto label33;
            }
            if ((temp43 == 3)) {
                NegotiateTestCaseS1235();
                goto label33;
            }
            if ((temp43 == 4)) {
                NegotiateTestCaseS1235();
                goto label33;
            }
            if ((temp43 == 5)) {
                this.Manager.Comment("reaching state \'S1240\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1241\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1242\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker33))) != -1)) {
                    this.Manager.Comment("reaching state \'S1243\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1244\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1245\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1246\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1247\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker33)));
                }
                goto label33;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker29)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker30)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker31)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker32)));
        label33:
;
        }
        
        private void NegotiateTestCaseS1178NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1205() {
            this.Manager.Comment("reaching state \'S1205\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS1178NegotiateRequestChecker1)));
            this.Manager.Comment("reaching state \'S1206\'");
            int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker11)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S1207\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1208\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1209\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker6))) != -1)) {
                    this.Manager.Comment("reaching state \'S1210\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1211\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1212\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1213\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1214\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker6)));
                }
                goto label29;
            }
            if ((temp39 == 1)) {
                this.Manager.Comment("reaching state \'S1215\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Comment("reaching state \'S1216\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1217\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S1218\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S1219\'");
                goto label29;
            }
            if ((temp39 == 2)) {
                this.Manager.Comment("reaching state \'S1220\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Comment("reaching state \'S1221\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1222\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S1223\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S1224\'");
                goto label29;
            }
            if ((temp39 == 3)) {
                this.Manager.Comment("reaching state \'S1225\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 1.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS1138();
                goto label29;
            }
            if ((temp39 == 4)) {
                this.Manager.Comment("reaching state \'S1226\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS1157();
                goto label29;
            }
            if ((temp39 == 5)) {
                this.Manager.Comment("reaching state \'S1227\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                this.Manager.Comment("reaching state \'S1228\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1229\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker12))) != -1)) {
                    this.Manager.Comment("reaching state \'S1230\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1231\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1232\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1233\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1234\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker12)));
                }
                goto label29;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1178NegotiateResponseChecker11)));
        label29:
;
        }
        
        private void NegotiateTestCaseS1178NegotiateRequestChecker1() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1229");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1235() {
            this.Manager.Comment("reaching state \'S1235\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 2.002",
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    "SMB 2.???",
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
            this.Manager.Comment("reaching state \'S1236\'");
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
            this.Manager.Comment("reaching state \'S1237\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S1238\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S1239\'");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker28(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker29(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker30(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker31(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker32(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1178NegotiateResponseChecker33(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1242");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1242");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1178ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1179");
        }
        
        private void NegotiateTestCaseS1178ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1179");
        }
        #endregion
        
        #region Test Starting in S1248
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1248() {
            this.Manager.BeginTest("NegotiateTestCaseS1248");
            this.Manager.Comment("reaching state \'S1248\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp45;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp45);
            this.Manager.AddReturn(ReadConfigInfo, null, temp45);
            this.Manager.Comment("reaching state \'S1249\'");
            int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1248ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1248ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1248ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1248ReadConfigChecker3)));
            if ((temp59 == 0)) {
                this.Manager.Comment("reaching state \'S1250\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1251\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1252\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 1.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is not present in the dialect list and the se" +
                        "rver does not implement SMB, the server MUST disconnect the connection, as speci" +
                        "fied in section 3.3.7.1, without sending a response.\"");
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS1253();
                goto label48;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S1257\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1258\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1259\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1260\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1261\'");
                int temp58 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker62)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker63)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker64)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker65)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker66)));
                if ((temp58 == 0)) {
                    this.Manager.Comment("reaching state \'S1262\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S1263\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1264\'");
                    int temp55 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker57)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker58)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker59)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker60)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker61)));
                    if ((temp55 == 0)) {
                        this.Manager.Comment("reaching state \'S1265\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S1266\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1267\'");
                        int temp54 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker52)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker53)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker54)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker55)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker56)));
                        if ((temp54 == 0)) {
                            this.Manager.Comment("reaching state \'S1268\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                            this.Manager.Comment("reaching state \'S1269\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S1270\'");
                            int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker48)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker49)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker50)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker51)));
                            if ((temp53 == 0)) {
                                NegotiateTestCaseS1271();
                                goto label42;
                            }
                            if ((temp53 == 1)) {
                                NegotiateTestCaseS1272();
                                goto label42;
                            }
                            if ((temp53 == 2)) {
                                NegotiateTestCaseS1272();
                                goto label42;
                            }
                            if ((temp53 == 3)) {
                                NegotiateTestCaseS1272();
                                goto label42;
                            }
                            if ((temp53 == 4)) {
                                NegotiateTestCaseS1272();
                                goto label42;
                            }
                            if ((temp53 == 5)) {
                                NegotiateTestCaseS1272();
                                goto label42;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker48)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker49)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker50)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker51)));
                        label42:
;
                            goto label43;
                        }
                        if ((temp54 == 1)) {
                            NegotiateTestCaseS1272();
                            goto label43;
                        }
                        if ((temp54 == 2)) {
                            NegotiateTestCaseS1272();
                            goto label43;
                        }
                        if ((temp54 == 3)) {
                            NegotiateTestCaseS1272();
                            goto label43;
                        }
                        if ((temp54 == 4)) {
                            NegotiateTestCaseS1272();
                            goto label43;
                        }
                        if ((temp54 == 5)) {
                            NegotiateTestCaseS1272();
                            goto label43;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker52)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker53)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker54)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker55)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker56)));
                    label43:
;
                        goto label44;
                    }
                    if ((temp55 == 1)) {
                        NegotiateTestCaseS1271();
                        goto label44;
                    }
                    if ((temp55 == 2)) {
                        NegotiateTestCaseS1272();
                        goto label44;
                    }
                    if ((temp55 == 3)) {
                        NegotiateTestCaseS1272();
                        goto label44;
                    }
                    if ((temp55 == 4)) {
                        NegotiateTestCaseS1272();
                        goto label44;
                    }
                    if ((temp55 == 5)) {
                        NegotiateTestCaseS1272();
                        goto label44;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker57)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker58)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker59)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker60)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker61)));
                label44:
;
                    goto label47;
                }
                if ((temp58 == 1)) {
                    NegotiateTestCaseS1272();
                    goto label47;
                }
                if ((temp58 == 2)) {
                    NegotiateTestCaseS1272();
                    goto label47;
                }
                if ((temp58 == 3)) {
                    NegotiateTestCaseS1272();
                    goto label47;
                }
                if ((temp58 == 4)) {
                    NegotiateTestCaseS1272();
                    goto label47;
                }
                if ((temp58 == 5)) {
                    this.Manager.Comment("reaching state \'S1302\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.AddReturn(NegotiateRequestInfo, null);
                    NegotiateTestCaseS1303();
                    goto label47;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker62)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker63)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker64)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker65)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker66)));
            label47:
;
                goto label48;
            }
            if ((temp59 == 2)) {
                NegotiateTestCaseS183();
                goto label48;
            }
            if ((temp59 == 3)) {
                NegotiateTestCaseS189();
                goto label48;
            }
            throw new InvalidOperationException("never reached");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1248ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1249");
        }
        
        private void NegotiateTestCaseS1253() {
            this.Manager.Comment("reaching state \'S1253\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ComNegotiateRequestInfo, null, new ComNegotiateRequestDelegate1(this.NegotiateTestCaseS1248ComNegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S1254\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S1255\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S1256\'");
        }
        
        private void NegotiateTestCaseS1248ComNegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS1248ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1249");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1271() {
            this.Manager.Comment("reaching state \'S1271\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
            this.Manager.AddReturn(NegotiateRequestInfo, null);
            NegotiateTestCaseS1193();
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1272() {
            this.Manager.Comment("reaching state \'S1272\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.AddReturn(NegotiateRequestInfo, null);
            NegotiateTestCaseS1273();
        }
        
        private void NegotiateTestCaseS1273() {
            this.Manager.Comment("reaching state \'S1273\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS1248NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S1274\'");
            int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker36)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker37)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker38)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker39)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker46)));
            if ((temp52 == 0)) {
                this.Manager.Comment("reaching state \'S1275\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1276\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1277\'");
                int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker31)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker32)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker33)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker34)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker35)));
                if ((temp50 == 0)) {
                    this.Manager.Comment("reaching state \'S1278\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S1279\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1280\'");
                    int temp49 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker26)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker27)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker29)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker30)));
                    if ((temp49 == 0)) {
                        this.Manager.Comment("reaching state \'S1281\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S1282\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1283\'");
                        int temp48 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker25)));
                        if ((temp48 == 0)) {
                            this.Manager.Comment("reaching state \'S1284\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                            this.Manager.Comment("reaching state \'S1285\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S1286\'");
                            int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker20)));
                            if ((temp47 == 0)) {
                                NegotiateTestCaseS1287();
                                goto label36;
                            }
                            if ((temp47 == 1)) {
                                NegotiateTestCaseS1287();
                                goto label36;
                            }
                            if ((temp47 == 2)) {
                                NegotiateTestCaseS1287();
                                goto label36;
                            }
                            if ((temp47 == 3)) {
                                NegotiateTestCaseS1287();
                                goto label36;
                            }
                            if ((temp47 == 4)) {
                                NegotiateTestCaseS1287();
                                goto label36;
                            }
                            if ((temp47 == 5)) {
                                NegotiateTestCaseS1290();
                                goto label36;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker20)));
                        label36:
;
                            goto label37;
                        }
                        if ((temp48 == 1)) {
                            NegotiateTestCaseS1290();
                            goto label37;
                        }
                        if ((temp48 == 2)) {
                            NegotiateTestCaseS1290();
                            goto label37;
                        }
                        if ((temp48 == 3)) {
                            NegotiateTestCaseS1290();
                            goto label37;
                        }
                        if ((temp48 == 4)) {
                            NegotiateTestCaseS1290();
                            goto label37;
                        }
                        if ((temp48 == 5)) {
                            NegotiateTestCaseS1290();
                            goto label37;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker25)));
                    label37:
;
                        goto label38;
                    }
                    if ((temp49 == 1)) {
                        NegotiateTestCaseS1290();
                        goto label38;
                    }
                    if ((temp49 == 2)) {
                        NegotiateTestCaseS1290();
                        goto label38;
                    }
                    if ((temp49 == 3)) {
                        NegotiateTestCaseS1290();
                        goto label38;
                    }
                    if ((temp49 == 4)) {
                        NegotiateTestCaseS1290();
                        goto label38;
                    }
                    if ((temp49 == 5)) {
                        NegotiateTestCaseS1290();
                        goto label38;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker26)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker27)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker29)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker30)));
                label38:
;
                    goto label39;
                }
                if ((temp50 == 1)) {
                    NegotiateTestCaseS1290();
                    goto label39;
                }
                if ((temp50 == 2)) {
                    NegotiateTestCaseS1290();
                    goto label39;
                }
                if ((temp50 == 3)) {
                    NegotiateTestCaseS1290();
                    goto label39;
                }
                if ((temp50 == 4)) {
                    NegotiateTestCaseS1290();
                    goto label39;
                }
                if ((temp50 == 5)) {
                    NegotiateTestCaseS1290();
                    goto label39;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker31)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker32)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker33)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker34)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker35)));
            label39:
;
                goto label41;
            }
            if ((temp52 == 1)) {
                NegotiateTestCaseS1290();
                goto label41;
            }
            if ((temp52 == 2)) {
                NegotiateTestCaseS1290();
                goto label41;
            }
            if ((temp52 == 3)) {
                NegotiateTestCaseS1290();
                goto label41;
            }
            if ((temp52 == 4)) {
                this.Manager.Comment("reaching state \'S1291\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1292\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1293\'");
                int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker40)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker41)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker42)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker43)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker44)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker45)));
                if ((temp51 == 0)) {
                    NegotiateTestCaseS1290();
                    goto label40;
                }
                if ((temp51 == 1)) {
                    NegotiateTestCaseS1290();
                    goto label40;
                }
                if ((temp51 == 2)) {
                    NegotiateTestCaseS1290();
                    goto label40;
                }
                if ((temp51 == 3)) {
                    NegotiateTestCaseS1290();
                    goto label40;
                }
                if ((temp51 == 4)) {
                    NegotiateTestCaseS1290();
                    goto label40;
                }
                if ((temp51 == 5)) {
                    NegotiateTestCaseS1290();
                    goto label40;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker40)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker41)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker42)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker43)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker44)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker45)));
            label40:
;
                goto label41;
            }
            if ((temp52 == 5)) {
                this.Manager.Comment("reaching state \'S1294\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1295\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1296\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker47))) != -1)) {
                    this.Manager.Comment("reaching state \'S1297\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1298\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1299\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1300\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1301\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker47)));
                }
                goto label41;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker36)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker37)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker38)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker39)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker46)));
        label41:
;
        }
        
        private void NegotiateTestCaseS1248NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1283");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1287() {
            this.Manager.Comment("reaching state \'S1287\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S1288\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S1289\'");
            int temp46 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker15)));
            if ((temp46 == 0)) {
                NegotiateTestCaseS1272();
                goto label35;
            }
            if ((temp46 == 1)) {
                NegotiateTestCaseS1272();
                goto label35;
            }
            if ((temp46 == 2)) {
                NegotiateTestCaseS1272();
                goto label35;
            }
            if ((temp46 == 3)) {
                NegotiateTestCaseS1272();
                goto label35;
            }
            if ((temp46 == 4)) {
                NegotiateTestCaseS1272();
                goto label35;
            }
            if ((temp46 == 5)) {
                NegotiateTestCaseS1272();
                goto label35;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker15)));
        label35:
;
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1289");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1289");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1289");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1289");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1289");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1289");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1290() {
            this.Manager.Comment("reaching state \'S1290\'");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1283");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1283");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1283");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1283");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1283");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker28(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker29(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker30(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker31(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker32(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker33(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker34(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker35(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker36(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker37(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker38(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker39(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker40(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker41(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker42(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker43(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker44(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker45(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1293");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker46(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker47(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1296");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1296");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker48(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker49(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker50(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker51(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1270");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker52(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker53(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker54(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker55(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker56(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker57(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker58(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker59(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker60(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker61(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker62(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker63(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker64(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker65(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker66(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1303() {
            this.Manager.Comment("reaching state \'S1303\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS1248NegotiateRequestChecker1)));
            this.Manager.Comment("reaching state \'S1304\'");
            int temp57 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker67)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker68)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker69)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker70)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker72)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker74)));
            if ((temp57 == 0)) {
                NegotiateTestCaseS1272();
                goto label46;
            }
            if ((temp57 == 1)) {
                NegotiateTestCaseS1272();
                goto label46;
            }
            if ((temp57 == 2)) {
                NegotiateTestCaseS1272();
                goto label46;
            }
            if ((temp57 == 3)) {
                this.Manager.Comment("reaching state \'S1305\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1306\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1307\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker71))) != -1)) {
                    this.Manager.Comment("reaching state \'S1308\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1309\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1310\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1311\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1312\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker71)));
                }
                goto label46;
            }
            if ((temp57 == 4)) {
                this.Manager.Comment("reaching state \'S1313\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                this.Manager.Comment("reaching state \'S1314\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1315\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker73))) != -1)) {
                    this.Manager.Comment("reaching state \'S1316\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1317\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1318\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1319\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1320\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker73)));
                }
                goto label46;
            }
            if ((temp57 == 5)) {
                this.Manager.Comment("reaching state \'S1321\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1322\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1323\'");
                int temp56 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker75)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker76)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker77)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker78)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker79)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker80)));
                if ((temp56 == 0)) {
                    NegotiateTestCaseS1272();
                    goto label45;
                }
                if ((temp56 == 1)) {
                    NegotiateTestCaseS1272();
                    goto label45;
                }
                if ((temp56 == 2)) {
                    NegotiateTestCaseS1272();
                    goto label45;
                }
                if ((temp56 == 3)) {
                    NegotiateTestCaseS1272();
                    goto label45;
                }
                if ((temp56 == 4)) {
                    NegotiateTestCaseS1272();
                    goto label45;
                }
                if ((temp56 == 5)) {
                    NegotiateTestCaseS1287();
                    goto label45;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker75)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker76)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker77)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker78)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker79)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker80)));
            label45:
;
                goto label46;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker67)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker68)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker69)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker70)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker72)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1248NegotiateResponseChecker74)));
        label46:
;
        }
        
        private void NegotiateTestCaseS1248NegotiateRequestChecker1() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker67(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker68(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker69(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker70(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker71(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker72(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker73(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1315");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1315");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker74(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1304");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1304");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker75(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker76(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker77(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker78(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker79(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248NegotiateResponseChecker80(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1248ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1249");
        }
        
        private void NegotiateTestCaseS1248ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1249");
        }
        #endregion
        
        #region Test Starting in S1324
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1324() {
            this.Manager.BeginTest("NegotiateTestCaseS1324");
            this.Manager.Comment("reaching state \'S1324\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp60;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp60);
            this.Manager.AddReturn(ReadConfigInfo, null, temp60);
            this.Manager.Comment("reaching state \'S1325\'");
            int temp61 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1324ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1324ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1324ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1324ReadConfigChecker3)));
            if ((temp61 == 0)) {
                this.Manager.Comment("reaching state \'S1326\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1327\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1328\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is not present in the dialect list and the se" +
                        "rver does not implement SMB, the server MUST disconnect the connection, as speci" +
                        "fied in section 3.3.7.1, without sending a response.\"");
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS1329();
                goto label49;
            }
            if ((temp61 == 1)) {
                this.Manager.Comment("reaching state \'S1333\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1334\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1335\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS1273();
                goto label49;
            }
            if ((temp61 == 2)) {
                NegotiateTestCaseS183();
                goto label49;
            }
            if ((temp61 == 3)) {
                NegotiateTestCaseS189();
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1324ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1325");
        }
        
        private void NegotiateTestCaseS1329() {
            this.Manager.Comment("reaching state \'S1329\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ComNegotiateRequestInfo, null, new ComNegotiateRequestDelegate1(this.NegotiateTestCaseS1324ComNegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S1330\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S1331\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S1332\'");
        }
        
        private void NegotiateTestCaseS1324ComNegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS1324ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1325");
        }
        
        private void NegotiateTestCaseS1324ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1325");
        }
        
        private void NegotiateTestCaseS1324ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1325");
        }
        #endregion
        
        #region Test Starting in S1336
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1336() {
            this.Manager.BeginTest("NegotiateTestCaseS1336");
            this.Manager.Comment("reaching state \'S1336\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp62;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp62);
            this.Manager.AddReturn(ReadConfigInfo, null, temp62);
            this.Manager.Comment("reaching state \'S1337\'");
            int temp63 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1336ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1336ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1336ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1336ReadConfigChecker3)));
            if ((temp63 == 0)) {
                this.Manager.Comment("reaching state \'S1338\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1339\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1340\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.???",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S1341\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1342\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1336NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1343\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1344\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1345\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1346\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1347\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1336NegotiateResponseChecker)));
                }
                goto label50;
            }
            if ((temp63 == 1)) {
                this.Manager.Comment("reaching state \'S1348\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1349\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1350\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1351\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1352\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1336NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1353\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                    this.Manager.Comment("reaching state \'S1354\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1355\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1356\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1357\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1336NegotiateResponseChecker1)));
                }
                goto label50;
            }
            if ((temp63 == 2)) {
                NegotiateTestCaseS183();
                goto label50;
            }
            if ((temp63 == 3)) {
                NegotiateTestCaseS189();
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1336ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1337");
        }
        
        private void NegotiateTestCaseS1336NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1342");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1342");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1336ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1337");
        }
        
        private void NegotiateTestCaseS1336NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1352");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1352");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1336ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1337");
        }
        
        private void NegotiateTestCaseS1336ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1337");
        }
        #endregion
        
        #region Test Starting in S1358
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1358() {
            this.Manager.BeginTest("NegotiateTestCaseS1358");
            this.Manager.Comment("reaching state \'S1358\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp64;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp64);
            this.Manager.AddReturn(ReadConfigInfo, null, temp64);
            this.Manager.Comment("reaching state \'S1359\'");
            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1358ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1358ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1358ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1358ReadConfigChecker3)));
            if ((temp69 == 0)) {
                this.Manager.Comment("reaching state \'S1360\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1361\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1362\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS1363();
                goto label55;
            }
            if ((temp69 == 1)) {
                this.Manager.Comment("reaching state \'S1395\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1396\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1397\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                this.Manager.Comment("reaching state \'S1398\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1399\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker26))) != -1)) {
                    this.Manager.Comment("reaching state \'S1400\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1401\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1402\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1403\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1404\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker26)));
                }
                goto label55;
            }
            if ((temp69 == 2)) {
                NegotiateTestCaseS183();
                goto label55;
            }
            if ((temp69 == 3)) {
                NegotiateTestCaseS189();
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1358ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1359");
        }
        
        private void NegotiateTestCaseS1363() {
            this.Manager.Comment("reaching state \'S1363\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS1358NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S1364\'");
            int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker24)));
            if ((temp68 == 0)) {
                this.Manager.Comment("reaching state \'S1365\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                this.Manager.Comment("reaching state \'S1366\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1367\'");
                int temp67 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker19)));
                if ((temp67 == 0)) {
                    this.Manager.Comment("reaching state \'S1368\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Comment("reaching state \'S1369\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1370\'");
                    int temp66 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker14)));
                    if ((temp66 == 0)) {
                        this.Manager.Comment("reaching state \'S1371\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                        this.Manager.Comment("reaching state \'S1372\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1373\'");
                        int temp65 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker9)));
                        if ((temp65 == 0)) {
                            this.Manager.Comment("reaching state \'S1374\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                            this.Manager.Comment("reaching state \'S1375\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S1376\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker4))) != -1)) {
                                this.Manager.Comment("reaching state \'S1377\'");
                                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                        "1, and not reply.\"");
                                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                                this.Manager.Comment("reaching state \'S1378\'");
                                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                this.Manager.Comment("reaching state \'S1379\'");
                                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                                this.INegotiateAdapterInstance.ExpectDisconnect();
                                this.Manager.Comment("reaching state \'S1380\'");
                                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                                this.Manager.Comment("reaching state \'S1381\'");
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker4)));
                            }
                            goto label51;
                        }
                        if ((temp65 == 1)) {
                            NegotiateTestCaseS1382();
                            goto label51;
                        }
                        if ((temp65 == 2)) {
                            NegotiateTestCaseS1382();
                            goto label51;
                        }
                        if ((temp65 == 3)) {
                            NegotiateTestCaseS1382();
                            goto label51;
                        }
                        if ((temp65 == 4)) {
                            NegotiateTestCaseS1382();
                            goto label51;
                        }
                        if ((temp65 == 5)) {
                            NegotiateTestCaseS1382();
                            goto label51;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker9)));
                    label51:
;
                        goto label52;
                    }
                    if ((temp66 == 1)) {
                        NegotiateTestCaseS1382();
                        goto label52;
                    }
                    if ((temp66 == 2)) {
                        NegotiateTestCaseS1382();
                        goto label52;
                    }
                    if ((temp66 == 3)) {
                        NegotiateTestCaseS1382();
                        goto label52;
                    }
                    if ((temp66 == 4)) {
                        NegotiateTestCaseS1382();
                        goto label52;
                    }
                    if ((temp66 == 5)) {
                        NegotiateTestCaseS1382();
                        goto label52;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker14)));
                label52:
;
                    goto label53;
                }
                if ((temp67 == 1)) {
                    NegotiateTestCaseS1382();
                    goto label53;
                }
                if ((temp67 == 2)) {
                    NegotiateTestCaseS1382();
                    goto label53;
                }
                if ((temp67 == 3)) {
                    NegotiateTestCaseS1382();
                    goto label53;
                }
                if ((temp67 == 4)) {
                    NegotiateTestCaseS1382();
                    goto label53;
                }
                if ((temp67 == 5)) {
                    NegotiateTestCaseS1382();
                    goto label53;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker19)));
            label53:
;
                goto label54;
            }
            if ((temp68 == 1)) {
                NegotiateTestCaseS1382();
                goto label54;
            }
            if ((temp68 == 2)) {
                NegotiateTestCaseS1382();
                goto label54;
            }
            if ((temp68 == 3)) {
                NegotiateTestCaseS1382();
                goto label54;
            }
            if ((temp68 == 4)) {
                NegotiateTestCaseS1382();
                goto label54;
            }
            if ((temp68 == 5)) {
                this.Manager.Comment("reaching state \'S1387\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1388\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1389\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker25))) != -1)) {
                    this.Manager.Comment("reaching state \'S1390\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1391\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1392\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1393\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1394\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker25)));
                }
                goto label54;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1358NegotiateResponseChecker24)));
        label54:
;
        }
        
        private void NegotiateTestCaseS1358NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1364");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1367");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1367");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1376");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1376");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1382() {
            this.Manager.Comment("reaching state \'S1382\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 2.002",
                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
            this.Manager.Comment("reaching state \'S1383\'");
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
            this.Manager.Comment("reaching state \'S1384\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S1385\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S1386\'");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1367");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1367");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1367");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1367");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1367");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1367");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1367");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1367");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1367");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1367");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1364");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1364");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1364");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1364");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1364");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1389");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1389");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1358ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1359");
        }
        
        private void NegotiateTestCaseS1358NegotiateResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1399");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1399");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1358ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1359");
        }
        
        private void NegotiateTestCaseS1358ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1359");
        }
        #endregion
        
        #region Test Starting in S1405
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1405() {
            this.Manager.BeginTest("NegotiateTestCaseS1405");
            this.Manager.Comment("reaching state \'S1405\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp70;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp70);
            this.Manager.AddReturn(ReadConfigInfo, null, temp70);
            this.Manager.Comment("reaching state \'S1406\'");
            int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1405ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1405ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1405ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1405ReadConfigChecker3)));
            if ((temp75 == 0)) {
                this.Manager.Comment("reaching state \'S1407\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1408\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1409\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS1410();
                goto label60;
            }
            if ((temp75 == 1)) {
                this.Manager.Comment("reaching state \'S1427\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1428\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1429\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1430\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1431\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker24))) != -1)) {
                    this.Manager.Comment("reaching state \'S1432\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1433\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1434\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1435\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1436\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker24)));
                }
                goto label60;
            }
            if ((temp75 == 2)) {
                NegotiateTestCaseS183();
                goto label60;
            }
            if ((temp75 == 3)) {
                NegotiateTestCaseS189();
                goto label60;
            }
            throw new InvalidOperationException("never reached");
        label60:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1405ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1406");
        }
        
        private void NegotiateTestCaseS1410() {
            this.Manager.Comment("reaching state \'S1410\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS1405NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S1411\'");
            int temp74 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker23)));
            if ((temp74 == 0)) {
                this.Manager.Comment("reaching state \'S1412\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1413\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1414\'");
                int temp73 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker18)));
                if ((temp73 == 0)) {
                    this.Manager.Comment("reaching state \'S1415\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S1416\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1417\'");
                    int temp72 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker13)));
                    if ((temp72 == 0)) {
                        this.Manager.Comment("reaching state \'S1418\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S1419\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1420\'");
                        int temp71 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker8)));
                        if ((temp71 == 0)) {
                            NegotiateTestCaseS1421();
                            goto label56;
                        }
                        if ((temp71 == 1)) {
                            NegotiateTestCaseS1422();
                            goto label56;
                        }
                        if ((temp71 == 2)) {
                            NegotiateTestCaseS1422();
                            goto label56;
                        }
                        if ((temp71 == 3)) {
                            NegotiateTestCaseS1422();
                            goto label56;
                        }
                        if ((temp71 == 4)) {
                            NegotiateTestCaseS1422();
                            goto label56;
                        }
                        if ((temp71 == 5)) {
                            NegotiateTestCaseS1422();
                            goto label56;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker8)));
                    label56:
;
                        goto label57;
                    }
                    if ((temp72 == 1)) {
                        NegotiateTestCaseS1422();
                        goto label57;
                    }
                    if ((temp72 == 2)) {
                        NegotiateTestCaseS1422();
                        goto label57;
                    }
                    if ((temp72 == 3)) {
                        NegotiateTestCaseS1422();
                        goto label57;
                    }
                    if ((temp72 == 4)) {
                        NegotiateTestCaseS1422();
                        goto label57;
                    }
                    if ((temp72 == 5)) {
                        NegotiateTestCaseS1422();
                        goto label57;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker13)));
                label57:
;
                    goto label58;
                }
                if ((temp73 == 1)) {
                    NegotiateTestCaseS1422();
                    goto label58;
                }
                if ((temp73 == 2)) {
                    NegotiateTestCaseS1422();
                    goto label58;
                }
                if ((temp73 == 3)) {
                    NegotiateTestCaseS1422();
                    goto label58;
                }
                if ((temp73 == 4)) {
                    NegotiateTestCaseS1422();
                    goto label58;
                }
                if ((temp73 == 5)) {
                    NegotiateTestCaseS1422();
                    goto label58;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker18)));
            label58:
;
                goto label59;
            }
            if ((temp74 == 1)) {
                NegotiateTestCaseS1421();
                goto label59;
            }
            if ((temp74 == 2)) {
                NegotiateTestCaseS1422();
                goto label59;
            }
            if ((temp74 == 3)) {
                NegotiateTestCaseS1422();
                goto label59;
            }
            if ((temp74 == 4)) {
                NegotiateTestCaseS1422();
                goto label59;
            }
            if ((temp74 == 5)) {
                NegotiateTestCaseS1422();
                goto label59;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1405NegotiateResponseChecker23)));
        label59:
;
        }
        
        private void NegotiateTestCaseS1405NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1414");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1414");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1421() {
            this.Manager.Comment("reaching state \'S1421\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
            this.Manager.AddReturn(NegotiateRequestInfo, null);
            NegotiateTestCaseS1363();
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1422() {
            this.Manager.Comment("reaching state \'S1422\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 2.???",
                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
            this.Manager.Comment("reaching state \'S1423\'");
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
            this.Manager.Comment("reaching state \'S1424\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S1425\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S1426\'");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1414");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1414");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1414");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1414");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1414");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1414");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1414");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1414");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1414");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1414");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1405ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1406");
        }
        
        private void NegotiateTestCaseS1405NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1431");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1431");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1405ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1406");
        }
        
        private void NegotiateTestCaseS1405ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1406");
        }
        #endregion
        
        #region Test Starting in S1437
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1437() {
            this.Manager.BeginTest("NegotiateTestCaseS1437");
            this.Manager.Comment("reaching state \'S1437\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp76;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp76);
            this.Manager.AddReturn(ReadConfigInfo, null, temp76);
            this.Manager.Comment("reaching state \'S1438\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1437ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1437ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1437ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1437ReadConfigChecker3)));
            if ((temp77 == 0)) {
                this.Manager.Comment("reaching state \'S1439\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1440\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1441\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S1442\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1443\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1437NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1444\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1445\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1446\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1447\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1448\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1437NegotiateResponseChecker)));
                }
                goto label61;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S1449\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1450\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1451\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS1205();
                goto label61;
            }
            if ((temp77 == 2)) {
                NegotiateTestCaseS183();
                goto label61;
            }
            if ((temp77 == 3)) {
                NegotiateTestCaseS189();
                goto label61;
            }
            throw new InvalidOperationException("never reached");
        label61:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1437ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1438");
        }
        
        private void NegotiateTestCaseS1437NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1443");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1443");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1437ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1438");
        }
        
        private void NegotiateTestCaseS1437ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1438");
        }
        
        private void NegotiateTestCaseS1437ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1438");
        }
        #endregion
        
        #region Test Starting in S1452
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1452() {
            this.Manager.BeginTest("NegotiateTestCaseS1452");
            this.Manager.Comment("reaching state \'S1452\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp78;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp78);
            this.Manager.AddReturn(ReadConfigInfo, null, temp78);
            this.Manager.Comment("reaching state \'S1453\'");
            int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1452ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1452ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1452ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1452ReadConfigChecker3)));
            if ((temp82 == 0)) {
                this.Manager.Comment("reaching state \'S1454\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1455\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1456\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1457\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1458\'");
                int temp81 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker12)));
                if ((temp81 == 0)) {
                    this.Manager.Comment("reaching state \'S1459\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S1460\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1461\'");
                    int temp79 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker7)));
                    if ((temp79 == 0)) {
                        this.Manager.Comment("reaching state \'S1462\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S1463\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1464\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S1465\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                            "Head",
                                                                                            "Tail"}, new object[] {
                                                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                    "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                    "1, and not reply.\"");
                            this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                            this.Manager.Comment("reaching state \'S1466\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S1467\'");
                            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                            this.INegotiateAdapterInstance.ExpectDisconnect();
                            this.Manager.Comment("reaching state \'S1468\'");
                            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                            this.Manager.Comment("reaching state \'S1469\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker2)));
                        }
                        goto label62;
                    }
                    if ((temp79 == 1)) {
                        NegotiateTestCaseS1470();
                        goto label62;
                    }
                    if ((temp79 == 2)) {
                        NegotiateTestCaseS1470();
                        goto label62;
                    }
                    if ((temp79 == 3)) {
                        NegotiateTestCaseS1470();
                        goto label62;
                    }
                    if ((temp79 == 4)) {
                        NegotiateTestCaseS1470();
                        goto label62;
                    }
                    if ((temp79 == 5)) {
                        NegotiateTestCaseS1470();
                        goto label62;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker7)));
                label62:
;
                    goto label64;
                }
                if ((temp81 == 1)) {
                    NegotiateTestCaseS1470();
                    goto label64;
                }
                if ((temp81 == 2)) {
                    NegotiateTestCaseS1470();
                    goto label64;
                }
                if ((temp81 == 3)) {
                    this.Manager.Comment("reaching state \'S1471\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                    this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                    NegotiateTestCaseS1329();
                    goto label64;
                }
                if ((temp81 == 4)) {
                    this.Manager.Comment("reaching state \'S1472\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "SMB 2.???",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                    this.Manager.Comment("reaching state \'S1473\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1474\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1475\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1476\'");
                    goto label64;
                }
                if ((temp81 == 5)) {
                    this.Manager.Comment("reaching state \'S1477\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S1478\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1479\'");
                    int temp80 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker18)));
                    if ((temp80 == 0)) {
                        NegotiateTestCaseS1470();
                        goto label63;
                    }
                    if ((temp80 == 1)) {
                        NegotiateTestCaseS1470();
                        goto label63;
                    }
                    if ((temp80 == 2)) {
                        NegotiateTestCaseS1470();
                        goto label63;
                    }
                    if ((temp80 == 3)) {
                        NegotiateTestCaseS1470();
                        goto label63;
                    }
                    if ((temp80 == 4)) {
                        NegotiateTestCaseS1470();
                        goto label63;
                    }
                    if ((temp80 == 5)) {
                        this.Manager.Comment("reaching state \'S1480\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                "Head",
                                                                "Tail"}, new object[] {
                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                            "Head",
                                                                            "Tail"}, new object[] {
                                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                        this.Manager.Comment("reaching state \'S1481\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1482\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker19))) != -1)) {
                            this.Manager.Comment("reaching state \'S1483\'");
                            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 1.002",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                            this.Manager.Comment("reaching state \'S1484\'");
                            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S1485\'");
                            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                            this.INegotiateAdapterInstance.ExpectDisconnect();
                            this.Manager.Comment("reaching state \'S1486\'");
                            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                            this.Manager.Comment("reaching state \'S1487\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker19)));
                        }
                        goto label63;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker18)));
                label63:
;
                    goto label64;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker12)));
            label64:
;
                goto label65;
            }
            if ((temp82 == 1)) {
                this.Manager.Comment("reaching state \'S1488\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1489\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1490\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S1491\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1492\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker20))) != -1)) {
                    this.Manager.Comment("reaching state \'S1493\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1494\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1495\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1496\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1497\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1452NegotiateResponseChecker20)));
                }
                goto label65;
            }
            if ((temp82 == 2)) {
                NegotiateTestCaseS183();
                goto label65;
            }
            if ((temp82 == 3)) {
                NegotiateTestCaseS189();
                goto label65;
            }
            throw new InvalidOperationException("never reached");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1452ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1453");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1458");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1458");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1470() {
            this.Manager.Comment("reaching state \'S1470\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.AddReturn(NegotiateRequestInfo, null);
            NegotiateTestCaseS1410();
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1458");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1458");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1458");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1458");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1458");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1458");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1458");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1458");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1458");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1458");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1482");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1482");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1452ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1453");
        }
        
        private void NegotiateTestCaseS1452NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1492");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1492");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1452ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1453");
        }
        
        private void NegotiateTestCaseS1452ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1453");
        }
        #endregion
        
        #region Test Starting in S1498
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1498() {
            this.Manager.BeginTest("NegotiateTestCaseS1498");
            this.Manager.Comment("reaching state \'S1498\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp83;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp83);
            this.Manager.AddReturn(ReadConfigInfo, null, temp83);
            this.Manager.Comment("reaching state \'S1499\'");
            int temp85 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1498ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1498ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1498ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1498ReadConfigChecker3)));
            if ((temp85 == 0)) {
                this.Manager.Comment("reaching state \'S1500\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1501\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1502\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1503\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1504\'");
                int temp84 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker8)));
                if ((temp84 == 0)) {
                    NegotiateTestCaseS1470();
                    goto label66;
                }
                if ((temp84 == 1)) {
                    this.Manager.Comment("reaching state \'S1505\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S1506\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1507\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker2))) != -1)) {
                        this.Manager.Comment("reaching state \'S1508\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                "1, and not reply.\"");
                        this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                        this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                        this.Manager.Comment("reaching state \'S1509\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1510\'");
                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                        this.INegotiateAdapterInstance.ExpectDisconnect();
                        this.Manager.Comment("reaching state \'S1511\'");
                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                        this.Manager.Comment("reaching state \'S1512\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker2)));
                    }
                    goto label66;
                }
                if ((temp84 == 2)) {
                    this.Manager.Comment("reaching state \'S1513\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                    NegotiateTestCaseS1253();
                    goto label66;
                }
                if ((temp84 == 3)) {
                    this.Manager.Comment("reaching state \'S1514\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S1515\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1516\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker5))) != -1)) {
                        this.Manager.Comment("reaching state \'S1517\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                "1, and not reply.\"");
                        this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                        this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                        this.Manager.Comment("reaching state \'S1518\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1519\'");
                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                        this.INegotiateAdapterInstance.ExpectDisconnect();
                        this.Manager.Comment("reaching state \'S1520\'");
                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                        this.Manager.Comment("reaching state \'S1521\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker5)));
                    }
                    goto label66;
                }
                if ((temp84 == 4)) {
                    this.Manager.Comment("reaching state \'S1522\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                    this.Manager.Comment("reaching state \'S1523\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1524\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker7))) != -1)) {
                        this.Manager.Comment("reaching state \'S1525\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                "1, and not reply.\"");
                        this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                        this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                        this.Manager.Comment("reaching state \'S1526\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1527\'");
                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                        this.INegotiateAdapterInstance.ExpectDisconnect();
                        this.Manager.Comment("reaching state \'S1528\'");
                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                        this.Manager.Comment("reaching state \'S1529\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker7)));
                    }
                    goto label66;
                }
                if ((temp84 == 5)) {
                    this.Manager.Comment("reaching state \'S1530\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                    this.Manager.Comment("reaching state \'S1531\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1532\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker9))) != -1)) {
                        this.Manager.Comment("reaching state \'S1533\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                "1, and not reply.\"");
                        this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                        this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                        this.Manager.Comment("reaching state \'S1534\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1535\'");
                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                        this.INegotiateAdapterInstance.ExpectDisconnect();
                        this.Manager.Comment("reaching state \'S1536\'");
                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                        this.Manager.Comment("reaching state \'S1537\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker9)));
                    }
                    goto label66;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1498NegotiateResponseChecker8)));
            label66:
;
                goto label67;
            }
            if ((temp85 == 1)) {
                this.Manager.Comment("reaching state \'S1538\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1539\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1540\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS1303();
                goto label67;
            }
            if ((temp85 == 2)) {
                NegotiateTestCaseS183();
                goto label67;
            }
            if ((temp85 == 3)) {
                NegotiateTestCaseS189();
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1498ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1499");
        }
        
        private void NegotiateTestCaseS1498NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1498NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1498NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1507");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1507");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1498NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1498NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1498NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1516");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1516");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1498NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1498NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1524");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1524");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1498NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1504");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1498NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1532");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1532");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1498ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1499");
        }
        
        private void NegotiateTestCaseS1498ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1499");
        }
        
        private void NegotiateTestCaseS1498ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1499");
        }
        #endregion
        
        #region Test Starting in S1541
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1541() {
            this.Manager.BeginTest("NegotiateTestCaseS1541");
            this.Manager.Comment("reaching state \'S1541\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp86;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp86);
            this.Manager.AddReturn(ReadConfigInfo, null, temp86);
            this.Manager.Comment("reaching state \'S1542\'");
            int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1541ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1541ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1541ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1541ReadConfigChecker3)));
            if ((temp101 == 0)) {
                this.Manager.Comment("reaching state \'S1543\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1544\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1545\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S1546\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1547\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1548\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S1549\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1550\'");
                    int temp100 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker85)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker86)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker87)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker88)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker89)));
                    if ((temp100 == 0)) {
                        NegotiateTestCaseS1551();
                        goto label81;
                    }
                    if ((temp100 == 1)) {
                        NegotiateTestCaseS1551();
                        goto label81;
                    }
                    if ((temp100 == 2)) {
                        NegotiateTestCaseS1554();
                        goto label81;
                    }
                    if ((temp100 == 3)) {
                        NegotiateTestCaseS1554();
                        goto label81;
                    }
                    if ((temp100 == 4)) {
                        NegotiateTestCaseS1554();
                        goto label81;
                    }
                    if ((temp100 == 5)) {
                        this.Manager.Comment("reaching state \'S1562\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                "Head",
                                                                "Tail"}, new object[] {
                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                            "Head",
                                                                            "Tail"}, new object[] {
                                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                        "Head",
                                                                                        "Tail"}, new object[] {
                                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                        this.Manager.Comment("reaching state \'S1563\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1564\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker90))) != -1)) {
                            this.Manager.Comment("reaching state \'S1565\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                            "Head",
                                                                                            "Tail"}, new object[] {
                                                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                    "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                    "1, and not reply.\"");
                            this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                            this.Manager.Comment("reaching state \'S1566\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S1567\'");
                            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                            this.INegotiateAdapterInstance.ExpectDisconnect();
                            this.Manager.Comment("reaching state \'S1568\'");
                            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                            this.Manager.Comment("reaching state \'S1569\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker90)));
                        }
                        goto label81;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker85)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker86)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker87)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker88)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker89)));
                label81:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker)));
                }
                goto label82;
            }
            if ((temp101 == 1)) {
                this.Manager.Comment("reaching state \'S1570\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1571\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1572\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1573\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1574\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker91))) != -1)) {
                    this.Manager.Comment("reaching state \'S1575\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "SMB 2.???",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                    this.Manager.Comment("reaching state \'S1576\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1577\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1578\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1579\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker91)));
                }
                goto label82;
            }
            if ((temp101 == 2)) {
                NegotiateTestCaseS189();
                goto label82;
            }
            if ((temp101 == 3)) {
                NegotiateTestCaseS217();
                goto label82;
            }
            throw new InvalidOperationException("never reached");
        label82:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1541ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1542");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1547");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1547");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1550");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1550");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1551() {
            this.Manager.Comment("reaching state \'S1551\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S1552\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S1553\'");
            int temp99 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker84)));
            if ((temp99 == 0)) {
                NegotiateTestCaseS1554();
                goto label80;
            }
            if ((temp99 == 1)) {
                NegotiateTestCaseS1554();
                goto label80;
            }
            if ((temp99 == 2)) {
                NegotiateTestCaseS1554();
                goto label80;
            }
            if ((temp99 == 3)) {
                NegotiateTestCaseS1554();
                goto label80;
            }
            if ((temp99 == 4)) {
                NegotiateTestCaseS425();
                goto label80;
            }
            if ((temp99 == 5)) {
                NegotiateTestCaseS459();
                goto label80;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker84)));
        label80:
;
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1554() {
            this.Manager.Comment("reaching state \'S1554\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
            this.Manager.Comment("reaching state \'S1555\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S1556\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S1557\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                        "1, and not reply.\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S1558\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1559\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S1560\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S1561\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker3)));
            }
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1556");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1556");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS425() {
            this.Manager.Comment("reaching state \'S425\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S426\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S427\'");
            int temp98 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker15)));
            if ((temp98 == 0)) {
                this.Manager.Comment("reaching state \'S428\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S429\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S430\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker9))) != -1)) {
                    this.Manager.Comment("reaching state \'S431\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S432\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S433\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S434\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S435\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker9)));
                }
                goto label79;
            }
            if ((temp98 == 1)) {
                this.Manager.Comment("reaching state \'S436\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S437\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S438\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker11))) != -1)) {
                    this.Manager.Comment("reaching state \'S439\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                    this.Manager.Comment("reaching state \'S440\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S441\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S442\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S443\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker11)));
                }
                goto label79;
            }
            if ((temp98 == 2)) {
                this.Manager.Comment("reaching state \'S444\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Comment("reaching state \'S445\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S446\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S447\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S448\'");
                goto label79;
            }
            if ((temp98 == 3)) {
                this.Manager.Comment("reaching state \'S449\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.???",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Comment("reaching state \'S450\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S451\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S452\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S453\'");
                goto label79;
            }
            if ((temp98 == 4)) {
                this.Manager.Comment("reaching state \'S454\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                this.Manager.Comment("reaching state \'S455\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S456\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S457\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S458\'");
                goto label79;
            }
            if ((temp98 == 5)) {
                NegotiateTestCaseS459();
                goto label79;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker15)));
        label79:
;
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S427");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S427");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S430");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S430");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S427");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S427");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S438");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S438");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S427");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S427");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S427");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S427");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S427");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S427");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S427");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S427");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS459() {
            this.Manager.Comment("reaching state \'S459\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S460\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S461\'");
            int temp97 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker79)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker80)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker81)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker82)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker83)));
            if ((temp97 == 0)) {
                this.Manager.Comment("reaching state \'S462\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S463\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S464\'");
                int temp96 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker74)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker75)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker76)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker77)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker78)));
                if ((temp96 == 0)) {
                    this.Manager.Comment("reaching state \'S465\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S466\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S467\'");
                    int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker69)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker70)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker71)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker72)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker73)));
                    if ((temp95 == 0)) {
                        this.Manager.Comment("reaching state \'S468\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S469\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S470\'");
                        int temp94 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker64)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker65)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker66)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker67)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker68)));
                        if ((temp94 == 0)) {
                            this.Manager.Comment("reaching state \'S471\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                            this.Manager.Comment("reaching state \'S472\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S473\'");
                            int temp93 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker59)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker60)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker61)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker62)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker63)));
                            if ((temp93 == 0)) {
                                this.Manager.Comment("reaching state \'S474\'");
                                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Rep"}, new object[] {
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                                this.Manager.Comment("reaching state \'S475\'");
                                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                this.Manager.Comment("reaching state \'S476\'");
                                int temp92 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker54)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker55)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker56)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker57)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker58)));
                                if ((temp92 == 0)) {
                                    this.Manager.Comment("reaching state \'S477\'");
                                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                                    this.Manager.Comment("reaching state \'S478\'");
                                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                    this.Manager.Comment("reaching state \'S479\'");
                                    int temp91 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker49)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker50)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker51)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker52)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker53)));
                                    if ((temp91 == 0)) {
                                        this.Manager.Comment("reaching state \'S480\'");
                                        this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Rep"}, new object[] {
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                                        this.Manager.Comment("reaching state \'S481\'");
                                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                        this.Manager.Comment("reaching state \'S482\'");
                                        int temp90 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker44)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker45)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker46)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker47)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker48)));
                                        if ((temp90 == 0)) {
                                            this.Manager.Comment("reaching state \'S483\'");
                                            this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Rep"}, new object[] {
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                                            this.Manager.Comment("reaching state \'S484\'");
                                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                            this.Manager.Comment("reaching state \'S485\'");
                                            int temp89 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker39)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker40)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker41)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker42)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker43)));
                                            if ((temp89 == 0)) {
                                                this.Manager.Comment("reaching state \'S486\'");
                                                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                                                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                "Rep"}, new object[] {
                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                                                this.Manager.Comment("reaching state \'S487\'");
                                                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                                this.Manager.Comment("reaching state \'S488\'");
                                                int temp88 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker27)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker35)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker36)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker37)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker38)));
                                                if ((temp88 == 0)) {
                                                    this.Manager.Comment("reaching state \'S489\'");
                                                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                                                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Rep"}, new object[] {
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                                                    this.Manager.Comment("reaching state \'S490\'");
                                                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                                    this.Manager.Comment("reaching state \'S491\'");
                                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker26))) != -1)) {
                                                        this.Manager.Comment("reaching state \'S492\'");
                                                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                                                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Rep"}, new object[] {
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                                "Head",
                                                                                                "Tail"}, new object[] {
                                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                                                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                                                "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                                                "1, and not reply.\"");
                                                        this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                                                        this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                                                        this.Manager.Comment("reaching state \'S493\'");
                                                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                                        this.Manager.Comment("reaching state \'S494\'");
                                                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                                                        this.INegotiateAdapterInstance.ExpectDisconnect();
                                                        this.Manager.Comment("reaching state \'S495\'");
                                                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                                                        this.Manager.Comment("reaching state \'S496\'");
                                                    }
                                                    else {
                                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker26)));
                                                    }
                                                    goto label69;
                                                }
                                                if ((temp88 == 1)) {
                                                    NegotiateTestCaseS497();
                                                    goto label69;
                                                }
                                                if ((temp88 == 2)) {
                                                    NegotiateTestCaseS497();
                                                    goto label69;
                                                }
                                                if ((temp88 == 3)) {
                                                    NegotiateTestCaseS497();
                                                    goto label69;
                                                }
                                                if ((temp88 == 4)) {
                                                    NegotiateTestCaseS497();
                                                    goto label69;
                                                }
                                                if ((temp88 == 5)) {
                                                    NegotiateTestCaseS497();
                                                    goto label69;
                                                }
                                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker27)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker35)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker36)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker37)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker38)));
                                            label69:
;
                                                goto label70;
                                            }
                                            if ((temp89 == 1)) {
                                                NegotiateTestCaseS497();
                                                goto label70;
                                            }
                                            if ((temp89 == 2)) {
                                                NegotiateTestCaseS497();
                                                goto label70;
                                            }
                                            if ((temp89 == 3)) {
                                                NegotiateTestCaseS497();
                                                goto label70;
                                            }
                                            if ((temp89 == 4)) {
                                                NegotiateTestCaseS497();
                                                goto label70;
                                            }
                                            if ((temp89 == 5)) {
                                                NegotiateTestCaseS497();
                                                goto label70;
                                            }
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker39)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker40)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker41)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker42)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker43)));
                                        label70:
;
                                            goto label71;
                                        }
                                        if ((temp90 == 1)) {
                                            NegotiateTestCaseS497();
                                            goto label71;
                                        }
                                        if ((temp90 == 2)) {
                                            NegotiateTestCaseS497();
                                            goto label71;
                                        }
                                        if ((temp90 == 3)) {
                                            NegotiateTestCaseS497();
                                            goto label71;
                                        }
                                        if ((temp90 == 4)) {
                                            NegotiateTestCaseS497();
                                            goto label71;
                                        }
                                        if ((temp90 == 5)) {
                                            NegotiateTestCaseS497();
                                            goto label71;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker44)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker45)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker46)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker47)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker48)));
                                    label71:
;
                                        goto label72;
                                    }
                                    if ((temp91 == 1)) {
                                        NegotiateTestCaseS497();
                                        goto label72;
                                    }
                                    if ((temp91 == 2)) {
                                        NegotiateTestCaseS497();
                                        goto label72;
                                    }
                                    if ((temp91 == 3)) {
                                        NegotiateTestCaseS497();
                                        goto label72;
                                    }
                                    if ((temp91 == 4)) {
                                        NegotiateTestCaseS497();
                                        goto label72;
                                    }
                                    if ((temp91 == 5)) {
                                        NegotiateTestCaseS497();
                                        goto label72;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker49)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker50)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker51)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker52)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker53)));
                                label72:
;
                                    goto label73;
                                }
                                if ((temp92 == 1)) {
                                    NegotiateTestCaseS497();
                                    goto label73;
                                }
                                if ((temp92 == 2)) {
                                    NegotiateTestCaseS497();
                                    goto label73;
                                }
                                if ((temp92 == 3)) {
                                    NegotiateTestCaseS497();
                                    goto label73;
                                }
                                if ((temp92 == 4)) {
                                    NegotiateTestCaseS497();
                                    goto label73;
                                }
                                if ((temp92 == 5)) {
                                    NegotiateTestCaseS500();
                                    goto label73;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker54)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker55)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker56)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker57)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker58)));
                            label73:
;
                                goto label74;
                            }
                            if ((temp93 == 1)) {
                                NegotiateTestCaseS497();
                                goto label74;
                            }
                            if ((temp93 == 2)) {
                                NegotiateTestCaseS497();
                                goto label74;
                            }
                            if ((temp93 == 3)) {
                                NegotiateTestCaseS497();
                                goto label74;
                            }
                            if ((temp93 == 4)) {
                                NegotiateTestCaseS497();
                                goto label74;
                            }
                            if ((temp93 == 5)) {
                                NegotiateTestCaseS497();
                                goto label74;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker59)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker60)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker61)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker62)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker63)));
                        label74:
;
                            goto label75;
                        }
                        if ((temp94 == 1)) {
                            NegotiateTestCaseS497();
                            goto label75;
                        }
                        if ((temp94 == 2)) {
                            NegotiateTestCaseS497();
                            goto label75;
                        }
                        if ((temp94 == 3)) {
                            NegotiateTestCaseS497();
                            goto label75;
                        }
                        if ((temp94 == 4)) {
                            NegotiateTestCaseS497();
                            goto label75;
                        }
                        if ((temp94 == 5)) {
                            NegotiateTestCaseS497();
                            goto label75;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker64)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker65)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker66)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker67)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker68)));
                    label75:
;
                        goto label76;
                    }
                    if ((temp95 == 1)) {
                        NegotiateTestCaseS497();
                        goto label76;
                    }
                    if ((temp95 == 2)) {
                        NegotiateTestCaseS497();
                        goto label76;
                    }
                    if ((temp95 == 3)) {
                        NegotiateTestCaseS497();
                        goto label76;
                    }
                    if ((temp95 == 4)) {
                        NegotiateTestCaseS497();
                        goto label76;
                    }
                    if ((temp95 == 5)) {
                        NegotiateTestCaseS497();
                        goto label76;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker69)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker70)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker71)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker72)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker73)));
                label76:
;
                    goto label77;
                }
                if ((temp96 == 1)) {
                    NegotiateTestCaseS497();
                    goto label77;
                }
                if ((temp96 == 2)) {
                    NegotiateTestCaseS497();
                    goto label77;
                }
                if ((temp96 == 3)) {
                    NegotiateTestCaseS497();
                    goto label77;
                }
                if ((temp96 == 4)) {
                    NegotiateTestCaseS497();
                    goto label77;
                }
                if ((temp96 == 5)) {
                    NegotiateTestCaseS497();
                    goto label77;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker74)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker75)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker76)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker77)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker78)));
            label77:
;
                goto label78;
            }
            if ((temp97 == 1)) {
                NegotiateTestCaseS497();
                goto label78;
            }
            if ((temp97 == 2)) {
                NegotiateTestCaseS497();
                goto label78;
            }
            if ((temp97 == 3)) {
                NegotiateTestCaseS497();
                goto label78;
            }
            if ((temp97 == 4)) {
                NegotiateTestCaseS497();
                goto label78;
            }
            if ((temp97 == 5)) {
                NegotiateTestCaseS497();
                goto label78;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker79)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker80)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker81)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker82)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker83)));
        label78:
;
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S467");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S467");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S473");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S473");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S476");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S482");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S482");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S485");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S485");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S488");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S488");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S491");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S491");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S488");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S488");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS497() {
            this.Manager.Comment("reaching state \'S497\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
            this.Manager.Comment("reaching state \'S498\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S499\'");
            int temp87 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker30)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker31)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker32)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker33)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker34)));
            if ((temp87 == 0)) {
                NegotiateTestCaseS500();
                goto label68;
            }
            if ((temp87 == 1)) {
                NegotiateTestCaseS500();
                goto label68;
            }
            if ((temp87 == 2)) {
                NegotiateTestCaseS500();
                goto label68;
            }
            if ((temp87 == 3)) {
                NegotiateTestCaseS500();
                goto label68;
            }
            if ((temp87 == 4)) {
                NegotiateTestCaseS500();
                goto label68;
            }
            if ((temp87 == 5)) {
                NegotiateTestCaseS508();
                goto label68;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker30)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker31)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker32)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker33)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker34)));
        label68:
;
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker28(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S499");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S499");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS500() {
            this.Manager.Comment("reaching state \'S500\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S501\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S502\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker29))) != -1)) {
                this.Manager.Comment("reaching state \'S503\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                        "1, and not reply.\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S504\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S505\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S506\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S507\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker29)));
            }
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker29(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S502");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S502");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker30(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S499");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S499");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker31(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S499");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S499");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker32(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S499");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S499");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker33(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S499");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S499");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker34(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S499");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S499");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS508() {
            this.Manager.Comment("reaching state \'S508\'");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker35(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S488");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S488");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker36(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S488");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S488");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker37(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S488");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S488");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker38(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S488");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S488");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker39(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S485");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S485");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker40(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S485");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S485");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker41(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S485");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S485");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker42(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S485");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S485");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker43(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S485");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S485");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker44(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S482");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S482");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker45(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S482");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S482");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker46(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S482");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S482");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker47(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S482");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S482");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker48(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S482");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S482");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker49(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker50(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker51(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker52(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker53(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S479");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S479");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker54(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S476");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker55(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S476");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker56(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S476");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker57(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S476");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker58(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S476");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker59(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S473");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S473");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker60(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S473");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S473");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker61(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S473");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S473");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker62(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S473");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S473");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker63(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S473");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S473");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker64(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker65(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker66(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker67(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker68(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S470");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S470");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker69(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S467");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S467");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker70(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S467");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S467");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker71(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S467");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S467");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker72(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S467");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S467");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker73(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S467");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S467");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker74(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker75(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker76(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker77(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker78(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S464");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S464");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker79(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker80(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker81(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker82(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker83(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker84(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1553");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1553");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker85(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1550");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1550");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker86(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1550");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1550");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker87(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1550");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1550");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker88(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1550");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1550");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker89(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1550");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1550");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker90(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1564");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1564");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1541ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1542");
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker91(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1574");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1574");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1541ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1542");
        }
        
        private void NegotiateTestCaseS1541ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1542");
        }
        
        private void NegotiateTestCaseS217() {
            this.Manager.Comment("reaching state \'S217\'");
            this.Manager.Comment("executing step \'call SetupConnection()\'");
            this.INegotiateAdapterInstance.SetupConnection();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                    " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                    "ndow size of 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
            this.Manager.Comment("reaching state \'S218\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 2.002",
                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    ".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                    "string \"SMB 2.002\".<217>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                    "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
            this.Manager.Comment("reaching state \'S220\'");
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
            this.Manager.Comment("reaching state \'S221\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker92))) != -1)) {
                this.Manager.Comment("reaching state \'S222\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1541NegotiateResponseChecker92)));
            }
        }
        
        private void NegotiateTestCaseS1541NegotiateResponseChecker92(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S158
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS158() {
            this.Manager.BeginTest("NegotiateTestCaseS158");
            this.Manager.Comment("reaching state \'S158\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp102;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp102);
            this.Manager.AddReturn(ReadConfigInfo, null, temp102);
            this.Manager.Comment("reaching state \'S159\'");
            int temp104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS158ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS158ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS158ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS158ReadConfigChecker3)));
            if ((temp104 == 0)) {
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S164\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S165\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S166\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S167\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S168\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S169\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker)));
                }
                goto label84;
            }
            if ((temp104 == 1)) {
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S174\'");
                int temp103 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker7)));
                if ((temp103 == 0)) {
                    NegotiateTestCaseS175();
                    goto label83;
                }
                if ((temp103 == 1)) {
                    NegotiateTestCaseS175();
                    goto label83;
                }
                if ((temp103 == 2)) {
                    NegotiateTestCaseS175();
                    goto label83;
                }
                if ((temp103 == 3)) {
                    NegotiateTestCaseS175();
                    goto label83;
                }
                if ((temp103 == 4)) {
                    NegotiateTestCaseS175();
                    goto label83;
                }
                if ((temp103 == 5)) {
                    NegotiateTestCaseS175();
                    goto label83;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker7)));
            label83:
;
                goto label84;
            }
            if ((temp104 == 2)) {
                NegotiateTestCaseS183();
                goto label84;
            }
            if ((temp104 == 3)) {
                NegotiateTestCaseS189();
                goto label84;
            }
            throw new InvalidOperationException("never reached");
        label84:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS158ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S159");
        }
        
        private void NegotiateTestCaseS158NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S164");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S164");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS158ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S159");
        }
        
        private void NegotiateTestCaseS158NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS175() {
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                "Head",
                                                                "Tail"}, new object[] {
                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
            this.Manager.Comment("reaching state \'S176\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S177\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                        "1, and not reply.\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S182\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS158NegotiateResponseChecker2)));
            }
        }
        
        private void NegotiateTestCaseS158NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS158NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS158NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS158NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS158NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS158NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS158ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S159");
        }
        
        private void NegotiateTestCaseS158ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S159");
        }
        #endregion
        
        #region Test Starting in S1580
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1580() {
            this.Manager.BeginTest("NegotiateTestCaseS1580");
            this.Manager.Comment("reaching state \'S1580\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp105;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp105);
            this.Manager.AddReturn(ReadConfigInfo, null, temp105);
            this.Manager.Comment("reaching state \'S1581\'");
            int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1580ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1580ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1580ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1580ReadConfigChecker3)));
            if ((temp106 == 0)) {
                this.Manager.Comment("reaching state \'S1582\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1583\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1584\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1585\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1586\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1580NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1587\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1588\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1589\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1590\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1591\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1580NegotiateResponseChecker)));
                }
                goto label85;
            }
            if ((temp106 == 1)) {
                this.Manager.Comment("reaching state \'S1592\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1593\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1594\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1595\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1596\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1580NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1597\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1598\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1599\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1600\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1601\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1580NegotiateResponseChecker1)));
                }
                goto label85;
            }
            if ((temp106 == 2)) {
                NegotiateTestCaseS189();
                goto label85;
            }
            if ((temp106 == 3)) {
                NegotiateTestCaseS217();
                goto label85;
            }
            throw new InvalidOperationException("never reached");
        label85:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1580ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1581");
        }
        
        private void NegotiateTestCaseS1580NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1586");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1586");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1580ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1581");
        }
        
        private void NegotiateTestCaseS1580NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1596");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1596");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1580ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1581");
        }
        
        private void NegotiateTestCaseS1580ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1581");
        }
        #endregion
        
        #region Test Starting in S1602
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1602() {
            this.Manager.BeginTest("NegotiateTestCaseS1602");
            this.Manager.Comment("reaching state \'S1602\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp107;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp107);
            this.Manager.AddReturn(ReadConfigInfo, null, temp107);
            this.Manager.Comment("reaching state \'S1603\'");
            int temp108 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1602ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1602ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1602ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1602ReadConfigChecker3)));
            if ((temp108 == 0)) {
                this.Manager.Comment("reaching state \'S1604\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1605\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1606\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1607\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1608\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1602NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1609\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1610\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1611\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1612\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1613\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1602NegotiateResponseChecker)));
                }
                goto label86;
            }
            if ((temp108 == 1)) {
                NegotiateTestCaseS189();
                goto label86;
            }
            if ((temp108 == 2)) {
                NegotiateTestCaseS217();
                goto label86;
            }
            if ((temp108 == 3)) {
                NegotiateTestCaseS790();
                goto label86;
            }
            throw new InvalidOperationException("never reached");
        label86:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1602ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1603");
        }
        
        private void NegotiateTestCaseS1602NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1608");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1608");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1602ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1603");
        }
        
        private void NegotiateTestCaseS1602ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1603");
        }
        
        private void NegotiateTestCaseS1602ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1603");
        }
        
        private void NegotiateTestCaseS790() {
            this.Manager.Comment("reaching state \'S790\'");
            this.Manager.Comment("executing step \'call SetupConnection()\'");
            this.INegotiateAdapterInstance.SetupConnection();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                    " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                    "ndow size of 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
            this.Manager.Comment("reaching state \'S791\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S792\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 2.???",
                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4\"");
            this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
            this.Manager.Comment("reaching state \'S793\'");
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
            this.Manager.Comment("reaching state \'S794\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1602NegotiateResponseChecker1))) != -1)) {
                NegotiateTestCaseS508();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1602NegotiateResponseChecker1)));
            }
        }
        
        private void NegotiateTestCaseS1602NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S794");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S1614
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1614() {
            this.Manager.BeginTest("NegotiateTestCaseS1614");
            this.Manager.Comment("reaching state \'S1614\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp109;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp109);
            this.Manager.AddReturn(ReadConfigInfo, null, temp109);
            this.Manager.Comment("reaching state \'S1615\'");
            int temp110 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1614ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1614ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1614ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1614ReadConfigChecker3)));
            if ((temp110 == 0)) {
                this.Manager.Comment("reaching state \'S1616\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1617\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1618\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1619\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1620\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1614NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1621\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1622\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1623\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1624\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1625\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1614NegotiateResponseChecker)));
                }
                goto label87;
            }
            if ((temp110 == 1)) {
                NegotiateTestCaseS189();
                goto label87;
            }
            if ((temp110 == 2)) {
                NegotiateTestCaseS217();
                goto label87;
            }
            if ((temp110 == 3)) {
                NegotiateTestCaseS790();
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1614ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1615");
        }
        
        private void NegotiateTestCaseS1614NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1620");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1620");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1614ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1615");
        }
        
        private void NegotiateTestCaseS1614ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1615");
        }
        
        private void NegotiateTestCaseS1614ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1615");
        }
        #endregion
        
        #region Test Starting in S1626
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1626() {
            this.Manager.BeginTest("NegotiateTestCaseS1626");
            this.Manager.Comment("reaching state \'S1626\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp111;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp111);
            this.Manager.AddReturn(ReadConfigInfo, null, temp111);
            this.Manager.Comment("reaching state \'S1627\'");
            int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1626ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1626ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1626ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1626ReadConfigChecker3)));
            if ((temp112 == 0)) {
                this.Manager.Comment("reaching state \'S1628\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1629\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1630\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1631\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1632\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1626NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1633\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                    this.Manager.Comment("reaching state \'S1634\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1635\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1636\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1637\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1626NegotiateResponseChecker)));
                }
                goto label88;
            }
            if ((temp112 == 1)) {
                NegotiateTestCaseS189();
                goto label88;
            }
            if ((temp112 == 2)) {
                NegotiateTestCaseS217();
                goto label88;
            }
            if ((temp112 == 3)) {
                NegotiateTestCaseS790();
                goto label88;
            }
            throw new InvalidOperationException("never reached");
        label88:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1626ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1627");
        }
        
        private void NegotiateTestCaseS1626NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1632");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1632");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1626ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1627");
        }
        
        private void NegotiateTestCaseS1626ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1627");
        }
        
        private void NegotiateTestCaseS1626ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1627");
        }
        #endregion
        
        #region Test Starting in S1638
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1638() {
            this.Manager.BeginTest("NegotiateTestCaseS1638");
            this.Manager.Comment("reaching state \'S1638\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp113;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp113);
            this.Manager.AddReturn(ReadConfigInfo, null, temp113);
            this.Manager.Comment("reaching state \'S1639\'");
            int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1638ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1638ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1638ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1638ReadConfigChecker3)));
            if ((temp114 == 0)) {
                this.Manager.Comment("reaching state \'S1640\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1641\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1642\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1643\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1644\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1638NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1645\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb302\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1646\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1647\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1648\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1649\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1638NegotiateResponseChecker)));
                }
                goto label89;
            }
            if ((temp114 == 1)) {
                NegotiateTestCaseS189();
                goto label89;
            }
            if ((temp114 == 2)) {
                NegotiateTestCaseS217();
                goto label89;
            }
            if ((temp114 == 3)) {
                NegotiateTestCaseS790();
                goto label89;
            }
            throw new InvalidOperationException("never reached");
        label89:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1638ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1639");
        }
        
        private void NegotiateTestCaseS1638NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1644");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1644");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1638ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1639");
        }
        
        private void NegotiateTestCaseS1638ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1639");
        }
        
        private void NegotiateTestCaseS1638ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1639");
        }
        #endregion
        
        #region Test Starting in S1650
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1650() {
            this.Manager.BeginTest("NegotiateTestCaseS1650");
            this.Manager.Comment("reaching state \'S1650\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp115;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp115);
            this.Manager.AddReturn(ReadConfigInfo, null, temp115);
            this.Manager.Comment("reaching state \'S1651\'");
            int temp116 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1650ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1650ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1650ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1650ReadConfigChecker3)));
            if ((temp116 == 0)) {
                this.Manager.Comment("reaching state \'S1652\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1653\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1654\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1655\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1656\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1650NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1657\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb302\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1658\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1659\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1660\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1661\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1650NegotiateResponseChecker)));
                }
                goto label90;
            }
            if ((temp116 == 1)) {
                NegotiateTestCaseS189();
                goto label90;
            }
            if ((temp116 == 2)) {
                NegotiateTestCaseS217();
                goto label90;
            }
            if ((temp116 == 3)) {
                NegotiateTestCaseS790();
                goto label90;
            }
            throw new InvalidOperationException("never reached");
        label90:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1650ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1651");
        }
        
        private void NegotiateTestCaseS1650NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1656");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1656");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1650ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1651");
        }
        
        private void NegotiateTestCaseS1650ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1651");
        }
        
        private void NegotiateTestCaseS1650ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1651");
        }
        #endregion
        
        #region Test Starting in S1662
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1662() {
            this.Manager.BeginTest("NegotiateTestCaseS1662");
            this.Manager.Comment("reaching state \'S1662\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp117;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp117);
            this.Manager.AddReturn(ReadConfigInfo, null, temp117);
            this.Manager.Comment("reaching state \'S1663\'");
            int temp118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1662ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1662ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1662ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1662ReadConfigChecker3)));
            if ((temp118 == 0)) {
                this.Manager.Comment("reaching state \'S1664\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1665\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1666\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1667\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1668\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1662NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1669\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb302\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1670\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1671\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1672\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1673\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1662NegotiateResponseChecker)));
                }
                goto label91;
            }
            if ((temp118 == 1)) {
                NegotiateTestCaseS189();
                goto label91;
            }
            if ((temp118 == 2)) {
                NegotiateTestCaseS217();
                goto label91;
            }
            if ((temp118 == 3)) {
                NegotiateTestCaseS790();
                goto label91;
            }
            throw new InvalidOperationException("never reached");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1662ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1663");
        }
        
        private void NegotiateTestCaseS1662NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1668");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1668");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1662ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1663");
        }
        
        private void NegotiateTestCaseS1662ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1663");
        }
        
        private void NegotiateTestCaseS1662ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1663");
        }
        #endregion
        
        #region Test Starting in S1674
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1674() {
            this.Manager.BeginTest("NegotiateTestCaseS1674");
            this.Manager.Comment("reaching state \'S1674\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp119;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp119);
            this.Manager.AddReturn(ReadConfigInfo, null, temp119);
            this.Manager.Comment("reaching state \'S1675\'");
            int temp120 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1674ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1674ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1674ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1674ReadConfigChecker3)));
            if ((temp120 == 0)) {
                this.Manager.Comment("reaching state \'S1676\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1677\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1678\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1679\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1680\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1674NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1681\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb302\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1682\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1683\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1684\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1685\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1674NegotiateResponseChecker)));
                }
                goto label92;
            }
            if ((temp120 == 1)) {
                NegotiateTestCaseS189();
                goto label92;
            }
            if ((temp120 == 2)) {
                NegotiateTestCaseS217();
                goto label92;
            }
            if ((temp120 == 3)) {
                NegotiateTestCaseS790();
                goto label92;
            }
            throw new InvalidOperationException("never reached");
        label92:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1674ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1675");
        }
        
        private void NegotiateTestCaseS1674NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1680");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1680");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1674ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1675");
        }
        
        private void NegotiateTestCaseS1674ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1675");
        }
        
        private void NegotiateTestCaseS1674ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1675");
        }
        #endregion
        
        #region Test Starting in S1686
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1686() {
            this.Manager.BeginTest("NegotiateTestCaseS1686");
            this.Manager.Comment("reaching state \'S1686\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp121;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp121);
            this.Manager.AddReturn(ReadConfigInfo, null, temp121);
            this.Manager.Comment("reaching state \'S1687\'");
            int temp122 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1686ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1686ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1686ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1686ReadConfigChecker3)));
            if ((temp122 == 0)) {
                this.Manager.Comment("reaching state \'S1688\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1689\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1690\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                this.Manager.Comment("reaching state \'S1691\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1692\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1686NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1693\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb302\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1694\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1695\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1696\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1697\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1686NegotiateResponseChecker)));
                }
                goto label93;
            }
            if ((temp122 == 1)) {
                NegotiateTestCaseS189();
                goto label93;
            }
            if ((temp122 == 2)) {
                NegotiateTestCaseS217();
                goto label93;
            }
            if ((temp122 == 3)) {
                NegotiateTestCaseS790();
                goto label93;
            }
            throw new InvalidOperationException("never reached");
        label93:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1686ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1687");
        }
        
        private void NegotiateTestCaseS1686NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1692");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1692");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1686ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1687");
        }
        
        private void NegotiateTestCaseS1686ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1687");
        }
        
        private void NegotiateTestCaseS1686ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1687");
        }
        #endregion
        
        #region Test Starting in S1698
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1698() {
            this.Manager.BeginTest("NegotiateTestCaseS1698");
            this.Manager.Comment("reaching state \'S1698\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp123;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp123);
            this.Manager.AddReturn(ReadConfigInfo, null, temp123);
            this.Manager.Comment("reaching state \'S1699\'");
            int temp128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1698ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1698ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1698ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1698ReadConfigChecker3)));
            if ((temp128 == 0)) {
                this.Manager.Comment("reaching state \'S1700\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1701\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1702\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S1703\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1704\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker))) != -1)) {
                    NegotiateTestCaseS1705();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker)));
                }
                goto label98;
            }
            if ((temp128 == 1)) {
                NegotiateTestCaseS189();
                goto label98;
            }
            if ((temp128 == 2)) {
                NegotiateTestCaseS217();
                goto label98;
            }
            if ((temp128 == 3)) {
                NegotiateTestCaseS790();
                goto label98;
            }
            throw new InvalidOperationException("never reached");
        label98:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1698ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1699");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1704");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1704");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1705() {
            this.Manager.Comment("reaching state \'S1705\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
            this.Manager.Comment("reaching state \'S1706\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S1707\'");
            int temp127 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker26)));
            if ((temp127 == 0)) {
                this.Manager.Comment("reaching state \'S1708\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                this.Manager.Comment("reaching state \'S1709\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1710\'");
                int temp126 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker21)));
                if ((temp126 == 0)) {
                    this.Manager.Comment("reaching state \'S1711\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Comment("reaching state \'S1712\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1713\'");
                    int temp125 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker16)));
                    if ((temp125 == 0)) {
                        this.Manager.Comment("reaching state \'S1714\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                        this.Manager.Comment("reaching state \'S1715\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1716\'");
                        int temp124 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker11)));
                        if ((temp124 == 0)) {
                            this.Manager.Comment("reaching state \'S1717\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                            this.Manager.Comment("reaching state \'S1718\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S1719\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker5))) != -1)) {
                                this.Manager.Comment("reaching state \'S1720\'");
                                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                        "1, and not reply.\"");
                                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                                this.Manager.Comment("reaching state \'S1721\'");
                                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                this.Manager.Comment("reaching state \'S1722\'");
                                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                                this.INegotiateAdapterInstance.ExpectDisconnect();
                                this.Manager.Comment("reaching state \'S1723\'");
                                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                                this.Manager.Comment("reaching state \'S1724\'");
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker5)));
                            }
                            goto label94;
                        }
                        if ((temp124 == 1)) {
                            NegotiateTestCaseS1725();
                            goto label94;
                        }
                        if ((temp124 == 2)) {
                            NegotiateTestCaseS1725();
                            goto label94;
                        }
                        if ((temp124 == 3)) {
                            NegotiateTestCaseS1725();
                            goto label94;
                        }
                        if ((temp124 == 4)) {
                            NegotiateTestCaseS1725();
                            goto label94;
                        }
                        if ((temp124 == 5)) {
                            NegotiateTestCaseS1725();
                            goto label94;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker11)));
                    label94:
;
                        goto label95;
                    }
                    if ((temp125 == 1)) {
                        NegotiateTestCaseS1725();
                        goto label95;
                    }
                    if ((temp125 == 2)) {
                        NegotiateTestCaseS1725();
                        goto label95;
                    }
                    if ((temp125 == 3)) {
                        NegotiateTestCaseS1725();
                        goto label95;
                    }
                    if ((temp125 == 4)) {
                        NegotiateTestCaseS1725();
                        goto label95;
                    }
                    if ((temp125 == 5)) {
                        NegotiateTestCaseS1725();
                        goto label95;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker16)));
                label95:
;
                    goto label96;
                }
                if ((temp126 == 1)) {
                    NegotiateTestCaseS1725();
                    goto label96;
                }
                if ((temp126 == 2)) {
                    NegotiateTestCaseS1725();
                    goto label96;
                }
                if ((temp126 == 3)) {
                    NegotiateTestCaseS1725();
                    goto label96;
                }
                if ((temp126 == 4)) {
                    NegotiateTestCaseS1725();
                    goto label96;
                }
                if ((temp126 == 5)) {
                    NegotiateTestCaseS1725();
                    goto label96;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker21)));
            label96:
;
                goto label97;
            }
            if ((temp127 == 1)) {
                NegotiateTestCaseS1725();
                goto label97;
            }
            if ((temp127 == 2)) {
                NegotiateTestCaseS1725();
                goto label97;
            }
            if ((temp127 == 3)) {
                NegotiateTestCaseS1725();
                goto label97;
            }
            if ((temp127 == 4)) {
                NegotiateTestCaseS1725();
                goto label97;
            }
            if ((temp127 == 5)) {
                this.Manager.Comment("reaching state \'S1733\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1734\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1735\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker27))) != -1)) {
                    this.Manager.Comment("reaching state \'S1736\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "SMB 2.???",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                    this.Manager.Comment("reaching state \'S1737\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1738\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1739\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1740\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker27)));
                }
                goto label97;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker26)));
        label97:
;
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1719");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1719");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1725() {
            this.Manager.Comment("reaching state \'S1725\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S1726\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S1727\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker7))) != -1)) {
                this.Manager.Comment("reaching state \'S1728\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                this.Manager.Comment("reaching state \'S1729\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1730\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S1731\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S1732\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1698NegotiateResponseChecker7)));
            }
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1727");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1727");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1716");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1716");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1713");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S1707");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1698NegotiateResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1735");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1735");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1698ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1699");
        }
        
        private void NegotiateTestCaseS1698ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1699");
        }
        
        private void NegotiateTestCaseS1698ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1699");
        }
        #endregion
        
        #region Test Starting in S1741
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1741() {
            this.Manager.BeginTest("NegotiateTestCaseS1741");
            this.Manager.Comment("reaching state \'S1741\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp129;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp129);
            this.Manager.AddReturn(ReadConfigInfo, null, temp129);
            this.Manager.Comment("reaching state \'S1742\'");
            int temp130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1741ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1741ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1741ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1741ReadConfigChecker3)));
            if ((temp130 == 0)) {
                this.Manager.Comment("reaching state \'S1743\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1744\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1745\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S1746\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1747\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1741NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1748\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1749\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1750\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1751\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1752\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1741NegotiateResponseChecker)));
                }
                goto label99;
            }
            if ((temp130 == 1)) {
                NegotiateTestCaseS189();
                goto label99;
            }
            if ((temp130 == 2)) {
                NegotiateTestCaseS217();
                goto label99;
            }
            if ((temp130 == 3)) {
                NegotiateTestCaseS790();
                goto label99;
            }
            throw new InvalidOperationException("never reached");
        label99:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1741ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1742");
        }
        
        private void NegotiateTestCaseS1741NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1747");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1747");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1741ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1742");
        }
        
        private void NegotiateTestCaseS1741ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1742");
        }
        
        private void NegotiateTestCaseS1741ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1742");
        }
        #endregion
        
        #region Test Starting in S1753
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1753() {
            this.Manager.BeginTest("NegotiateTestCaseS1753");
            this.Manager.Comment("reaching state \'S1753\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp131;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp131);
            this.Manager.AddReturn(ReadConfigInfo, null, temp131);
            this.Manager.Comment("reaching state \'S1754\'");
            int temp136 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1753ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1753ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1753ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1753ReadConfigChecker3)));
            if ((temp136 == 0)) {
                this.Manager.Comment("reaching state \'S1755\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1756\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1757\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S1758\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1759\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1760\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S1761\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1762\'");
                    int temp135 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker13)));
                    if ((temp135 == 0)) {
                        this.Manager.Comment("reaching state \'S1763\'");
                        this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                        this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    "SMB 1.002",
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                        this.Manager.Comment("reaching state \'S1764\'");
                        this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1765\'");
                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                        this.INegotiateAdapterInstance.ExpectDisconnect();
                        this.Manager.Comment("reaching state \'S1766\'");
                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                        this.Manager.Comment("reaching state \'S1767\'");
                        goto label103;
                    }
                    if ((temp135 == 1)) {
                        this.Manager.Comment("reaching state \'S1768\'");
                        this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                        this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                        "Rep"}, new object[] {
                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                        this.Manager.Comment("reaching state \'S1769\'");
                        this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1770\'");
                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                        this.INegotiateAdapterInstance.ExpectDisconnect();
                        this.Manager.Comment("reaching state \'S1771\'");
                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                        this.Manager.Comment("reaching state \'S1772\'");
                        goto label103;
                    }
                    if ((temp135 == 2)) {
                        this.Manager.Comment("reaching state \'S1773\'");
                        this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                        this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    "SMB 2.002",
                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                                "Head",
                                                                "Tail"}, new object[] {
                                                                "SMB 2.???",
                                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                        this.Manager.Comment("reaching state \'S1774\'");
                        this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1775\'");
                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                        this.INegotiateAdapterInstance.ExpectDisconnect();
                        this.Manager.Comment("reaching state \'S1776\'");
                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                        this.Manager.Comment("reaching state \'S1777\'");
                        goto label103;
                    }
                    if ((temp135 == 3)) {
                        this.Manager.Comment("reaching state \'S1778\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S1779\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S1780\'");
                        int temp132 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker11)));
                        if ((temp132 == 0)) {
                            NegotiateTestCaseS1705();
                            goto label100;
                        }
                        if ((temp132 == 1)) {
                            NegotiateTestCaseS1781();
                            goto label100;
                        }
                        if ((temp132 == 2)) {
                            NegotiateTestCaseS1781();
                            goto label100;
                        }
                        if ((temp132 == 3)) {
                            NegotiateTestCaseS1781();
                            goto label100;
                        }
                        if ((temp132 == 4)) {
                            NegotiateTestCaseS1781();
                            goto label100;
                        }
                        if ((temp132 == 5)) {
                            NegotiateTestCaseS1781();
                            goto label100;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker11)));
                    label100:
;
                        goto label103;
                    }
                    if ((temp135 == 4)) {
                        NegotiateTestCaseS1781();
                        goto label103;
                    }
                    if ((temp135 == 5)) {
                        NegotiateTestCaseS1789();
                        goto label103;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker13)));
                label103:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker)));
                }
                goto label104;
            }
            if ((temp136 == 1)) {
                NegotiateTestCaseS189();
                goto label104;
            }
            if ((temp136 == 2)) {
                NegotiateTestCaseS217();
                goto label104;
            }
            if ((temp136 == 3)) {
                NegotiateTestCaseS790();
                goto label104;
            }
            throw new InvalidOperationException("never reached");
        label104:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1753ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1754");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1759");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1759");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1762");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1762");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1762");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1762");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1780");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1780");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1780");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1780");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1781() {
            this.Manager.Comment("reaching state \'S1781\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
            this.Manager.Comment("reaching state \'S1782\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S1783\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker7))) != -1)) {
                this.Manager.Comment("reaching state \'S1784\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                        "1, and not reply.\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S1785\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1786\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S1787\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S1788\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker7)));
            }
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1783");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1783");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1780");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1780");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1780");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1780");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1780");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1780");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1780");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1780");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1762");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1762");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1789() {
            this.Manager.Comment("reaching state \'S1789\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S1790\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S1791\'");
            int temp134 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker27)));
            if ((temp134 == 0)) {
                NegotiateTestCaseS1781();
                goto label102;
            }
            if ((temp134 == 1)) {
                NegotiateTestCaseS1781();
                goto label102;
            }
            if ((temp134 == 2)) {
                this.Manager.Comment("reaching state \'S1792\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1793\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1794\'");
                int temp133 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker22)));
                if ((temp133 == 0)) {
                    NegotiateTestCaseS1705();
                    goto label101;
                }
                if ((temp133 == 1)) {
                    NegotiateTestCaseS1781();
                    goto label101;
                }
                if ((temp133 == 2)) {
                    NegotiateTestCaseS1781();
                    goto label101;
                }
                if ((temp133 == 3)) {
                    NegotiateTestCaseS1781();
                    goto label101;
                }
                if ((temp133 == 4)) {
                    NegotiateTestCaseS1781();
                    goto label101;
                }
                if ((temp133 == 5)) {
                    NegotiateTestCaseS1781();
                    goto label101;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker22)));
            label101:
;
                goto label102;
            }
            if ((temp134 == 3)) {
                this.Manager.Comment("reaching state \'S1795\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1796\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1797\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker24))) != -1)) {
                    this.Manager.Comment("reaching state \'S1798\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1799\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1800\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1801\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1802\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker24)));
                }
                goto label102;
            }
            if ((temp134 == 4)) {
                this.Manager.Comment("reaching state \'S1803\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1804\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1805\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker26))) != -1)) {
                    this.Manager.Comment("reaching state \'S1806\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb302\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1807\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1808\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1809\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1810\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker26)));
                }
                goto label102;
            }
            if ((temp134 == 5)) {
                this.Manager.Comment("reaching state \'S1811\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                this.Manager.Comment("reaching state \'S1812\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1813\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker28))) != -1)) {
                    this.Manager.Comment("reaching state \'S1814\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb302\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1815\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1816\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1817\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1818\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker28)));
                }
                goto label102;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1753NegotiateResponseChecker27)));
        label102:
;
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1791");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1791");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1791");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1791");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1791");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1791");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1794");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S1794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1794");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1794");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1794");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1794");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1794");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S1794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1791");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S1791");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1797");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1797");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1791");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1791");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1805");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1805");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S1791");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1791");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS1753NegotiateResponseChecker28(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1813");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S1813");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1753ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1754");
        }
        
        private void NegotiateTestCaseS1753ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1754");
        }
        
        private void NegotiateTestCaseS1753ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1754");
        }
        #endregion
        
        #region Test Starting in S1819
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1819() {
            this.Manager.BeginTest("NegotiateTestCaseS1819");
            this.Manager.Comment("reaching state \'S1819\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp137;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp137);
            this.Manager.AddReturn(ReadConfigInfo, null, temp137);
            this.Manager.Comment("reaching state \'S1820\'");
            int temp138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1819ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1819ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1819ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1819ReadConfigChecker3)));
            if ((temp138 == 0)) {
                this.Manager.Comment("reaching state \'S1821\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1822\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1823\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1824\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1825\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1819NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1826\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "SMB 2.???",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                    this.Manager.Comment("reaching state \'S1827\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1828\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1829\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1830\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1819NegotiateResponseChecker)));
                }
                goto label105;
            }
            if ((temp138 == 1)) {
                NegotiateTestCaseS189();
                goto label105;
            }
            if ((temp138 == 2)) {
                NegotiateTestCaseS217();
                goto label105;
            }
            if ((temp138 == 3)) {
                NegotiateTestCaseS790();
                goto label105;
            }
            throw new InvalidOperationException("never reached");
        label105:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1819ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1820");
        }
        
        private void NegotiateTestCaseS1819NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1825");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1825");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1819ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1820");
        }
        
        private void NegotiateTestCaseS1819ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1820");
        }
        
        private void NegotiateTestCaseS1819ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1820");
        }
        #endregion
        
        #region Test Starting in S1831
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1831() {
            this.Manager.BeginTest("NegotiateTestCaseS1831");
            this.Manager.Comment("reaching state \'S1831\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp139;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp139);
            this.Manager.AddReturn(ReadConfigInfo, null, temp139);
            this.Manager.Comment("reaching state \'S1832\'");
            int temp140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1831ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1831ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1831ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1831ReadConfigChecker3)));
            if ((temp140 == 0)) {
                this.Manager.Comment("reaching state \'S1833\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1834\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1835\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1836\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1837\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1831NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1838\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1839\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1840\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1841\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1842\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1831NegotiateResponseChecker)));
                }
                goto label106;
            }
            if ((temp140 == 1)) {
                NegotiateTestCaseS189();
                goto label106;
            }
            if ((temp140 == 2)) {
                NegotiateTestCaseS217();
                goto label106;
            }
            if ((temp140 == 3)) {
                NegotiateTestCaseS790();
                goto label106;
            }
            throw new InvalidOperationException("never reached");
        label106:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1831ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1832");
        }
        
        private void NegotiateTestCaseS1831NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1837");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1837");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1831ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1832");
        }
        
        private void NegotiateTestCaseS1831ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1832");
        }
        
        private void NegotiateTestCaseS1831ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1832");
        }
        #endregion
        
        #region Test Starting in S1843
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1843() {
            this.Manager.BeginTest("NegotiateTestCaseS1843");
            this.Manager.Comment("reaching state \'S1843\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp141;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp141);
            this.Manager.AddReturn(ReadConfigInfo, null, temp141);
            this.Manager.Comment("reaching state \'S1844\'");
            int temp142 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1843ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1843ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1843ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1843ReadConfigChecker3)));
            if ((temp142 == 0)) {
                this.Manager.Comment("reaching state \'S1845\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1846\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1847\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1848\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1849\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1843NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1850\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1851\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1852\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1853\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1854\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1843NegotiateResponseChecker)));
                }
                goto label107;
            }
            if ((temp142 == 1)) {
                NegotiateTestCaseS189();
                goto label107;
            }
            if ((temp142 == 2)) {
                NegotiateTestCaseS217();
                goto label107;
            }
            if ((temp142 == 3)) {
                NegotiateTestCaseS790();
                goto label107;
            }
            throw new InvalidOperationException("never reached");
        label107:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1843ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1844");
        }
        
        private void NegotiateTestCaseS1843NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1849");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1849");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1843ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1844");
        }
        
        private void NegotiateTestCaseS1843ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1844");
        }
        
        private void NegotiateTestCaseS1843ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1844");
        }
        #endregion
        
        #region Test Starting in S1855
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1855() {
            this.Manager.BeginTest("NegotiateTestCaseS1855");
            this.Manager.Comment("reaching state \'S1855\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp143;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp143);
            this.Manager.AddReturn(ReadConfigInfo, null, temp143);
            this.Manager.Comment("reaching state \'S1856\'");
            int temp144 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1855ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1855ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1855ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1855ReadConfigChecker3)));
            if ((temp144 == 0)) {
                this.Manager.Comment("reaching state \'S1857\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1858\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1859\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1860\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1861\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1855NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1862\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1863\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1864\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1865\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1866\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1855NegotiateResponseChecker)));
                }
                goto label108;
            }
            if ((temp144 == 1)) {
                NegotiateTestCaseS189();
                goto label108;
            }
            if ((temp144 == 2)) {
                NegotiateTestCaseS217();
                goto label108;
            }
            if ((temp144 == 3)) {
                NegotiateTestCaseS790();
                goto label108;
            }
            throw new InvalidOperationException("never reached");
        label108:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1855ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1856");
        }
        
        private void NegotiateTestCaseS1855NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1861");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1861");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1855ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1856");
        }
        
        private void NegotiateTestCaseS1855ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1856");
        }
        
        private void NegotiateTestCaseS1855ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1856");
        }
        #endregion
        
        #region Test Starting in S1867
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1867() {
            this.Manager.BeginTest("NegotiateTestCaseS1867");
            this.Manager.Comment("reaching state \'S1867\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp145;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp145);
            this.Manager.AddReturn(ReadConfigInfo, null, temp145);
            this.Manager.Comment("reaching state \'S1868\'");
            int temp146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1867ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1867ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1867ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1867ReadConfigChecker3)));
            if ((temp146 == 0)) {
                this.Manager.Comment("reaching state \'S1869\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1870\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1871\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1872\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1873\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1867NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1874\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1875\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1876\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1877\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1878\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1867NegotiateResponseChecker)));
                }
                goto label109;
            }
            if ((temp146 == 1)) {
                NegotiateTestCaseS189();
                goto label109;
            }
            if ((temp146 == 2)) {
                NegotiateTestCaseS217();
                goto label109;
            }
            if ((temp146 == 3)) {
                NegotiateTestCaseS790();
                goto label109;
            }
            throw new InvalidOperationException("never reached");
        label109:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1867ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1868");
        }
        
        private void NegotiateTestCaseS1867NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1873");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1873");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1867ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1868");
        }
        
        private void NegotiateTestCaseS1867ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1868");
        }
        
        private void NegotiateTestCaseS1867ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1868");
        }
        #endregion
        
        #region Test Starting in S1879
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1879() {
            this.Manager.BeginTest("NegotiateTestCaseS1879");
            this.Manager.Comment("reaching state \'S1879\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp147;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp147);
            this.Manager.AddReturn(ReadConfigInfo, null, temp147);
            this.Manager.Comment("reaching state \'S1880\'");
            int temp148 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1879ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1879ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1879ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1879ReadConfigChecker3)));
            if ((temp148 == 0)) {
                this.Manager.Comment("reaching state \'S1881\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1882\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1883\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1884\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1885\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1879NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1886\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1887\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1888\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1889\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1890\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1879NegotiateResponseChecker)));
                }
                goto label110;
            }
            if ((temp148 == 1)) {
                NegotiateTestCaseS189();
                goto label110;
            }
            if ((temp148 == 2)) {
                NegotiateTestCaseS217();
                goto label110;
            }
            if ((temp148 == 3)) {
                NegotiateTestCaseS790();
                goto label110;
            }
            throw new InvalidOperationException("never reached");
        label110:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1879ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1880");
        }
        
        private void NegotiateTestCaseS1879NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1885");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1885");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1879ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1880");
        }
        
        private void NegotiateTestCaseS1879ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1880");
        }
        
        private void NegotiateTestCaseS1879ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1880");
        }
        #endregion
        
        #region Test Starting in S1891
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1891() {
            this.Manager.BeginTest("NegotiateTestCaseS1891");
            this.Manager.Comment("reaching state \'S1891\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp149;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp149);
            this.Manager.AddReturn(ReadConfigInfo, null, temp149);
            this.Manager.Comment("reaching state \'S1892\'");
            int temp150 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1891ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1891ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1891ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1891ReadConfigChecker3)));
            if ((temp150 == 0)) {
                NegotiateTestCaseS189();
                goto label111;
            }
            if ((temp150 == 1)) {
                this.Manager.Comment("reaching state \'S1893\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1894\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1895\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                this.Manager.Comment("reaching state \'S1896\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1897\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1891NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1898\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1899\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1900\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1901\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1902\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1891NegotiateResponseChecker)));
                }
                goto label111;
            }
            if ((temp150 == 2)) {
                NegotiateTestCaseS217();
                goto label111;
            }
            if ((temp150 == 3)) {
                NegotiateTestCaseS790();
                goto label111;
            }
            throw new InvalidOperationException("never reached");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1891ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1892");
        }
        
        private void NegotiateTestCaseS1891ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1892");
        }
        
        private void NegotiateTestCaseS1891NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1897");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1891ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1892");
        }
        
        private void NegotiateTestCaseS1891ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1892");
        }
        #endregion
        
        #region Test Starting in S1903
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1903() {
            this.Manager.BeginTest("NegotiateTestCaseS1903");
            this.Manager.Comment("reaching state \'S1903\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp151;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp151);
            this.Manager.AddReturn(ReadConfigInfo, null, temp151);
            this.Manager.Comment("reaching state \'S1904\'");
            int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1903ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1903ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1903ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1903ReadConfigChecker3)));
            if ((temp152 == 0)) {
                NegotiateTestCaseS189();
                goto label112;
            }
            if ((temp152 == 1)) {
                this.Manager.Comment("reaching state \'S1905\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1906\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1907\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1908\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1909\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1903NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1910\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1911\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1912\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1913\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1914\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1903NegotiateResponseChecker)));
                }
                goto label112;
            }
            if ((temp152 == 2)) {
                NegotiateTestCaseS217();
                goto label112;
            }
            if ((temp152 == 3)) {
                NegotiateTestCaseS790();
                goto label112;
            }
            throw new InvalidOperationException("never reached");
        label112:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1903ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1904");
        }
        
        private void NegotiateTestCaseS1903ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1904");
        }
        
        private void NegotiateTestCaseS1903NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1909");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1909");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1903ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1904");
        }
        
        private void NegotiateTestCaseS1903ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1904");
        }
        #endregion
        
        #region Test Starting in S1915
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1915() {
            this.Manager.BeginTest("NegotiateTestCaseS1915");
            this.Manager.Comment("reaching state \'S1915\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp153;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp153);
            this.Manager.AddReturn(ReadConfigInfo, null, temp153);
            this.Manager.Comment("reaching state \'S1916\'");
            int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1915ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1915ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1915ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1915ReadConfigChecker3)));
            if ((temp154 == 0)) {
                NegotiateTestCaseS189();
                goto label113;
            }
            if ((temp154 == 1)) {
                this.Manager.Comment("reaching state \'S1917\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1918\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1919\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1920\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1921\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1915NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1922\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1923\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1924\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1925\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1926\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1915NegotiateResponseChecker)));
                }
                goto label113;
            }
            if ((temp154 == 2)) {
                NegotiateTestCaseS217();
                goto label113;
            }
            if ((temp154 == 3)) {
                NegotiateTestCaseS790();
                goto label113;
            }
            throw new InvalidOperationException("never reached");
        label113:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1915ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1916");
        }
        
        private void NegotiateTestCaseS1915ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1916");
        }
        
        private void NegotiateTestCaseS1915NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1921");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1921");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1915ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1916");
        }
        
        private void NegotiateTestCaseS1915ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1916");
        }
        #endregion
        
        #region Test Starting in S1927
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1927() {
            this.Manager.BeginTest("NegotiateTestCaseS1927");
            this.Manager.Comment("reaching state \'S1927\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp155;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp155);
            this.Manager.AddReturn(ReadConfigInfo, null, temp155);
            this.Manager.Comment("reaching state \'S1928\'");
            int temp156 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1927ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1927ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1927ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1927ReadConfigChecker3)));
            if ((temp156 == 0)) {
                NegotiateTestCaseS189();
                goto label114;
            }
            if ((temp156 == 1)) {
                this.Manager.Comment("reaching state \'S1929\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1930\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1931\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1932\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1933\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1927NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1934\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1935\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1936\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1937\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1938\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1927NegotiateResponseChecker)));
                }
                goto label114;
            }
            if ((temp156 == 2)) {
                NegotiateTestCaseS217();
                goto label114;
            }
            if ((temp156 == 3)) {
                NegotiateTestCaseS790();
                goto label114;
            }
            throw new InvalidOperationException("never reached");
        label114:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1927ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1928");
        }
        
        private void NegotiateTestCaseS1927ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1928");
        }
        
        private void NegotiateTestCaseS1927NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1933");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1933");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1927ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1928");
        }
        
        private void NegotiateTestCaseS1927ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1928");
        }
        #endregion
        
        #region Test Starting in S1939
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1939() {
            this.Manager.BeginTest("NegotiateTestCaseS1939");
            this.Manager.Comment("reaching state \'S1939\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp157;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp157);
            this.Manager.AddReturn(ReadConfigInfo, null, temp157);
            this.Manager.Comment("reaching state \'S1940\'");
            int temp158 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1939ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1939ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1939ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1939ReadConfigChecker3)));
            if ((temp158 == 0)) {
                NegotiateTestCaseS189();
                goto label115;
            }
            if ((temp158 == 1)) {
                this.Manager.Comment("reaching state \'S1941\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1942\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1943\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1944\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1945\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1939NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1946\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S1947\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1948\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1949\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1950\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1939NegotiateResponseChecker)));
                }
                goto label115;
            }
            if ((temp158 == 2)) {
                NegotiateTestCaseS217();
                goto label115;
            }
            if ((temp158 == 3)) {
                NegotiateTestCaseS790();
                goto label115;
            }
            throw new InvalidOperationException("never reached");
        label115:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1939ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1940");
        }
        
        private void NegotiateTestCaseS1939ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1940");
        }
        
        private void NegotiateTestCaseS1939NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1945");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1939ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1940");
        }
        
        private void NegotiateTestCaseS1939ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1940");
        }
        #endregion
        
        #region Test Starting in S195
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS195() {
            this.Manager.BeginTest("NegotiateTestCaseS195");
            this.Manager.Comment("reaching state \'S195\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp159;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp159);
            this.Manager.AddReturn(ReadConfigInfo, null, temp159);
            this.Manager.Comment("reaching state \'S196\'");
            int temp160 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS195ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS195ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS195ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS195ReadConfigChecker3)));
            if ((temp160 == 0)) {
                NegotiateTestCaseS183();
                goto label116;
            }
            if ((temp160 == 1)) {
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S201\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS195NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S202\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S203\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S204\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S205\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S206\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS195NegotiateResponseChecker)));
                }
                goto label116;
            }
            if ((temp160 == 2)) {
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                        " family, processing MUST continue as specified in 3.3.5.3.2.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S211\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS195NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S212\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S213\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S214\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S215\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S216\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS195NegotiateResponseChecker1)));
                }
                goto label116;
            }
            if ((temp160 == 3)) {
                NegotiateTestCaseS217();
                goto label116;
            }
            throw new InvalidOperationException("never reached");
        label116:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS195ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S196");
        }
        
        private void NegotiateTestCaseS195ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S196");
        }
        
        private void NegotiateTestCaseS195NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS195ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S196");
        }
        
        private void NegotiateTestCaseS195NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect family, processing MUST continue as specified in 3.3.5.3.2."", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                    " family, processing MUST continue as specified in 3.3.5.3.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS195ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S196");
        }
        #endregion
        
        #region Test Starting in S1951
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1951() {
            this.Manager.BeginTest("NegotiateTestCaseS1951");
            this.Manager.Comment("reaching state \'S1951\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp161;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp161);
            this.Manager.AddReturn(ReadConfigInfo, null, temp161);
            this.Manager.Comment("reaching state \'S1952\'");
            int temp162 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1951ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1951ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1951ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1951ReadConfigChecker3)));
            if ((temp162 == 0)) {
                NegotiateTestCaseS189();
                goto label117;
            }
            if ((temp162 == 1)) {
                this.Manager.Comment("reaching state \'S1953\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1954\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1955\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1956\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1957\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1951NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1958\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1959\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1960\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1961\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1962\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1951NegotiateResponseChecker)));
                }
                goto label117;
            }
            if ((temp162 == 2)) {
                NegotiateTestCaseS217();
                goto label117;
            }
            if ((temp162 == 3)) {
                NegotiateTestCaseS790();
                goto label117;
            }
            throw new InvalidOperationException("never reached");
        label117:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1951ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1952");
        }
        
        private void NegotiateTestCaseS1951ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1952");
        }
        
        private void NegotiateTestCaseS1951NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1957");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1957");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1951ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1952");
        }
        
        private void NegotiateTestCaseS1951ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1952");
        }
        #endregion
        
        #region Test Starting in S1963
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1963() {
            this.Manager.BeginTest("NegotiateTestCaseS1963");
            this.Manager.Comment("reaching state \'S1963\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp163;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp163);
            this.Manager.AddReturn(ReadConfigInfo, null, temp163);
            this.Manager.Comment("reaching state \'S1964\'");
            int temp164 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1963ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1963ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1963ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1963ReadConfigChecker3)));
            if ((temp164 == 0)) {
                NegotiateTestCaseS189();
                goto label118;
            }
            if ((temp164 == 1)) {
                this.Manager.Comment("reaching state \'S1965\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1966\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1967\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1968\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1969\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1963NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1970\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "SMB 2.???",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                    this.Manager.Comment("reaching state \'S1971\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1972\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1973\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1974\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1963NegotiateResponseChecker)));
                }
                goto label118;
            }
            if ((temp164 == 2)) {
                NegotiateTestCaseS217();
                goto label118;
            }
            if ((temp164 == 3)) {
                NegotiateTestCaseS790();
                goto label118;
            }
            throw new InvalidOperationException("never reached");
        label118:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1963ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1964");
        }
        
        private void NegotiateTestCaseS1963ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1964");
        }
        
        private void NegotiateTestCaseS1963NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1969");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1969");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1963ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1964");
        }
        
        private void NegotiateTestCaseS1963ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1964");
        }
        #endregion
        
        #region Test Starting in S1975
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1975() {
            this.Manager.BeginTest("NegotiateTestCaseS1975");
            this.Manager.Comment("reaching state \'S1975\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp165;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp165);
            this.Manager.AddReturn(ReadConfigInfo, null, temp165);
            this.Manager.Comment("reaching state \'S1976\'");
            int temp166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1975ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1975ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1975ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1975ReadConfigChecker3)));
            if ((temp166 == 0)) {
                NegotiateTestCaseS189();
                goto label119;
            }
            if ((temp166 == 1)) {
                this.Manager.Comment("reaching state \'S1977\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1978\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1979\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1980\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1981\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1975NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1982\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1983\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1984\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1985\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1986\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1975NegotiateResponseChecker)));
                }
                goto label119;
            }
            if ((temp166 == 2)) {
                NegotiateTestCaseS217();
                goto label119;
            }
            if ((temp166 == 3)) {
                NegotiateTestCaseS790();
                goto label119;
            }
            throw new InvalidOperationException("never reached");
        label119:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1975ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1976");
        }
        
        private void NegotiateTestCaseS1975ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1976");
        }
        
        private void NegotiateTestCaseS1975NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1981");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1981");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1975ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1976");
        }
        
        private void NegotiateTestCaseS1975ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1976");
        }
        #endregion
        
        #region Test Starting in S1987
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1987() {
            this.Manager.BeginTest("NegotiateTestCaseS1987");
            this.Manager.Comment("reaching state \'S1987\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp167;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp167);
            this.Manager.AddReturn(ReadConfigInfo, null, temp167);
            this.Manager.Comment("reaching state \'S1988\'");
            int temp168 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1987ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1987ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1987ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1987ReadConfigChecker3)));
            if ((temp168 == 0)) {
                NegotiateTestCaseS189();
                goto label120;
            }
            if ((temp168 == 1)) {
                this.Manager.Comment("reaching state \'S1989\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1990\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1991\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1992\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1993\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1987NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1994\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1995\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1996\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1997\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1998\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1987NegotiateResponseChecker)));
                }
                goto label120;
            }
            if ((temp168 == 2)) {
                NegotiateTestCaseS217();
                goto label120;
            }
            if ((temp168 == 3)) {
                NegotiateTestCaseS790();
                goto label120;
            }
            throw new InvalidOperationException("never reached");
        label120:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1987ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S1988");
        }
        
        private void NegotiateTestCaseS1987ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S1988");
        }
        
        private void NegotiateTestCaseS1987NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1993");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S1993");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1987ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S1988");
        }
        
        private void NegotiateTestCaseS1987ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S1988");
        }
        #endregion
        
        #region Test Starting in S1999
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS1999() {
            this.Manager.BeginTest("NegotiateTestCaseS1999");
            this.Manager.Comment("reaching state \'S1999\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp169;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp169);
            this.Manager.AddReturn(ReadConfigInfo, null, temp169);
            this.Manager.Comment("reaching state \'S2000\'");
            int temp170 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1999ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1999ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1999ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS1999ReadConfigChecker3)));
            if ((temp170 == 0)) {
                NegotiateTestCaseS189();
                goto label121;
            }
            if ((temp170 == 1)) {
                this.Manager.Comment("reaching state \'S2001\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2002\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2003\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S2004\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2005\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1999NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S2006\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                    this.Manager.Comment("reaching state \'S2007\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2008\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2009\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2010\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS1999NegotiateResponseChecker)));
                }
                goto label121;
            }
            if ((temp170 == 2)) {
                NegotiateTestCaseS217();
                goto label121;
            }
            if ((temp170 == 3)) {
                NegotiateTestCaseS790();
                goto label121;
            }
            throw new InvalidOperationException("never reached");
        label121:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS1999ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2000");
        }
        
        private void NegotiateTestCaseS1999ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2000");
        }
        
        private void NegotiateTestCaseS1999NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2005");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2005");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS1999ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2000");
        }
        
        private void NegotiateTestCaseS1999ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2000");
        }
        #endregion
        
        #region Test Starting in S2011
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2011() {
            this.Manager.BeginTest("NegotiateTestCaseS2011");
            this.Manager.Comment("reaching state \'S2011\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp171;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp171);
            this.Manager.AddReturn(ReadConfigInfo, null, temp171);
            this.Manager.Comment("reaching state \'S2012\'");
            int temp172 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2011ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2011ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2011ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2011ReadConfigChecker3)));
            if ((temp172 == 0)) {
                NegotiateTestCaseS189();
                goto label122;
            }
            if ((temp172 == 1)) {
                this.Manager.Comment("reaching state \'S2013\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2014\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2015\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S2016\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2017\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2011NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S2018\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2019\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2020\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2021\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2022\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2011NegotiateResponseChecker)));
                }
                goto label122;
            }
            if ((temp172 == 2)) {
                NegotiateTestCaseS217();
                goto label122;
            }
            if ((temp172 == 3)) {
                NegotiateTestCaseS790();
                goto label122;
            }
            throw new InvalidOperationException("never reached");
        label122:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2011ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2012");
        }
        
        private void NegotiateTestCaseS2011ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2012");
        }
        
        private void NegotiateTestCaseS2011NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2017");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2017");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2011ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2012");
        }
        
        private void NegotiateTestCaseS2011ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2012");
        }
        #endregion
        
        #region Test Starting in S2023
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2023() {
            this.Manager.BeginTest("NegotiateTestCaseS2023");
            this.Manager.Comment("reaching state \'S2023\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp173;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp173);
            this.Manager.AddReturn(ReadConfigInfo, null, temp173);
            this.Manager.Comment("reaching state \'S2024\'");
            int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2023ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2023ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2023ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2023ReadConfigChecker3)));
            if ((temp174 == 0)) {
                NegotiateTestCaseS189();
                goto label123;
            }
            if ((temp174 == 1)) {
                this.Manager.Comment("reaching state \'S2025\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2026\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2027\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S2028\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2029\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2023NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S2030\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2031\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2032\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2033\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2034\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2023NegotiateResponseChecker)));
                }
                goto label123;
            }
            if ((temp174 == 2)) {
                NegotiateTestCaseS217();
                goto label123;
            }
            if ((temp174 == 3)) {
                NegotiateTestCaseS790();
                goto label123;
            }
            throw new InvalidOperationException("never reached");
        label123:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2023ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2024");
        }
        
        private void NegotiateTestCaseS2023ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2024");
        }
        
        private void NegotiateTestCaseS2023NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2029");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2029");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2023ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2024");
        }
        
        private void NegotiateTestCaseS2023ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2024");
        }
        #endregion
        
        #region Test Starting in S2035
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2035() {
            this.Manager.BeginTest("NegotiateTestCaseS2035");
            this.Manager.Comment("reaching state \'S2035\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp175;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp175);
            this.Manager.AddReturn(ReadConfigInfo, null, temp175);
            this.Manager.Comment("reaching state \'S2036\'");
            int temp176 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2035ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2035ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2035ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2035ReadConfigChecker3)));
            if ((temp176 == 0)) {
                NegotiateTestCaseS189();
                goto label124;
            }
            if ((temp176 == 1)) {
                this.Manager.Comment("reaching state \'S2037\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2038\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2039\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S2040\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2041\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2035NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S2042\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2043\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2044\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2045\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2046\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2035NegotiateResponseChecker)));
                }
                goto label124;
            }
            if ((temp176 == 2)) {
                NegotiateTestCaseS217();
                goto label124;
            }
            if ((temp176 == 3)) {
                NegotiateTestCaseS790();
                goto label124;
            }
            throw new InvalidOperationException("never reached");
        label124:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2035ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2036");
        }
        
        private void NegotiateTestCaseS2035ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2036");
        }
        
        private void NegotiateTestCaseS2035NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2041");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2041");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2035ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2036");
        }
        
        private void NegotiateTestCaseS2035ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2036");
        }
        #endregion
        
        #region Test Starting in S2047
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2047() {
            this.Manager.BeginTest("NegotiateTestCaseS2047");
            this.Manager.Comment("reaching state \'S2047\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp177;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp177);
            this.Manager.AddReturn(ReadConfigInfo, null, temp177);
            this.Manager.Comment("reaching state \'S2048\'");
            int temp178 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2047ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2047ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2047ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2047ReadConfigChecker3)));
            if ((temp178 == 0)) {
                NegotiateTestCaseS189();
                goto label125;
            }
            if ((temp178 == 1)) {
                this.Manager.Comment("reaching state \'S2049\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2050\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2051\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 1.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is not present in the dialect list and the se" +
                        "rver does not implement SMB, the server MUST disconnect the connection, as speci" +
                        "fied in section 3.3.7.1, without sending a response.\"");
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS2052();
                goto label125;
            }
            if ((temp178 == 2)) {
                NegotiateTestCaseS217();
                goto label125;
            }
            if ((temp178 == 3)) {
                NegotiateTestCaseS790();
                goto label125;
            }
            throw new InvalidOperationException("never reached");
        label125:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2047ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2048");
        }
        
        private void NegotiateTestCaseS2047ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2048");
        }
        
        private void NegotiateTestCaseS2052() {
            this.Manager.Comment("reaching state \'S2052\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ComNegotiateRequestInfo, null, new ComNegotiateRequestDelegate1(this.NegotiateTestCaseS2047ComNegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S2053\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S2054\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S2055\'");
        }
        
        private void NegotiateTestCaseS2047ComNegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS2047ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2048");
        }
        
        private void NegotiateTestCaseS2047ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2048");
        }
        #endregion
        
        #region Test Starting in S2056
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2056() {
            this.Manager.BeginTest("NegotiateTestCaseS2056");
            this.Manager.Comment("reaching state \'S2056\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp179;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp179);
            this.Manager.AddReturn(ReadConfigInfo, null, temp179);
            this.Manager.Comment("reaching state \'S2057\'");
            int temp180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2056ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2056ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2056ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2056ReadConfigChecker3)));
            if ((temp180 == 0)) {
                NegotiateTestCaseS189();
                goto label126;
            }
            if ((temp180 == 1)) {
                this.Manager.Comment("reaching state \'S2058\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2059\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2060\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is not present in the dialect list and the se" +
                        "rver does not implement SMB, the server MUST disconnect the connection, as speci" +
                        "fied in section 3.3.7.1, without sending a response.\"");
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS2061();
                goto label126;
            }
            if ((temp180 == 2)) {
                NegotiateTestCaseS217();
                goto label126;
            }
            if ((temp180 == 3)) {
                NegotiateTestCaseS790();
                goto label126;
            }
            throw new InvalidOperationException("never reached");
        label126:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2056ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2057");
        }
        
        private void NegotiateTestCaseS2056ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2057");
        }
        
        private void NegotiateTestCaseS2061() {
            this.Manager.Comment("reaching state \'S2061\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ComNegotiateRequestInfo, null, new ComNegotiateRequestDelegate1(this.NegotiateTestCaseS2056ComNegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S2062\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S2063\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S2064\'");
        }
        
        private void NegotiateTestCaseS2056ComNegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS2056ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2057");
        }
        
        private void NegotiateTestCaseS2056ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2057");
        }
        #endregion
        
        #region Test Starting in S2065
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2065() {
            this.Manager.BeginTest("NegotiateTestCaseS2065");
            this.Manager.Comment("reaching state \'S2065\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp181;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp181);
            this.Manager.AddReturn(ReadConfigInfo, null, temp181);
            this.Manager.Comment("reaching state \'S2066\'");
            int temp182 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2065ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2065ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2065ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2065ReadConfigChecker3)));
            if ((temp182 == 0)) {
                NegotiateTestCaseS189();
                goto label127;
            }
            if ((temp182 == 1)) {
                this.Manager.Comment("reaching state \'S2067\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2068\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2069\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.???",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S2070\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2071\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2065NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S2072\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S2073\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2074\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2075\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2076\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2065NegotiateResponseChecker)));
                }
                goto label127;
            }
            if ((temp182 == 2)) {
                NegotiateTestCaseS217();
                goto label127;
            }
            if ((temp182 == 3)) {
                NegotiateTestCaseS790();
                goto label127;
            }
            throw new InvalidOperationException("never reached");
        label127:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2065ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2066");
        }
        
        private void NegotiateTestCaseS2065ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2066");
        }
        
        private void NegotiateTestCaseS2065NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2071");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S2071");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS2065ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2066");
        }
        
        private void NegotiateTestCaseS2065ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2066");
        }
        #endregion
        
        #region Test Starting in S2077
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2077() {
            this.Manager.BeginTest("NegotiateTestCaseS2077");
            this.Manager.Comment("reaching state \'S2077\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp183;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp183);
            this.Manager.AddReturn(ReadConfigInfo, null, temp183);
            this.Manager.Comment("reaching state \'S2078\'");
            int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2077ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2077ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2077ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2077ReadConfigChecker3)));
            if ((temp185 == 0)) {
                NegotiateTestCaseS189();
                goto label129;
            }
            if ((temp185 == 1)) {
                this.Manager.Comment("reaching state \'S2079\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2080\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2081\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS2082();
                goto label129;
            }
            if ((temp185 == 2)) {
                NegotiateTestCaseS217();
                goto label129;
            }
            if ((temp185 == 3)) {
                NegotiateTestCaseS790();
                goto label129;
            }
            throw new InvalidOperationException("never reached");
        label129:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2077ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2078");
        }
        
        private void NegotiateTestCaseS2077ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2078");
        }
        
        private void NegotiateTestCaseS2082() {
            this.Manager.Comment("reaching state \'S2082\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS2077NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S2083\'");
            int temp184 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker6)));
            if ((temp184 == 0)) {
                this.Manager.Comment("reaching state \'S2084\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S2085\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2086\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S2087\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2088\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2089\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2090\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2091\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker1)));
                }
                goto label128;
            }
            if ((temp184 == 1)) {
                this.Manager.Comment("reaching state \'S2092\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Comment("reaching state \'S2093\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2094\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S2095\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S2096\'");
                goto label128;
            }
            if ((temp184 == 2)) {
                this.Manager.Comment("reaching state \'S2097\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Comment("reaching state \'S2098\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2099\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S2100\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S2101\'");
                goto label128;
            }
            if ((temp184 == 3)) {
                this.Manager.Comment("reaching state \'S2102\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 1.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS2052();
                goto label128;
            }
            if ((temp184 == 4)) {
                this.Manager.Comment("reaching state \'S2103\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.???",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Comment("reaching state \'S2104\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2105\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S2106\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S2107\'");
                goto label128;
            }
            if ((temp184 == 5)) {
                this.Manager.Comment("reaching state \'S2108\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS2061();
                goto label128;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2077NegotiateResponseChecker6)));
        label128:
;
        }
        
        private void NegotiateTestCaseS2077NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS2077NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2083");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S2083");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2077NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2086");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2086");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2077NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2083");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S2083");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2077NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2083");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S2083");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2077NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2083");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2083");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2077NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2083");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S2083");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2077NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2083");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S2083");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2077ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2078");
        }
        
        private void NegotiateTestCaseS2077ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2078");
        }
        #endregion
        
        #region Test Starting in S2109
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2109() {
            this.Manager.BeginTest("NegotiateTestCaseS2109");
            this.Manager.Comment("reaching state \'S2109\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp186;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp186);
            this.Manager.AddReturn(ReadConfigInfo, null, temp186);
            this.Manager.Comment("reaching state \'S2110\'");
            int temp187 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2109ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2109ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2109ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2109ReadConfigChecker3)));
            if ((temp187 == 0)) {
                NegotiateTestCaseS189();
                goto label130;
            }
            if ((temp187 == 1)) {
                this.Manager.Comment("reaching state \'S2111\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2112\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2113\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S2114\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2115\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2109NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S2116\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb302\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2117\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2118\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2119\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2120\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2109NegotiateResponseChecker)));
                }
                goto label130;
            }
            if ((temp187 == 2)) {
                NegotiateTestCaseS217();
                goto label130;
            }
            if ((temp187 == 3)) {
                NegotiateTestCaseS790();
                goto label130;
            }
            throw new InvalidOperationException("never reached");
        label130:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2109ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2110");
        }
        
        private void NegotiateTestCaseS2109ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2110");
        }
        
        private void NegotiateTestCaseS2109NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2115");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S2115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2109ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2110");
        }
        
        private void NegotiateTestCaseS2109ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2110");
        }
        #endregion
        
        #region Test Starting in S2121
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2121() {
            this.Manager.BeginTest("NegotiateTestCaseS2121");
            this.Manager.Comment("reaching state \'S2121\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp188;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp188);
            this.Manager.AddReturn(ReadConfigInfo, null, temp188);
            this.Manager.Comment("reaching state \'S2122\'");
            int temp189 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2121ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2121ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2121ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2121ReadConfigChecker3)));
            if ((temp189 == 0)) {
                NegotiateTestCaseS189();
                goto label131;
            }
            if ((temp189 == 1)) {
                this.Manager.Comment("reaching state \'S2123\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2124\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2125\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S2126\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2127\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2121NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S2128\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2129\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2130\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2131\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2132\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2121NegotiateResponseChecker)));
                }
                goto label131;
            }
            if ((temp189 == 2)) {
                NegotiateTestCaseS217();
                goto label131;
            }
            if ((temp189 == 3)) {
                NegotiateTestCaseS790();
                goto label131;
            }
            throw new InvalidOperationException("never reached");
        label131:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2121ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2122");
        }
        
        private void NegotiateTestCaseS2121ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2122");
        }
        
        private void NegotiateTestCaseS2121NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2121ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2122");
        }
        
        private void NegotiateTestCaseS2121ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2122");
        }
        #endregion
        
        #region Test Starting in S2133
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2133() {
            this.Manager.BeginTest("NegotiateTestCaseS2133");
            this.Manager.Comment("reaching state \'S2133\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp190;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp190);
            this.Manager.AddReturn(ReadConfigInfo, null, temp190);
            this.Manager.Comment("reaching state \'S2134\'");
            int temp195 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2133ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2133ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2133ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2133ReadConfigChecker3)));
            if ((temp195 == 0)) {
                NegotiateTestCaseS189();
                goto label136;
            }
            if ((temp195 == 1)) {
                this.Manager.Comment("reaching state \'S2135\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2136\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2137\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                this.Manager.Comment("reaching state \'S2138\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2139\'");
                int temp194 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker30)));
                if ((temp194 == 0)) {
                    NegotiateTestCaseS2140();
                    goto label135;
                }
                if ((temp194 == 1)) {
                    NegotiateTestCaseS2159();
                    goto label135;
                }
                if ((temp194 == 2)) {
                    NegotiateTestCaseS2159();
                    goto label135;
                }
                if ((temp194 == 3)) {
                    NegotiateTestCaseS2159();
                    goto label135;
                }
                if ((temp194 == 4)) {
                    this.Manager.Comment("reaching state \'S2167\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.AddReturn(NegotiateRequestInfo, null);
                    NegotiateTestCaseS2168();
                    goto label135;
                }
                if ((temp194 == 5)) {
                    NegotiateTestCaseS2198();
                    goto label135;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker30)));
            label135:
;
                goto label136;
            }
            if ((temp195 == 2)) {
                NegotiateTestCaseS217();
                goto label136;
            }
            if ((temp195 == 3)) {
                NegotiateTestCaseS790();
                goto label136;
            }
            throw new InvalidOperationException("never reached");
        label136:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2133ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2134");
        }
        
        private void NegotiateTestCaseS2133ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2134");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S2139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2140() {
            this.Manager.Comment("reaching state \'S2140\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
            this.Manager.Comment("reaching state \'S2141\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S2142\'");
            int temp191 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker9)));
            if ((temp191 == 0)) {
                this.Manager.Comment("reaching state \'S2143\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S2144\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2145\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S2146\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2147\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2148\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2149\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2150\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker2)));
                }
                goto label132;
            }
            if ((temp191 == 1)) {
                this.Manager.Comment("reaching state \'S2151\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S2152\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2153\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker4))) != -1)) {
                    this.Manager.Comment("reaching state \'S2154\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S2155\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2156\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2157\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2158\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker4)));
                }
                goto label132;
            }
            if ((temp191 == 2)) {
                NegotiateTestCaseS2159();
                goto label132;
            }
            if ((temp191 == 3)) {
                NegotiateTestCaseS2159();
                goto label132;
            }
            if ((temp191 == 4)) {
                NegotiateTestCaseS2159();
                goto label132;
            }
            if ((temp191 == 5)) {
                NegotiateTestCaseS2159();
                goto label132;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker9)));
        label132:
;
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S2142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S2142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2153");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S2153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S2142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2159() {
            this.Manager.Comment("reaching state \'S2159\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                "Head",
                                                                "Tail"}, new object[] {
                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                            "Head",
                                                                            "Tail"}, new object[] {
                                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
            this.Manager.Comment("reaching state \'S2160\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S2161\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker6))) != -1)) {
                this.Manager.Comment("reaching state \'S2162\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                        "1, and not reply.\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb302\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S2163\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2164\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S2165\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S2166\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker6)));
            }
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S2161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S2142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S2142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S2139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S2139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S2139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S2139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2168() {
            this.Manager.Comment("reaching state \'S2168\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS2133NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S2169\'");
            int temp193 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker22)));
            if ((temp193 == 0)) {
                NegotiateTestCaseS2140();
                goto label134;
            }
            if ((temp193 == 1)) {
                this.Manager.Comment("reaching state \'S2170\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S2171\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2172\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker16))) != -1)) {
                    this.Manager.Comment("reaching state \'S2173\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2174\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2175\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2176\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2177\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker16)));
                }
                goto label134;
            }
            if ((temp193 == 2)) {
                this.Manager.Comment("reaching state \'S2178\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S2179\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2180\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker18))) != -1)) {
                    this.Manager.Comment("reaching state \'S2181\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S2182\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2183\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2184\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2185\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker18)));
                }
                goto label134;
            }
            if ((temp193 == 3)) {
                this.Manager.Comment("reaching state \'S2186\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS2082();
                goto label134;
            }
            if ((temp193 == 4)) {
                this.Manager.Comment("reaching state \'S2187\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                this.Manager.Comment("reaching state \'S2188\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2189\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker21))) != -1)) {
                    this.Manager.Comment("reaching state \'S2190\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2191\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2192\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2193\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2194\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker21)));
                }
                goto label134;
            }
            if ((temp193 == 5)) {
                this.Manager.Comment("reaching state \'S2195\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                this.Manager.Comment("reaching state \'S2196\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2197\'");
                int temp192 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker26)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker27)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker29)));
                if ((temp192 == 0)) {
                    NegotiateTestCaseS2198();
                    goto label133;
                }
                if ((temp192 == 1)) {
                    NegotiateTestCaseS2198();
                    goto label133;
                }
                if ((temp192 == 2)) {
                    NegotiateTestCaseS2198();
                    goto label133;
                }
                if ((temp192 == 3)) {
                    NegotiateTestCaseS2198();
                    goto label133;
                }
                if ((temp192 == 4)) {
                    NegotiateTestCaseS2198();
                    goto label133;
                }
                if ((temp192 == 5)) {
                    this.Manager.Comment("reaching state \'S2206\'");
                    goto label133;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker26)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker27)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker29)));
            label133:
;
                goto label134;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker22)));
        label134:
;
        }
        
        private void NegotiateTestCaseS2133NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S2169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S2169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S2172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S2169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S2180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S2169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2189");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S2189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S2169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S2169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S2197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2198() {
            this.Manager.Comment("reaching state \'S2198\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S2199\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S2200\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker24))) != -1)) {
                this.Manager.Comment("reaching state \'S2201\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                        "1, and not reply.\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb302\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S2202\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2203\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S2204\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S2205\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2133NegotiateResponseChecker24)));
            }
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S2200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb302"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb302"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb302\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S2197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S2197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker28(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S2197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker29(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S2197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133NegotiateResponseChecker30(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S2139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S2139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS2133ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2134");
        }
        
        private void NegotiateTestCaseS2133ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2134");
        }
        #endregion
        
        #region Test Starting in S2207
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2207() {
            this.Manager.BeginTest("NegotiateTestCaseS2207");
            this.Manager.Comment("reaching state \'S2207\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp196;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp196);
            this.Manager.AddReturn(ReadConfigInfo, null, temp196);
            this.Manager.Comment("reaching state \'S2208\'");
            int temp197 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2207ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2207ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2207ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2207ReadConfigChecker3)));
            if ((temp197 == 0)) {
                NegotiateTestCaseS189();
                goto label137;
            }
            if ((temp197 == 1)) {
                NegotiateTestCaseS217();
                goto label137;
            }
            if ((temp197 == 2)) {
                this.Manager.Comment("reaching state \'S2209\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2210\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2211\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S2212\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2213\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2207NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S2214\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2215\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2216\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2217\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2218\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2207NegotiateResponseChecker)));
                }
                goto label137;
            }
            if ((temp197 == 3)) {
                NegotiateTestCaseS790();
                goto label137;
            }
            throw new InvalidOperationException("never reached");
        label137:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2207ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2208");
        }
        
        private void NegotiateTestCaseS2207ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2208");
        }
        
        private void NegotiateTestCaseS2207ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2208");
        }
        
        private void NegotiateTestCaseS2207NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S2213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS2207ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2208");
        }
        #endregion
        
        #region Test Starting in S2219
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2219() {
            this.Manager.BeginTest("NegotiateTestCaseS2219");
            this.Manager.Comment("reaching state \'S2219\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp198;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp198);
            this.Manager.AddReturn(ReadConfigInfo, null, temp198);
            this.Manager.Comment("reaching state \'S2220\'");
            int temp199 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2219ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2219ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2219ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2219ReadConfigChecker3)));
            if ((temp199 == 0)) {
                NegotiateTestCaseS189();
                goto label138;
            }
            if ((temp199 == 1)) {
                NegotiateTestCaseS217();
                goto label138;
            }
            if ((temp199 == 2)) {
                this.Manager.Comment("reaching state \'S2221\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2222\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2223\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS2168();
                goto label138;
            }
            if ((temp199 == 3)) {
                NegotiateTestCaseS790();
                goto label138;
            }
            throw new InvalidOperationException("never reached");
        label138:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2219ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2220");
        }
        
        private void NegotiateTestCaseS2219ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2220");
        }
        
        private void NegotiateTestCaseS2219ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2220");
        }
        
        private void NegotiateTestCaseS2219ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2220");
        }
        #endregion
        
        #region Test Starting in S2224
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2224() {
            this.Manager.BeginTest("NegotiateTestCaseS2224");
            this.Manager.Comment("reaching state \'S2224\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp200;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp200);
            this.Manager.AddReturn(ReadConfigInfo, null, temp200);
            this.Manager.Comment("reaching state \'S2225\'");
            int temp201 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2224ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2224ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2224ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2224ReadConfigChecker3)));
            if ((temp201 == 0)) {
                NegotiateTestCaseS189();
                goto label139;
            }
            if ((temp201 == 1)) {
                NegotiateTestCaseS217();
                goto label139;
            }
            if ((temp201 == 2)) {
                this.Manager.Comment("reaching state \'S2226\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2227\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2228\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S2229\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2230\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2224NegotiateResponseChecker))) != -1)) {
                    NegotiateTestCaseS1789();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2224NegotiateResponseChecker)));
                }
                goto label139;
            }
            if ((temp201 == 3)) {
                NegotiateTestCaseS790();
                goto label139;
            }
            throw new InvalidOperationException("never reached");
        label139:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2224ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2225");
        }
        
        private void NegotiateTestCaseS2224ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2225");
        }
        
        private void NegotiateTestCaseS2224ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2225");
        }
        
        private void NegotiateTestCaseS2224NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2230");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S2230");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS2224ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2225");
        }
        #endregion
        
        #region Test Starting in S223
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS223() {
            this.Manager.BeginTest("NegotiateTestCaseS223");
            this.Manager.Comment("reaching state \'S223\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp202;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp202);
            this.Manager.AddReturn(ReadConfigInfo, null, temp202);
            this.Manager.Comment("reaching state \'S224\'");
            int temp203 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS223ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS223ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS223ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS223ReadConfigChecker3)));
            if ((temp203 == 0)) {
                NegotiateTestCaseS183();
                goto label140;
            }
            if ((temp203 == 1)) {
                NegotiateTestCaseS217();
                goto label140;
            }
            if ((temp203 == 2)) {
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S229\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS223NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S230\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S231\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S232\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S233\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S234\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS223NegotiateResponseChecker)));
                }
                goto label140;
            }
            if ((temp203 == 3)) {
                this.Manager.Comment("reaching state \'S235\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S239\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS223NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S240\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S241\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S242\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S243\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S244\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS223NegotiateResponseChecker1)));
                }
                goto label140;
            }
            throw new InvalidOperationException("never reached");
        label140:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS223ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S224");
        }
        
        private void NegotiateTestCaseS223ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S224");
        }
        
        private void NegotiateTestCaseS223ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S224");
        }
        
        private void NegotiateTestCaseS223NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S229");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS223ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S224");
        }
        
        private void NegotiateTestCaseS223NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S239");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        #endregion
        
        #region Test Starting in S2231
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS2231() {
            this.Manager.BeginTest("NegotiateTestCaseS2231");
            this.Manager.Comment("reaching state \'S2231\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp204;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp204);
            this.Manager.AddReturn(ReadConfigInfo, null, temp204);
            this.Manager.Comment("reaching state \'S2232\'");
            int temp205 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2231ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2231ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2231ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS2231ReadConfigChecker3)));
            if ((temp205 == 0)) {
                NegotiateTestCaseS189();
                goto label141;
            }
            if ((temp205 == 1)) {
                NegotiateTestCaseS217();
                goto label141;
            }
            if ((temp205 == 2)) {
                this.Manager.Comment("reaching state \'S2233\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S2234\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S2235\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S2236\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S2237\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2231NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S2238\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb21\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S2239\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S2240\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S2241\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S2242\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS2231NegotiateResponseChecker)));
                }
                goto label141;
            }
            if ((temp205 == 3)) {
                NegotiateTestCaseS790();
                goto label141;
            }
            throw new InvalidOperationException("never reached");
        label141:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS2231ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S2232");
        }
        
        private void NegotiateTestCaseS2231ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S2232");
        }
        
        private void NegotiateTestCaseS2231ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S2232");
        }
        
        private void NegotiateTestCaseS2231NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S2237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S2237");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS2231ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S2232");
        }
        #endregion
        
        #region Test Starting in S245
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS245() {
            this.Manager.BeginTest("NegotiateTestCaseS245");
            this.Manager.Comment("reaching state \'S245\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp206;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp206);
            this.Manager.AddReturn(ReadConfigInfo, null, temp206);
            this.Manager.Comment("reaching state \'S246\'");
            int temp208 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS245ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS245ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS245ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS245ReadConfigChecker3)));
            if ((temp208 == 0)) {
                NegotiateTestCaseS183();
                goto label143;
            }
            if ((temp208 == 1)) {
                NegotiateTestCaseS217();
                goto label143;
            }
            if ((temp208 == 2)) {
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S251\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S252\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S253\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S254\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S255\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S256\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker)));
                }
                goto label143;
            }
            if ((temp208 == 3)) {
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S261\'");
                int temp207 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker7)));
                if ((temp207 == 0)) {
                    NegotiateTestCaseS262();
                    goto label142;
                }
                if ((temp207 == 1)) {
                    NegotiateTestCaseS262();
                    goto label142;
                }
                if ((temp207 == 2)) {
                    NegotiateTestCaseS262();
                    goto label142;
                }
                if ((temp207 == 3)) {
                    NegotiateTestCaseS262();
                    goto label142;
                }
                if ((temp207 == 4)) {
                    NegotiateTestCaseS262();
                    goto label142;
                }
                if ((temp207 == 5)) {
                    NegotiateTestCaseS262();
                    goto label142;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker7)));
            label142:
;
                goto label143;
            }
            throw new InvalidOperationException("never reached");
        label143:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS245ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S246");
        }
        
        private void NegotiateTestCaseS245ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S246");
        }
        
        private void NegotiateTestCaseS245ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S246");
        }
        
        private void NegotiateTestCaseS245NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS245ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S246");
        }
        
        private void NegotiateTestCaseS245NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS262() {
            this.Manager.Comment("reaching state \'S262\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S263\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S264\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S265\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.???",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Comment("reaching state \'S266\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S267\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S269\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS245NegotiateResponseChecker2)));
            }
        }
        
        private void NegotiateTestCaseS245NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S264");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS245NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS245NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS245NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS245NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS245NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        #endregion
        
        #region Test Starting in S270
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS270() {
            this.Manager.BeginTest("NegotiateTestCaseS270");
            this.Manager.Comment("reaching state \'S270\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp209;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp209);
            this.Manager.AddReturn(ReadConfigInfo, null, temp209);
            this.Manager.Comment("reaching state \'S271\'");
            int temp210 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS270ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS270ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS270ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS270ReadConfigChecker3)));
            if ((temp210 == 0)) {
                NegotiateTestCaseS183();
                goto label144;
            }
            if ((temp210 == 1)) {
                NegotiateTestCaseS217();
                goto label144;
            }
            if ((temp210 == 2)) {
                this.Manager.Comment("reaching state \'S272\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S276\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS270NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S277\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "SMB 2.???",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                    this.Manager.Comment("reaching state \'S278\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S279\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S280\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S281\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS270NegotiateResponseChecker)));
                }
                goto label144;
            }
            if ((temp210 == 3)) {
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S284\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S285\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S286\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS270NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S287\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 1.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S288\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S289\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S290\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S291\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS270NegotiateResponseChecker1)));
                }
                goto label144;
            }
            throw new InvalidOperationException("never reached");
        label144:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS270ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S271");
        }
        
        private void NegotiateTestCaseS270ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S271");
        }
        
        private void NegotiateTestCaseS270ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S271");
        }
        
        private void NegotiateTestCaseS270NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S276");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S276");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS270ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S271");
        }
        
        private void NegotiateTestCaseS270NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        #endregion
        
        #region Test Starting in S292
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS292() {
            this.Manager.BeginTest("NegotiateTestCaseS292");
            this.Manager.Comment("reaching state \'S292\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp211;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp211);
            this.Manager.AddReturn(ReadConfigInfo, null, temp211);
            this.Manager.Comment("reaching state \'S293\'");
            int temp212 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS292ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS292ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS292ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS292ReadConfigChecker3)));
            if ((temp212 == 0)) {
                NegotiateTestCaseS183();
                goto label145;
            }
            if ((temp212 == 1)) {
                NegotiateTestCaseS217();
                goto label145;
            }
            if ((temp212 == 2)) {
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S298\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS292NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S299\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                    this.Manager.Comment("reaching state \'S300\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S301\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S302\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S303\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS292NegotiateResponseChecker)));
                }
                goto label145;
            }
            if ((temp212 == 3)) {
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                this.Manager.Comment("reaching state \'S307\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S308\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS292NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S309\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                    this.Manager.Comment("reaching state \'S310\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S311\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S312\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S313\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS292NegotiateResponseChecker1)));
                }
                goto label145;
            }
            throw new InvalidOperationException("never reached");
        label145:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS292ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S293");
        }
        
        private void NegotiateTestCaseS292ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S293");
        }
        
        private void NegotiateTestCaseS292ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S293");
        }
        
        private void NegotiateTestCaseS292NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S298");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S298");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS292ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S293");
        }
        
        private void NegotiateTestCaseS292NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S308");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S308");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        #endregion
        
        #region Test Starting in S314
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS314() {
            this.Manager.BeginTest("NegotiateTestCaseS314");
            this.Manager.Comment("reaching state \'S314\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp213;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp213);
            this.Manager.AddReturn(ReadConfigInfo, null, temp213);
            this.Manager.Comment("reaching state \'S315\'");
            int temp214 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS314ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS314ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS314ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS314ReadConfigChecker3)));
            if ((temp214 == 0)) {
                NegotiateTestCaseS183();
                goto label146;
            }
            if ((temp214 == 1)) {
                NegotiateTestCaseS217();
                goto label146;
            }
            if ((temp214 == 2)) {
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S317\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S318\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S320\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS314NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S321\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S322\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S323\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S324\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S325\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS314NegotiateResponseChecker)));
                }
                goto label146;
            }
            if ((temp214 == 3)) {
                this.Manager.Comment("reaching state \'S326\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S327\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S328\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                this.Manager.Comment("reaching state \'S329\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S330\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS314NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S331\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S332\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S333\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S334\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S335\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS314NegotiateResponseChecker1)));
                }
                goto label146;
            }
            throw new InvalidOperationException("never reached");
        label146:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS314ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S315");
        }
        
        private void NegotiateTestCaseS314ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S315");
        }
        
        private void NegotiateTestCaseS314ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S315");
        }
        
        private void NegotiateTestCaseS314NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S320");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S320");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS314ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S315");
        }
        
        private void NegotiateTestCaseS314NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        #endregion
        
        #region Test Starting in S336
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS336() {
            this.Manager.BeginTest("NegotiateTestCaseS336");
            this.Manager.Comment("reaching state \'S336\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp215;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp215);
            this.Manager.AddReturn(ReadConfigInfo, null, temp215);
            this.Manager.Comment("reaching state \'S337\'");
            int temp216 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS336ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS336ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS336ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS336ReadConfigChecker3)));
            if ((temp216 == 0)) {
                NegotiateTestCaseS183();
                goto label147;
            }
            if ((temp216 == 1)) {
                NegotiateTestCaseS217();
                goto label147;
            }
            if ((temp216 == 2)) {
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S340\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S342\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS336NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S343\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S344\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S345\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S346\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S347\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS336NegotiateResponseChecker)));
                }
                goto label147;
            }
            if ((temp216 == 3)) {
                this.Manager.Comment("reaching state \'S348\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                        " family, processing MUST continue as specified in 3.3.5.3.2.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S351\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S352\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS336NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S353\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S354\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S355\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S356\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S357\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS336NegotiateResponseChecker1)));
                }
                goto label147;
            }
            throw new InvalidOperationException("never reached");
        label147:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS336ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S337");
        }
        
        private void NegotiateTestCaseS336ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S337");
        }
        
        private void NegotiateTestCaseS336ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S337");
        }
        
        private void NegotiateTestCaseS336NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S342");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S342");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS336ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S337");
        }
        
        private void NegotiateTestCaseS336NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S352");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S352");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect family, processing MUST continue as specified in 3.3.5.3.2."", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                    " family, processing MUST continue as specified in 3.3.5.3.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S358
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS358() {
            this.Manager.BeginTest("NegotiateTestCaseS358");
            this.Manager.Comment("reaching state \'S358\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp217;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp217);
            this.Manager.AddReturn(ReadConfigInfo, null, temp217);
            this.Manager.Comment("reaching state \'S359\'");
            int temp218 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS358ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS358ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS358ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS358ReadConfigChecker3)));
            if ((temp218 == 0)) {
                NegotiateTestCaseS183();
                goto label148;
            }
            if ((temp218 == 1)) {
                NegotiateTestCaseS217();
                goto label148;
            }
            if ((temp218 == 2)) {
                this.Manager.Comment("reaching state \'S360\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S361\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S362\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S363\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S364\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS358NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S365\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S366\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S367\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S368\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S369\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS358NegotiateResponseChecker)));
                }
                goto label148;
            }
            if ((temp218 == 3)) {
                this.Manager.Comment("reaching state \'S370\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S371\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S372\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                        " family, processing MUST continue as specified in 3.3.5.3.2.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S373\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S374\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS358NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S375\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S376\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S377\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S378\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S379\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS358NegotiateResponseChecker1)));
                }
                goto label148;
            }
            throw new InvalidOperationException("never reached");
        label148:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS358ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S359");
        }
        
        private void NegotiateTestCaseS358ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S359");
        }
        
        private void NegotiateTestCaseS358ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S359");
        }
        
        private void NegotiateTestCaseS358NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S364");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS358ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S359");
        }
        
        private void NegotiateTestCaseS358NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S374");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S374");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect family, processing MUST continue as specified in 3.3.5.3.2."", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                    " family, processing MUST continue as specified in 3.3.5.3.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S380
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS380() {
            this.Manager.BeginTest("NegotiateTestCaseS380");
            this.Manager.Comment("reaching state \'S380\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp219;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp219);
            this.Manager.AddReturn(ReadConfigInfo, null, temp219);
            this.Manager.Comment("reaching state \'S381\'");
            int temp220 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS380ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS380ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS380ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS380ReadConfigChecker3)));
            if ((temp220 == 0)) {
                NegotiateTestCaseS183();
                goto label149;
            }
            if ((temp220 == 1)) {
                NegotiateTestCaseS217();
                goto label149;
            }
            if ((temp220 == 2)) {
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S386\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS380NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S387\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S388\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S389\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S390\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S391\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS380NegotiateResponseChecker)));
                }
                goto label149;
            }
            if ((temp220 == 3)) {
                this.Manager.Comment("reaching state \'S392\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S393\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S394\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                        " family, processing MUST continue as specified in 3.3.5.3.2.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is not present in the dialect list and the se" +
                        "rver does not implement SMB, the server MUST disconnect the connection, as speci" +
                        "fied in section 3.3.7.1, without sending a response.\"");
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS395();
                goto label149;
            }
            throw new InvalidOperationException("never reached");
        label149:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS380ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S381");
        }
        
        private void NegotiateTestCaseS380ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S381");
        }
        
        private void NegotiateTestCaseS380ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S381");
        }
        
        private void NegotiateTestCaseS380NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S386");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S386");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS380ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S381");
        }
        
        private void NegotiateTestCaseS395() {
            this.Manager.Comment("reaching state \'S395\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ComNegotiateRequestInfo, null, new ComNegotiateRequestDelegate1(this.NegotiateTestCaseS380ComNegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S396\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S397\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S398\'");
        }
        
        private void NegotiateTestCaseS380ComNegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
        }
        #endregion
        
        #region Test Starting in S399
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS399() {
            this.Manager.BeginTest("NegotiateTestCaseS399");
            this.Manager.Comment("reaching state \'S399\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp221;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp221);
            this.Manager.AddReturn(ReadConfigInfo, null, temp221);
            this.Manager.Comment("reaching state \'S400\'");
            int temp222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS399ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS399ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS399ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS399ReadConfigChecker3)));
            if ((temp222 == 0)) {
                NegotiateTestCaseS183();
                goto label150;
            }
            if ((temp222 == 1)) {
                NegotiateTestCaseS217();
                goto label150;
            }
            if ((temp222 == 2)) {
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S402\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S405\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS399NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S406\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S407\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S408\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S409\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S410\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS399NegotiateResponseChecker)));
                }
                goto label150;
            }
            if ((temp222 == 3)) {
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S412\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S413\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 1.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                        " family, processing MUST continue as specified in 3.3.5.3.2.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is not present in the dialect list and the se" +
                        "rver does not implement SMB, the server MUST disconnect the connection, as speci" +
                        "fied in section 3.3.7.1, without sending a response.\"");
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS414();
                goto label150;
            }
            throw new InvalidOperationException("never reached");
        label150:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS399ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S400");
        }
        
        private void NegotiateTestCaseS399ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S400");
        }
        
        private void NegotiateTestCaseS399ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S400");
        }
        
        private void NegotiateTestCaseS399NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS399ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S400");
        }
        
        private void NegotiateTestCaseS414() {
            this.Manager.Comment("reaching state \'S414\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ComNegotiateRequestInfo, null, new ComNegotiateRequestDelegate1(this.NegotiateTestCaseS399ComNegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S415\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S416\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S417\'");
        }
        
        private void NegotiateTestCaseS399ComNegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
        }
        #endregion
        
        #region Test Starting in S418
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS418() {
            this.Manager.BeginTest("NegotiateTestCaseS418");
            this.Manager.Comment("reaching state \'S418\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp223;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp223);
            this.Manager.AddReturn(ReadConfigInfo, null, temp223);
            this.Manager.Comment("reaching state \'S419\'");
            int temp224 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS418ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS418ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS418ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS418ReadConfigChecker3)));
            if ((temp224 == 0)) {
                NegotiateTestCaseS183();
                goto label151;
            }
            if ((temp224 == 1)) {
                NegotiateTestCaseS217();
                goto label151;
            }
            if ((temp224 == 2)) {
                this.Manager.Comment("reaching state \'S420\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S421\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S422\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.???",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                        "MB2 NEGOTIATE Response as specified in 2.2.4\"");
                this.Manager.Checkpoint("\"[TestInfo] \"SMB 2.???\" is present in the dialects provided\"");
                this.Manager.Comment("reaching state \'S423\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S424\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS418NegotiateResponseChecker))) != -1)) {
                    NegotiateTestCaseS425();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS418NegotiateResponseChecker)));
                }
                goto label151;
            }
            if ((temp224 == 3)) {
                this.Manager.Comment("reaching state \'S509\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S510\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S511\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                        " family, processing MUST continue as specified in 3.3.5.3.2.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is not present in the dialect list and the se" +
                        "rver does not implement SMB, the server MUST disconnect the connection, as speci" +
                        "fied in section 3.3.7.1, without sending a response.\"");
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS512();
                goto label151;
            }
            throw new InvalidOperationException("never reached");
        label151:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS418ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S419");
        }
        
        private void NegotiateTestCaseS418ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S419");
        }
        
        private void NegotiateTestCaseS418ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S419");
        }
        
        private void NegotiateTestCaseS418NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S424");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S424");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an SMB2 NEGOTIATE Response as specified in 2.2.4."", ""[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF"", ""[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is present, the server MUST respond with an S" +
                    "MB2 NEGOTIATE Response as specified in 2.2.4.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: DialectRevision MUST be set to 0x02FF\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Connection.NegotiateDialect MUST be set to 0x02FF, and the " +
                    "response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS418ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S419");
        }
        
        private void NegotiateTestCaseS512() {
            this.Manager.Comment("reaching state \'S512\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ComNegotiateRequestInfo, null, new ComNegotiateRequestDelegate1(this.NegotiateTestCaseS418ComNegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S513\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S514\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S515\'");
        }
        
        private void NegotiateTestCaseS418ComNegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
        }
        #endregion
        
        #region Test Starting in S516
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS516() {
            this.Manager.BeginTest("NegotiateTestCaseS516");
            this.Manager.Comment("reaching state \'S516\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp225;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp225);
            this.Manager.AddReturn(ReadConfigInfo, null, temp225);
            this.Manager.Comment("reaching state \'S517\'");
            int temp226 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS516ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS516ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS516ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS516ReadConfigChecker3)));
            if ((temp226 == 0)) {
                NegotiateTestCaseS183();
                goto label152;
            }
            if ((temp226 == 1)) {
                NegotiateTestCaseS217();
                goto label152;
            }
            if ((temp226 == 2)) {
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S520\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S521\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S522\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS516NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S523\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S524\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S525\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S526\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S527\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS516NegotiateResponseChecker)));
                }
                goto label152;
            }
            if ((temp226 == 3)) {
                this.Manager.Comment("reaching state \'S528\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S529\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S530\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        "SMB 2.???",
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                        " family, processing MUST continue as specified in 3.3.5.3.2.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S531\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S532\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS516NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S533\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S534\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S535\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S536\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S537\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS516NegotiateResponseChecker1)));
                }
                goto label152;
            }
            throw new InvalidOperationException("never reached");
        label152:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS516ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S517");
        }
        
        private void NegotiateTestCaseS516ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S517");
        }
        
        private void NegotiateTestCaseS516ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S517");
        }
        
        private void NegotiateTestCaseS516NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S522");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S522");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS516ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S517");
        }
        
        private void NegotiateTestCaseS516NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S532");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S532");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect family, processing MUST continue as specified in 3.3.5.3.2."", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the server does not implement the SMB 2.1 or 3.x dialect" +
                    " family, processing MUST continue as specified in 3.3.5.3.2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S538
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS538() {
            this.Manager.BeginTest("NegotiateTestCaseS538");
            this.Manager.Comment("reaching state \'S538\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp227;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp227);
            this.Manager.AddReturn(ReadConfigInfo, null, temp227);
            this.Manager.Comment("reaching state \'S539\'");
            int temp233 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS538ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS538ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS538ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS538ReadConfigChecker3)));
            if ((temp233 == 0)) {
                NegotiateTestCaseS183();
                goto label158;
            }
            if ((temp233 == 1)) {
                NegotiateTestCaseS217();
                goto label158;
            }
            if ((temp233 == 2)) {
                this.Manager.Comment("reaching state \'S540\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S541\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S542\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S543\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S544\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S545\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S546\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S547\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S548\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S549\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker)));
                }
                goto label158;
            }
            if ((temp233 == 3)) {
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S551\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S552\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS553();
                goto label158;
            }
            throw new InvalidOperationException("never reached");
        label158:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS538ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S539");
        }
        
        private void NegotiateTestCaseS538ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S539");
        }
        
        private void NegotiateTestCaseS538ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S539");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S544");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S544");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS538ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S539");
        }
        
        private void NegotiateTestCaseS553() {
            this.Manager.Comment("reaching state \'S553\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS538NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S554\'");
            int temp232 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker27)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker29)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker30)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker31)));
            if ((temp232 == 0)) {
                this.Manager.Comment("reaching state \'S555\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                this.Manager.Comment("reaching state \'S556\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S557\'");
                int temp231 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker26)));
                if ((temp231 == 0)) {
                    this.Manager.Comment("reaching state \'S558\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Comment("reaching state \'S559\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S560\'");
                    int temp230 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker21)));
                    if ((temp230 == 0)) {
                        this.Manager.Comment("reaching state \'S561\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                        this.Manager.Comment("reaching state \'S562\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S563\'");
                        int temp229 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker16)));
                        if ((temp229 == 0)) {
                            this.Manager.Comment("reaching state \'S564\'");
                            this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Rep"}, new object[] {
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                            this.Manager.Comment("reaching state \'S565\'");
                            this.Manager.Comment("checking step \'return NegotiateRequest\'");
                            this.Manager.Comment("reaching state \'S566\'");
                            int temp228 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker11)));
                            if ((temp228 == 0)) {
                                this.Manager.Comment("reaching state \'S567\'");
                                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21])\'");
                                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Rep"}, new object[] {
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})}));
                                this.Manager.Comment("reaching state \'S568\'");
                                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                this.Manager.Comment("reaching state \'S569\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S570\'");
                                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Rep"}, new object[] {
                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                "Head",
                                                                "Tail"}, new object[] {
                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                            "1, and not reply.\"");
                                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                                    this.Manager.Comment("reaching state \'S571\'");
                                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                                    this.Manager.Comment("reaching state \'S572\'");
                                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                                    this.INegotiateAdapterInstance.ExpectDisconnect();
                                    this.Manager.Comment("reaching state \'S573\'");
                                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                                    this.Manager.Comment("reaching state \'S574\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker6)));
                                }
                                goto label153;
                            }
                            if ((temp228 == 1)) {
                                NegotiateTestCaseS575();
                                goto label153;
                            }
                            if ((temp228 == 2)) {
                                NegotiateTestCaseS575();
                                goto label153;
                            }
                            if ((temp228 == 3)) {
                                NegotiateTestCaseS575();
                                goto label153;
                            }
                            if ((temp228 == 4)) {
                                NegotiateTestCaseS575();
                                goto label153;
                            }
                            if ((temp228 == 5)) {
                                NegotiateTestCaseS575();
                                goto label153;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker11)));
                        label153:
;
                            goto label154;
                        }
                        if ((temp229 == 1)) {
                            NegotiateTestCaseS575();
                            goto label154;
                        }
                        if ((temp229 == 2)) {
                            NegotiateTestCaseS575();
                            goto label154;
                        }
                        if ((temp229 == 3)) {
                            NegotiateTestCaseS575();
                            goto label154;
                        }
                        if ((temp229 == 4)) {
                            NegotiateTestCaseS575();
                            goto label154;
                        }
                        if ((temp229 == 5)) {
                            NegotiateTestCaseS575();
                            goto label154;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker16)));
                    label154:
;
                        goto label155;
                    }
                    if ((temp230 == 1)) {
                        NegotiateTestCaseS575();
                        goto label155;
                    }
                    if ((temp230 == 2)) {
                        NegotiateTestCaseS575();
                        goto label155;
                    }
                    if ((temp230 == 3)) {
                        NegotiateTestCaseS575();
                        goto label155;
                    }
                    if ((temp230 == 4)) {
                        NegotiateTestCaseS575();
                        goto label155;
                    }
                    if ((temp230 == 5)) {
                        NegotiateTestCaseS575();
                        goto label155;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker21)));
                label155:
;
                    goto label156;
                }
                if ((temp231 == 1)) {
                    NegotiateTestCaseS575();
                    goto label156;
                }
                if ((temp231 == 2)) {
                    NegotiateTestCaseS575();
                    goto label156;
                }
                if ((temp231 == 3)) {
                    NegotiateTestCaseS575();
                    goto label156;
                }
                if ((temp231 == 4)) {
                    NegotiateTestCaseS575();
                    goto label156;
                }
                if ((temp231 == 5)) {
                    NegotiateTestCaseS575();
                    goto label156;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker24)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker25)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker26)));
            label156:
;
                goto label157;
            }
            if ((temp232 == 1)) {
                NegotiateTestCaseS575();
                goto label157;
            }
            if ((temp232 == 2)) {
                NegotiateTestCaseS575();
                goto label157;
            }
            if ((temp232 == 3)) {
                NegotiateTestCaseS575();
                goto label157;
            }
            if ((temp232 == 4)) {
                NegotiateTestCaseS575();
                goto label157;
            }
            if ((temp232 == 5)) {
                this.Manager.Comment("reaching state \'S580\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                this.Manager.AddReturn(ComNegotiateRequestInfo, null);
                NegotiateTestCaseS512();
                goto label157;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker27)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker28)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker29)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker30)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS538NegotiateResponseChecker31)));
        label157:
;
        }
        
        private void NegotiateTestCaseS538NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S554");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S560");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S560");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S563");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S563");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S569");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S569");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS575() {
            this.Manager.Comment("reaching state \'S575\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 2.002",
                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
            this.Manager.Comment("reaching state \'S576\'");
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
            this.Manager.Comment("reaching state \'S577\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S578\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S579\'");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S566");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S563");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S563");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S563");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S563");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S563");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S563");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S563");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S563");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S563");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S563");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S560");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S560");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S560");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S560");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S560");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S560");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S560");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S560");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S560");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S560");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S554");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker28(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S554");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker29(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S554");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker30(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S554");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS538NegotiateResponseChecker31(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_INVALID_PARAMETER,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of NegotiateResponse, state S554");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the server MUST fail the request with STATUS_INVALID_PARAMETER"", ""[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If the DialectCount of the SMB2 NEGOTIATE Request is 0, the s" +
                    "erver MUST fail the request with STATUS_INVALID_PARAMETER\"");
            this.Manager.Checkpoint("\"[TestInfo] DialectCount of the SMB2 NEGOTIATE Request is 0\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        #endregion
        
        #region Test Starting in S581
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS581() {
            this.Manager.BeginTest("NegotiateTestCaseS581");
            this.Manager.Comment("reaching state \'S581\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp234;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp234);
            this.Manager.AddReturn(ReadConfigInfo, null, temp234);
            this.Manager.Comment("reaching state \'S582\'");
            int temp239 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS581ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS581ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS581ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS581ReadConfigChecker3)));
            if ((temp239 == 0)) {
                NegotiateTestCaseS183();
                goto label163;
            }
            if ((temp239 == 1)) {
                NegotiateTestCaseS217();
                goto label163;
            }
            if ((temp239 == 2)) {
                this.Manager.Comment("reaching state \'S583\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S584\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S585\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                "Head",
                                                                                "Tail"}, new object[] {
                                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                this.Manager.Comment("reaching state \'S586\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S587\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S588\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S589\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S590\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S591\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S592\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker)));
                }
                goto label163;
            }
            if ((temp239 == 3)) {
                this.Manager.Comment("reaching state \'S593\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S594\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S595\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS596();
                goto label163;
            }
            throw new InvalidOperationException("never reached");
        label163:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS581ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S582");
        }
        
        private void NegotiateTestCaseS581ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S582");
        }
        
        private void NegotiateTestCaseS581ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S582");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S587");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S587");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS581ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S582");
        }
        
        private void NegotiateTestCaseS596() {
            this.Manager.Comment("reaching state \'S596\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS581NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S597\'");
            int temp238 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker24)));
            if ((temp238 == 0)) {
                this.Manager.Comment("reaching state \'S598\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S599\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S600\'");
                int temp237 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker19)));
                if ((temp237 == 0)) {
                    this.Manager.Comment("reaching state \'S601\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S602\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S603\'");
                    int temp236 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker14)));
                    if ((temp236 == 0)) {
                        this.Manager.Comment("reaching state \'S604\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S605\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S606\'");
                        int temp235 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker9)));
                        if ((temp235 == 0)) {
                            NegotiateTestCaseS607();
                            goto label159;
                        }
                        if ((temp235 == 1)) {
                            NegotiateTestCaseS608();
                            goto label159;
                        }
                        if ((temp235 == 2)) {
                            NegotiateTestCaseS608();
                            goto label159;
                        }
                        if ((temp235 == 3)) {
                            NegotiateTestCaseS608();
                            goto label159;
                        }
                        if ((temp235 == 4)) {
                            NegotiateTestCaseS608();
                            goto label159;
                        }
                        if ((temp235 == 5)) {
                            NegotiateTestCaseS608();
                            goto label159;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker9)));
                    label159:
;
                        goto label160;
                    }
                    if ((temp236 == 1)) {
                        NegotiateTestCaseS608();
                        goto label160;
                    }
                    if ((temp236 == 2)) {
                        NegotiateTestCaseS608();
                        goto label160;
                    }
                    if ((temp236 == 3)) {
                        NegotiateTestCaseS608();
                        goto label160;
                    }
                    if ((temp236 == 4)) {
                        NegotiateTestCaseS608();
                        goto label160;
                    }
                    if ((temp236 == 5)) {
                        NegotiateTestCaseS608();
                        goto label160;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker14)));
                label160:
;
                    goto label161;
                }
                if ((temp237 == 1)) {
                    NegotiateTestCaseS608();
                    goto label161;
                }
                if ((temp237 == 2)) {
                    NegotiateTestCaseS608();
                    goto label161;
                }
                if ((temp237 == 3)) {
                    NegotiateTestCaseS608();
                    goto label161;
                }
                if ((temp237 == 4)) {
                    NegotiateTestCaseS608();
                    goto label161;
                }
                if ((temp237 == 5)) {
                    NegotiateTestCaseS608();
                    goto label161;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker19)));
            label161:
;
                goto label162;
            }
            if ((temp238 == 1)) {
                NegotiateTestCaseS607();
                goto label162;
            }
            if ((temp238 == 2)) {
                NegotiateTestCaseS608();
                goto label162;
            }
            if ((temp238 == 3)) {
                NegotiateTestCaseS608();
                goto label162;
            }
            if ((temp238 == 4)) {
                NegotiateTestCaseS608();
                goto label162;
            }
            if ((temp238 == 5)) {
                NegotiateTestCaseS608();
                goto label162;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS581NegotiateResponseChecker24)));
        label162:
;
        }
        
        private void NegotiateTestCaseS581NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S600");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S603");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S606");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S606");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS607() {
            this.Manager.Comment("reaching state \'S607\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
            this.Manager.AddReturn(NegotiateRequestInfo, null);
            NegotiateTestCaseS553();
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S606");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S606");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS608() {
            this.Manager.Comment("reaching state \'S608\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 2.002",
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    "SMB 2.???",
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
            this.Manager.Comment("reaching state \'S609\'");
            this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
            this.Manager.Comment("reaching state \'S610\'");
            this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
            this.INegotiateAdapterInstance.ExpectDisconnect();
            this.Manager.Comment("reaching state \'S611\'");
            this.Manager.Comment("checking step \'return ExpectDisconnect\'");
            this.Manager.Comment("reaching state \'S612\'");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S606");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S606");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S606");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S606");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S606");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S606");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S606");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S606");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S603");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S603");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S603");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S603");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S603");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S600");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S600");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S600");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S600");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S600");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS581NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        #endregion
        
        #region Test Starting in S613
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS613() {
            this.Manager.BeginTest("NegotiateTestCaseS613");
            this.Manager.Comment("reaching state \'S613\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp240;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp240);
            this.Manager.AddReturn(ReadConfigInfo, null, temp240);
            this.Manager.Comment("reaching state \'S614\'");
            int temp245 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS613ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS613ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS613ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS613ReadConfigChecker3)));
            if ((temp245 == 0)) {
                NegotiateTestCaseS183();
                goto label168;
            }
            if ((temp245 == 1)) {
                NegotiateTestCaseS217();
                goto label168;
            }
            if ((temp245 == 2)) {
                this.Manager.Comment("reaching state \'S615\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S616\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S617\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S618\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S619\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S620\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "SMB 2.???",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                    this.Manager.Comment("reaching state \'S621\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S622\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S623\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S624\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker)));
                }
                goto label168;
            }
            if ((temp245 == 3)) {
                this.Manager.Comment("reaching state \'S625\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S626\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S627\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS628();
                goto label168;
            }
            throw new InvalidOperationException("never reached");
        label168:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS613ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S614");
        }
        
        private void NegotiateTestCaseS613ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S614");
        }
        
        private void NegotiateTestCaseS613ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S614");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S619");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S619");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS613ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S614");
        }
        
        private void NegotiateTestCaseS628() {
            this.Manager.Comment("reaching state \'S628\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS613NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S629\'");
            int temp244 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker24)));
            if ((temp244 == 0)) {
                this.Manager.Comment("reaching state \'S630\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S631\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S632\'");
                int temp243 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker19)));
                if ((temp243 == 0)) {
                    this.Manager.Comment("reaching state \'S633\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S634\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S635\'");
                    int temp242 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker14)));
                    if ((temp242 == 0)) {
                        this.Manager.Comment("reaching state \'S636\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S637\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S638\'");
                        int temp241 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker9)));
                        if ((temp241 == 0)) {
                            NegotiateTestCaseS639();
                            goto label164;
                        }
                        if ((temp241 == 1)) {
                            NegotiateTestCaseS640();
                            goto label164;
                        }
                        if ((temp241 == 2)) {
                            NegotiateTestCaseS640();
                            goto label164;
                        }
                        if ((temp241 == 3)) {
                            NegotiateTestCaseS640();
                            goto label164;
                        }
                        if ((temp241 == 4)) {
                            NegotiateTestCaseS640();
                            goto label164;
                        }
                        if ((temp241 == 5)) {
                            NegotiateTestCaseS640();
                            goto label164;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker9)));
                    label164:
;
                        goto label165;
                    }
                    if ((temp242 == 1)) {
                        NegotiateTestCaseS640();
                        goto label165;
                    }
                    if ((temp242 == 2)) {
                        NegotiateTestCaseS640();
                        goto label165;
                    }
                    if ((temp242 == 3)) {
                        NegotiateTestCaseS640();
                        goto label165;
                    }
                    if ((temp242 == 4)) {
                        NegotiateTestCaseS640();
                        goto label165;
                    }
                    if ((temp242 == 5)) {
                        NegotiateTestCaseS640();
                        goto label165;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker14)));
                label165:
;
                    goto label166;
                }
                if ((temp243 == 1)) {
                    NegotiateTestCaseS640();
                    goto label166;
                }
                if ((temp243 == 2)) {
                    NegotiateTestCaseS640();
                    goto label166;
                }
                if ((temp243 == 3)) {
                    NegotiateTestCaseS640();
                    goto label166;
                }
                if ((temp243 == 4)) {
                    NegotiateTestCaseS640();
                    goto label166;
                }
                if ((temp243 == 5)) {
                    NegotiateTestCaseS640();
                    goto label166;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker19)));
            label166:
;
                goto label167;
            }
            if ((temp244 == 1)) {
                NegotiateTestCaseS640();
                goto label167;
            }
            if ((temp244 == 2)) {
                NegotiateTestCaseS640();
                goto label167;
            }
            if ((temp244 == 3)) {
                NegotiateTestCaseS640();
                goto label167;
            }
            if ((temp244 == 4)) {
                NegotiateTestCaseS640();
                goto label167;
            }
            if ((temp244 == 5)) {
                this.Manager.Comment("reaching state \'S641\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S642\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S643\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker25))) != -1)) {
                    this.Manager.Comment("reaching state \'S644\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S645\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S646\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S647\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S648\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker25)));
                }
                goto label167;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS613NegotiateResponseChecker24)));
        label167:
;
        }
        
        private void NegotiateTestCaseS613NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S632");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S632");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S635");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S635");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S638");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS639() {
            this.Manager.Comment("reaching state \'S639\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.AddReturn(NegotiateRequestInfo, null);
            NegotiateTestCaseS596();
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S638");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS640() {
            this.Manager.Comment("reaching state \'S640\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 1.002",
                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
            this.Manager.AddReturn(ComNegotiateRequestInfo, null);
            NegotiateTestCaseS414();
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S638");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S638");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S638");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S638");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S638");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S635");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S635");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S635");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S635");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S635");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S635");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S635");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S635");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S635");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S635");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S632");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S632");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S632");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S632");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S632");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S632");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S632");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S632");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S632");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S632");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S629");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S629");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS613NegotiateResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S643");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S643");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        #endregion
        
        #region Test Starting in S649
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS649() {
            this.Manager.BeginTest("NegotiateTestCaseS649");
            this.Manager.Comment("reaching state \'S649\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp246;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp246);
            this.Manager.AddReturn(ReadConfigInfo, null, temp246);
            this.Manager.Comment("reaching state \'S650\'");
            int temp251 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS649ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS649ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS649ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS649ReadConfigChecker3)));
            if ((temp251 == 0)) {
                NegotiateTestCaseS183();
                goto label173;
            }
            if ((temp251 == 1)) {
                NegotiateTestCaseS217();
                goto label173;
            }
            if ((temp251 == 2)) {
                this.Manager.Comment("reaching state \'S651\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S652\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S653\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S654\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S655\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S656\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                    this.Manager.Comment("reaching state \'S657\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S658\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S659\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S660\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker)));
                }
                goto label173;
            }
            if ((temp251 == 3)) {
                this.Manager.Comment("reaching state \'S661\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S662\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S663\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS664();
                goto label173;
            }
            throw new InvalidOperationException("never reached");
        label173:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS649ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S650");
        }
        
        private void NegotiateTestCaseS649ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S650");
        }
        
        private void NegotiateTestCaseS649ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S650");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S655");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S655");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS649ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S650");
        }
        
        private void NegotiateTestCaseS664() {
            this.Manager.Comment("reaching state \'S664\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS649NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S665\'");
            int temp250 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker24)));
            if ((temp250 == 0)) {
                this.Manager.Comment("reaching state \'S666\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S667\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S668\'");
                int temp249 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker19)));
                if ((temp249 == 0)) {
                    this.Manager.Comment("reaching state \'S669\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S670\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S671\'");
                    int temp248 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker14)));
                    if ((temp248 == 0)) {
                        this.Manager.Comment("reaching state \'S672\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S673\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S674\'");
                        int temp247 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker9)));
                        if ((temp247 == 0)) {
                            NegotiateTestCaseS675();
                            goto label169;
                        }
                        if ((temp247 == 1)) {
                            NegotiateTestCaseS676();
                            goto label169;
                        }
                        if ((temp247 == 2)) {
                            NegotiateTestCaseS676();
                            goto label169;
                        }
                        if ((temp247 == 3)) {
                            NegotiateTestCaseS676();
                            goto label169;
                        }
                        if ((temp247 == 4)) {
                            NegotiateTestCaseS676();
                            goto label169;
                        }
                        if ((temp247 == 5)) {
                            NegotiateTestCaseS676();
                            goto label169;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker9)));
                    label169:
;
                        goto label170;
                    }
                    if ((temp248 == 1)) {
                        NegotiateTestCaseS676();
                        goto label170;
                    }
                    if ((temp248 == 2)) {
                        NegotiateTestCaseS676();
                        goto label170;
                    }
                    if ((temp248 == 3)) {
                        NegotiateTestCaseS676();
                        goto label170;
                    }
                    if ((temp248 == 4)) {
                        NegotiateTestCaseS676();
                        goto label170;
                    }
                    if ((temp248 == 5)) {
                        NegotiateTestCaseS676();
                        goto label170;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker11)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker14)));
                label170:
;
                    goto label171;
                }
                if ((temp249 == 1)) {
                    NegotiateTestCaseS676();
                    goto label171;
                }
                if ((temp249 == 2)) {
                    NegotiateTestCaseS676();
                    goto label171;
                }
                if ((temp249 == 3)) {
                    NegotiateTestCaseS676();
                    goto label171;
                }
                if ((temp249 == 4)) {
                    NegotiateTestCaseS676();
                    goto label171;
                }
                if ((temp249 == 5)) {
                    NegotiateTestCaseS676();
                    goto label171;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker17)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker19)));
            label171:
;
                goto label172;
            }
            if ((temp250 == 1)) {
                NegotiateTestCaseS675();
                goto label172;
            }
            if ((temp250 == 2)) {
                NegotiateTestCaseS676();
                goto label172;
            }
            if ((temp250 == 3)) {
                NegotiateTestCaseS676();
                goto label172;
            }
            if ((temp250 == 4)) {
                NegotiateTestCaseS676();
                goto label172;
            }
            if ((temp250 == 5)) {
                NegotiateTestCaseS676();
                goto label172;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker23)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS649NegotiateResponseChecker24)));
        label172:
;
        }
        
        private void NegotiateTestCaseS649NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S665");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S668");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S668");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S671");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S671");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS675() {
            this.Manager.Comment("reaching state \'S675\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.AddReturn(NegotiateRequestInfo, null);
            NegotiateTestCaseS628();
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS676() {
            this.Manager.Comment("reaching state \'S676\'");
            this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
            this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        "SMB 2.???",
                                        ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
            this.Manager.AddReturn(ComNegotiateRequestInfo, null);
            NegotiateTestCaseS395();
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S674");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S674");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S671");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S671");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S671");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S671");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S671");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S671");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S671");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S671");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S671");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S671");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S668");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S668");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S668");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S668");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S668");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S668");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S668");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S668");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S668");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S668");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S665");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S665");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S665");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S665");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS649NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S665");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S665");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        #endregion
        
        #region Test Starting in S677
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS677() {
            this.Manager.BeginTest("NegotiateTestCaseS677");
            this.Manager.Comment("reaching state \'S677\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp252;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp252);
            this.Manager.AddReturn(ReadConfigInfo, null, temp252);
            this.Manager.Comment("reaching state \'S678\'");
            int temp257 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS677ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS677ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS677ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS677ReadConfigChecker3)));
            if ((temp257 == 0)) {
                NegotiateTestCaseS183();
                goto label178;
            }
            if ((temp257 == 1)) {
                NegotiateTestCaseS217();
                goto label178;
            }
            if ((temp257 == 2)) {
                this.Manager.Comment("reaching state \'S679\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S680\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S681\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S682\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S683\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S684\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S685\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S686\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S687\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S688\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker)));
                }
                goto label178;
            }
            if ((temp257 == 3)) {
                this.Manager.Comment("reaching state \'S689\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S690\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S691\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.AddReturn(NegotiateRequestInfo, null);
                NegotiateTestCaseS692();
                goto label178;
            }
            throw new InvalidOperationException("never reached");
        label178:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS677ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S678");
        }
        
        private void NegotiateTestCaseS677ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S678");
        }
        
        private void NegotiateTestCaseS677ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S678");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S683");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S683");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS677ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S678");
        }
        
        private void NegotiateTestCaseS692() {
            this.Manager.Comment("reaching state \'S692\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.NegotiateRequestInfo, null, new NegotiateRequestDelegate1(this.NegotiateTestCaseS677NegotiateRequestChecker)));
            this.Manager.Comment("reaching state \'S693\'");
            int temp256 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker24)));
            if ((temp256 == 0)) {
                NegotiateTestCaseS639();
                goto label177;
            }
            if ((temp256 == 1)) {
                NegotiateTestCaseS639();
                goto label177;
            }
            if ((temp256 == 2)) {
                NegotiateTestCaseS639();
                goto label177;
            }
            if ((temp256 == 3)) {
                NegotiateTestCaseS639();
                goto label177;
            }
            if ((temp256 == 4)) {
                this.Manager.Comment("reaching state \'S694\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S695\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S696\'");
                int temp255 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker11)));
                if ((temp255 == 0)) {
                    NegotiateTestCaseS639();
                    goto label176;
                }
                if ((temp255 == 1)) {
                    NegotiateTestCaseS639();
                    goto label176;
                }
                if ((temp255 == 2)) {
                    NegotiateTestCaseS639();
                    goto label176;
                }
                if ((temp255 == 3)) {
                    NegotiateTestCaseS639();
                    goto label176;
                }
                if ((temp255 == 4)) {
                    NegotiateTestCaseS639();
                    goto label176;
                }
                if ((temp255 == 5)) {
                    this.Manager.Comment("reaching state \'S697\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S698\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S699\'");
                    int temp254 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker17)));
                    if ((temp254 == 0)) {
                        NegotiateTestCaseS639();
                        goto label175;
                    }
                    if ((temp254 == 1)) {
                        NegotiateTestCaseS639();
                        goto label175;
                    }
                    if ((temp254 == 2)) {
                        NegotiateTestCaseS639();
                        goto label175;
                    }
                    if ((temp254 == 3)) {
                        NegotiateTestCaseS639();
                        goto label175;
                    }
                    if ((temp254 == 4)) {
                        NegotiateTestCaseS639();
                        goto label175;
                    }
                    if ((temp254 == 5)) {
                        this.Manager.Comment("reaching state \'S700\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                        this.Manager.Comment("reaching state \'S701\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S702\'");
                        int temp253 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker23)));
                        if ((temp253 == 0)) {
                            NegotiateTestCaseS639();
                            goto label174;
                        }
                        if ((temp253 == 1)) {
                            NegotiateTestCaseS639();
                            goto label174;
                        }
                        if ((temp253 == 2)) {
                            NegotiateTestCaseS639();
                            goto label174;
                        }
                        if ((temp253 == 3)) {
                            NegotiateTestCaseS639();
                            goto label174;
                        }
                        if ((temp253 == 4)) {
                            NegotiateTestCaseS639();
                            goto label174;
                        }
                        if ((temp253 == 5)) {
                            NegotiateTestCaseS703();
                            goto label174;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker18)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker19)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker20)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker21)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker22)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker23)));
                    label174:
;
                        goto label175;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker12)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker13)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker14)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker15)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker16)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker17)));
                label175:
;
                    goto label176;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker8)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker9)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker10)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker11)));
            label176:
;
                goto label177;
            }
            if ((temp256 == 5)) {
                NegotiateTestCaseS703();
                goto label177;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS677NegotiateResponseChecker24)));
        label177:
;
        }
        
        private void NegotiateTestCaseS677NegotiateRequestChecker() {
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S699");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S702");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S702");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS703() {
            this.Manager.Comment("reaching state \'S703\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.AddReturn(NegotiateRequestInfo, null);
            NegotiateTestCaseS664();
        }
        
        private void NegotiateTestCaseS677NegotiateResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S693");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        #endregion
        
        #region Test Starting in S704
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS704() {
            this.Manager.BeginTest("NegotiateTestCaseS704");
            this.Manager.Comment("reaching state \'S704\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp258;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp258);
            this.Manager.AddReturn(ReadConfigInfo, null, temp258);
            this.Manager.Comment("reaching state \'S705\'");
            int temp260 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS704ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS704ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS704ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS704ReadConfigChecker3)));
            if ((temp260 == 0)) {
                NegotiateTestCaseS183();
                goto label180;
            }
            if ((temp260 == 1)) {
                NegotiateTestCaseS217();
                goto label180;
            }
            if ((temp260 == 2)) {
                this.Manager.Comment("reaching state \'S706\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S707\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S708\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S709\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S710\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S711\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S712\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S713\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S714\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S715\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker)));
                }
                goto label180;
            }
            if ((temp260 == 3)) {
                this.Manager.Comment("reaching state \'S716\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S717\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S718\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S719\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S720\'");
                int temp259 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker9)));
                if ((temp259 == 0)) {
                    this.Manager.Comment("reaching state \'S721\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Comment("reaching state \'S722\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S723\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker2))) != -1)) {
                        this.Manager.Comment("reaching state \'S724\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                "Head",
                                                                "Tail"}, new object[] {
                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                            "Head",
                                                                            "Tail"}, new object[] {
                                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                        "Head",
                                                                                        "Tail"}, new object[] {
                                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                "1, and not reply.\"");
                        this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                        this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                        this.Manager.Comment("reaching state \'S725\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S726\'");
                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                        this.INegotiateAdapterInstance.ExpectDisconnect();
                        this.Manager.Comment("reaching state \'S727\'");
                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                        this.Manager.Comment("reaching state \'S728\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker2)));
                    }
                    goto label179;
                }
                if ((temp259 == 1)) {
                    this.Manager.Comment("reaching state \'S729\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30,Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                                    "Head",
                                                                                    "Tail"}, new object[] {
                                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})})}));
                    this.Manager.Comment("reaching state \'S730\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S731\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker4))) != -1)) {
                        this.Manager.Comment("reaching state \'S732\'");
                        this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                        this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Rep"}, new object[] {
                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                    "Head",
                                                    "Tail"}, new object[] {
                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                "Head",
                                                                "Tail"}, new object[] {
                                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                            "Head",
                                                                            "Tail"}, new object[] {
                                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                        this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                                "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                                "1, and not reply.\"");
                        this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                        this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                        this.Manager.Comment("reaching state \'S733\'");
                        this.Manager.Comment("checking step \'return NegotiateRequest\'");
                        this.Manager.Comment("reaching state \'S734\'");
                        this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                        this.INegotiateAdapterInstance.ExpectDisconnect();
                        this.Manager.Comment("reaching state \'S735\'");
                        this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                        this.Manager.Comment("reaching state \'S736\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker4)));
                    }
                    goto label179;
                }
                if ((temp259 == 2)) {
                    NegotiateTestCaseS737();
                    goto label179;
                }
                if ((temp259 == 3)) {
                    NegotiateTestCaseS737();
                    goto label179;
                }
                if ((temp259 == 4)) {
                    NegotiateTestCaseS738();
                    goto label179;
                }
                if ((temp259 == 5)) {
                    NegotiateTestCaseS738();
                    goto label179;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker1)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker6)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker7)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker9)));
            label179:
;
                goto label180;
            }
            throw new InvalidOperationException("never reached");
        label180:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS704ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S705");
        }
        
        private void NegotiateTestCaseS704ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S705");
        }
        
        private void NegotiateTestCaseS704ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S705");
        }
        
        private void NegotiateTestCaseS704NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS704ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S705");
        }
        
        private void NegotiateTestCaseS704NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S720");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S720");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS704NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S723");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S723");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS704NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S720");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S720");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS704NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S731");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S731");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS704NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S720");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S720");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS737() {
            this.Manager.Comment("reaching state \'S737\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.AddReturn(NegotiateRequestInfo, null);
            NegotiateTestCaseS692();
        }
        
        private void NegotiateTestCaseS704NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S720");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S720");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS704NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S720");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S720");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS738() {
            this.Manager.Comment("reaching state \'S738\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S739\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S740\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker8))) != -1)) {
                this.Manager.Comment("reaching state \'S741\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                        "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                        "1, and not reply.\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                this.Manager.Comment("reaching state \'S742\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S743\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S744\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S745\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS704NegotiateResponseChecker8)));
            }
        }
        
        private void NegotiateTestCaseS704NegotiateResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S740");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S740");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS704NegotiateResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S720");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S720");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        #endregion
        
        #region Test Starting in S746
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS746() {
            this.Manager.BeginTest("NegotiateTestCaseS746");
            this.Manager.Comment("reaching state \'S746\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp261;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp261);
            this.Manager.AddReturn(ReadConfigInfo, null, temp261);
            this.Manager.Comment("reaching state \'S747\'");
            int temp262 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS746ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS746ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS746ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS746ReadConfigChecker3)));
            if ((temp262 == 0)) {
                NegotiateTestCaseS189();
                goto label181;
            }
            if ((temp262 == 1)) {
                NegotiateTestCaseS217();
                goto label181;
            }
            if ((temp262 == 2)) {
                this.Manager.Comment("reaching state \'S748\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S749\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S750\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S751\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S752\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS746NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S753\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb30\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S754\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S755\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S756\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S757\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS746NegotiateResponseChecker)));
                }
                goto label181;
            }
            if ((temp262 == 3)) {
                this.Manager.Comment("reaching state \'S758\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S759\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S760\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S761\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S762\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS746NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S763\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S764\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S765\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S766\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S767\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS746NegotiateResponseChecker1)));
                }
                goto label181;
            }
            throw new InvalidOperationException("never reached");
        label181:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS746ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S747");
        }
        
        private void NegotiateTestCaseS746ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S747");
        }
        
        private void NegotiateTestCaseS746ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S747");
        }
        
        private void NegotiateTestCaseS746NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S752");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S752");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb30"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb30"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb30\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS746ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S747");
        }
        
        private void NegotiateTestCaseS746NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S762");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S762");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S768
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS768() {
            this.Manager.BeginTest("NegotiateTestCaseS768");
            this.Manager.Comment("reaching state \'S768\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp263;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp263);
            this.Manager.AddReturn(ReadConfigInfo, null, temp263);
            this.Manager.Comment("reaching state \'S769\'");
            int temp264 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS768ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS768ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS768ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS768ReadConfigChecker3)));
            if ((temp264 == 0)) {
                NegotiateTestCaseS189();
                goto label182;
            }
            if ((temp264 == 1)) {
                this.Manager.Comment("reaching state \'S770\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S771\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S772\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S773\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S774\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS768NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S775\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S776\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S777\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S778\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S779\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS768NegotiateResponseChecker)));
                }
                goto label182;
            }
            if ((temp264 == 2)) {
                this.Manager.Comment("reaching state \'S780\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S781\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S782\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S783\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S784\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS768NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S785\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                    this.Manager.Comment("reaching state \'S786\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S787\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S788\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S789\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS768NegotiateResponseChecker1)));
                }
                goto label182;
            }
            if ((temp264 == 3)) {
                NegotiateTestCaseS790();
                goto label182;
            }
            throw new InvalidOperationException("never reached");
        label182:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS768ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S769");
        }
        
        private void NegotiateTestCaseS768ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S769");
        }
        
        private void NegotiateTestCaseS768NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S774");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S774");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS768ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S769");
        }
        
        private void NegotiateTestCaseS768NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S784");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S784");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS768ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S769");
        }
        #endregion
        
        #region Test Starting in S795
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS795() {
            this.Manager.BeginTest("NegotiateTestCaseS795");
            this.Manager.Comment("reaching state \'S795\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp265;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp265);
            this.Manager.AddReturn(ReadConfigInfo, null, temp265);
            this.Manager.Comment("reaching state \'S796\'");
            int temp267 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS795ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS795ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS795ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS795ReadConfigChecker3)));
            if ((temp267 == 0)) {
                NegotiateTestCaseS189();
                goto label184;
            }
            if ((temp267 == 1)) {
                NegotiateTestCaseS790();
                goto label184;
            }
            if ((temp267 == 2)) {
                this.Manager.Comment("reaching state \'S797\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S798\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S799\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S800\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S801\'");
                int temp266 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker6)));
                if ((temp266 == 0)) {
                    NegotiateTestCaseS802();
                    goto label183;
                }
                if ((temp266 == 1)) {
                    NegotiateTestCaseS802();
                    goto label183;
                }
                if ((temp266 == 2)) {
                    NegotiateTestCaseS802();
                    goto label183;
                }
                if ((temp266 == 3)) {
                    NegotiateTestCaseS802();
                    goto label183;
                }
                if ((temp266 == 4)) {
                    NegotiateTestCaseS802();
                    goto label183;
                }
                if ((temp266 == 5)) {
                    NegotiateTestCaseS802();
                    goto label183;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker2)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker3)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker4)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker5)), new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker6)));
            label183:
;
                goto label184;
            }
            if ((temp267 == 3)) {
                this.Manager.Comment("reaching state \'S810\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S811\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S812\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S813\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S814\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker7))) != -1)) {
                    this.Manager.Comment("reaching state \'S815\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.???",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S816\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S817\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S818\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S819\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker7)));
                }
                goto label184;
            }
            throw new InvalidOperationException("never reached");
        label184:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS795ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S796");
        }
        
        private void NegotiateTestCaseS795ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S796");
        }
        
        private void NegotiateTestCaseS795ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S796");
        }
        
        private void NegotiateTestCaseS795NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Wildcard)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S801");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard, dialectRevision, "dialectRevision of NegotiateResponse, state S801");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS802() {
            this.Manager.Comment("reaching state \'S802\'");
            this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
            this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                            "Rep"}, new object[] {
                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                        "Head",
                                        "Tail"}, new object[] {
                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
            this.Manager.Comment("reaching state \'S803\'");
            this.Manager.Comment("checking step \'return NegotiateRequest\'");
            this.Manager.Comment("reaching state \'S804\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S805\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 1.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 1.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Comment("reaching state \'S806\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S807\'");
                this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                this.INegotiateAdapterInstance.ExpectDisconnect();
                this.Manager.Comment("reaching state \'S808\'");
                this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                this.Manager.Comment("reaching state \'S809\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS795NegotiateResponseChecker1)));
            }
        }
        
        private void NegotiateTestCaseS795NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S804");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S804");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS795NegotiateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb302)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S801");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302, dialectRevision, "dialectRevision of NegotiateResponse, state S801");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS795NegotiateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb30)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S801");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30, dialectRevision, "dialectRevision of NegotiateResponse, state S801");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS795NegotiateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S801");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S801");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS795NegotiateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S801");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S801");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS795NegotiateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_NOT_SUPPORTED,Smb2Unknown)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of NegotiateResponse, state S801");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown, dialectRevision, "dialectRevision of NegotiateResponse, state S801");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2Unknown"", ""[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the request with STATUS_NOT_SUPPORTED"", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2Unknown\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is not found, the server MUST fail the re" +
                    "quest with STATUS_NOT_SUPPORTED\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
        }
        
        private void NegotiateTestCaseS795ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S796");
        }
        
        private void NegotiateTestCaseS795NegotiateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S814");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S814");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S820
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS820() {
            this.Manager.BeginTest("NegotiateTestCaseS820");
            this.Manager.Comment("reaching state \'S820\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp268;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp268);
            this.Manager.AddReturn(ReadConfigInfo, null, temp268);
            this.Manager.Comment("reaching state \'S821\'");
            int temp269 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS820ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS820ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS820ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS820ReadConfigChecker3)));
            if ((temp269 == 0)) {
                NegotiateTestCaseS189();
                goto label185;
            }
            if ((temp269 == 1)) {
                NegotiateTestCaseS790();
                goto label185;
            }
            if ((temp269 == 2)) {
                this.Manager.Comment("reaching state \'S822\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S823\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S824\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S825\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S826\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS820NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S827\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))}));
                    this.Manager.Comment("reaching state \'S828\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S829\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S830\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S831\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS820NegotiateResponseChecker)));
                }
                goto label185;
            }
            if ((temp269 == 3)) {
                this.Manager.Comment("reaching state \'S832\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S833\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S834\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S835\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S836\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS820NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S837\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "SMB 2.???",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                    this.Manager.Comment("reaching state \'S838\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S839\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S840\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S841\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS820NegotiateResponseChecker1)));
                }
                goto label185;
            }
            throw new InvalidOperationException("never reached");
        label185:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS820ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S821");
        }
        
        private void NegotiateTestCaseS820ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S821");
        }
        
        private void NegotiateTestCaseS820ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S821");
        }
        
        private void NegotiateTestCaseS820NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S826");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S826");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS820ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S821");
        }
        
        private void NegotiateTestCaseS820NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S836");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S836");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb2002"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb2002"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb2002\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        #endregion
        
        #region Test Starting in S842
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS842() {
            this.Manager.BeginTest("NegotiateTestCaseS842");
            this.Manager.Comment("reaching state \'S842\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp270;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp270);
            this.Manager.AddReturn(ReadConfigInfo, null, temp270);
            this.Manager.Comment("reaching state \'S843\'");
            int temp271 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS842ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS842ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS842ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS842ReadConfigChecker3)));
            if ((temp271 == 0)) {
                NegotiateTestCaseS189();
                goto label186;
            }
            if ((temp271 == 1)) {
                NegotiateTestCaseS790();
                goto label186;
            }
            if ((temp271 == 2)) {
                this.Manager.Comment("reaching state \'S844\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S845\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S846\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S847\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S848\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS842NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S849\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S850\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S851\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S852\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S853\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS842NegotiateResponseChecker)));
                }
                goto label186;
            }
            if ((temp271 == 3)) {
                this.Manager.Comment("reaching state \'S854\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S855\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S856\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S857\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S858\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS842NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S859\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S860\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S861\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S862\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S863\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS842NegotiateResponseChecker1)));
                }
                goto label186;
            }
            throw new InvalidOperationException("never reached");
        label186:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS842ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S843");
        }
        
        private void NegotiateTestCaseS842ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S843");
        }
        
        private void NegotiateTestCaseS842ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S843");
        }
        
        private void NegotiateTestCaseS842NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S848");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S848");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS842ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S843");
        }
        
        private void NegotiateTestCaseS842NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S858");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S858");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S864
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS864() {
            this.Manager.BeginTest("NegotiateTestCaseS864");
            this.Manager.Comment("reaching state \'S864\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp272;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp272);
            this.Manager.AddReturn(ReadConfigInfo, null, temp272);
            this.Manager.Comment("reaching state \'S865\'");
            int temp273 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS864ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS864ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS864ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS864ReadConfigChecker3)));
            if ((temp273 == 0)) {
                NegotiateTestCaseS189();
                goto label187;
            }
            if ((temp273 == 1)) {
                NegotiateTestCaseS790();
                goto label187;
            }
            if ((temp273 == 2)) {
                this.Manager.Comment("reaching state \'S866\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S867\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S868\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S869\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S870\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS864NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S871\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S872\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S873\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S874\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S875\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS864NegotiateResponseChecker)));
                }
                goto label187;
            }
            if ((temp273 == 3)) {
                this.Manager.Comment("reaching state \'S876\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S877\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S878\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S879\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S880\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS864NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S881\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S882\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S883\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S884\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S885\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS864NegotiateResponseChecker1)));
                }
                goto label187;
            }
            throw new InvalidOperationException("never reached");
        label187:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS864ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S865");
        }
        
        private void NegotiateTestCaseS864ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S865");
        }
        
        private void NegotiateTestCaseS864ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S865");
        }
        
        private void NegotiateTestCaseS864NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S870");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S870");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS864ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S865");
        }
        
        private void NegotiateTestCaseS864NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S880");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S880");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S886
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS886() {
            this.Manager.BeginTest("NegotiateTestCaseS886");
            this.Manager.Comment("reaching state \'S886\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp274;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp274);
            this.Manager.AddReturn(ReadConfigInfo, null, temp274);
            this.Manager.Comment("reaching state \'S887\'");
            int temp275 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS886ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS886ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS886ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS886ReadConfigChecker3)));
            if ((temp275 == 0)) {
                NegotiateTestCaseS189();
                goto label188;
            }
            if ((temp275 == 1)) {
                NegotiateTestCaseS790();
                goto label188;
            }
            if ((temp275 == 2)) {
                this.Manager.Comment("reaching state \'S888\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S889\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S890\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S891\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S892\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS886NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S893\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S894\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S895\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S896\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S897\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS886NegotiateResponseChecker)));
                }
                goto label188;
            }
            if ((temp275 == 3)) {
                this.Manager.Comment("reaching state \'S898\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S899\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S900\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S901\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S902\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS886NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S903\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Wildcard])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Wildcard,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S904\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S905\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S906\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S907\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS886NegotiateResponseChecker1)));
                }
                goto label188;
            }
            throw new InvalidOperationException("never reached");
        label188:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS886ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S887");
        }
        
        private void NegotiateTestCaseS886ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S887");
        }
        
        private void NegotiateTestCaseS886ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S887");
        }
        
        private void NegotiateTestCaseS886NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S892");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS886ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S887");
        }
        
        private void NegotiateTestCaseS886NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S902");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S908
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS908() {
            this.Manager.BeginTest("NegotiateTestCaseS908");
            this.Manager.Comment("reaching state \'S908\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp276;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp276);
            this.Manager.AddReturn(ReadConfigInfo, null, temp276);
            this.Manager.Comment("reaching state \'S909\'");
            int temp277 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS908ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS908ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS908ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS908ReadConfigChecker3)));
            if ((temp277 == 0)) {
                NegotiateTestCaseS189();
                goto label189;
            }
            if ((temp277 == 1)) {
                NegotiateTestCaseS790();
                goto label189;
            }
            if ((temp277 == 2)) {
                this.Manager.Comment("reaching state \'S910\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S911\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S912\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S913\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S914\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS908NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S915\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S916\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S917\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S918\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S919\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS908NegotiateResponseChecker)));
                }
                goto label189;
            }
            if ((temp277 == 3)) {
                this.Manager.Comment("reaching state \'S920\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S921\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S922\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S923\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S924\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS908NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S925\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                        "Head",
                                                                        "Tail"}, new object[] {
                                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                        ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S926\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S927\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S928\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S929\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS908NegotiateResponseChecker1)));
                }
                goto label189;
            }
            throw new InvalidOperationException("never reached");
        label189:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS908ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S909");
        }
        
        private void NegotiateTestCaseS908ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S909");
        }
        
        private void NegotiateTestCaseS908ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S909");
        }
        
        private void NegotiateTestCaseS908NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S914");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S914");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS908ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S909");
        }
        
        private void NegotiateTestCaseS908NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S924");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S924");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S930
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS930() {
            this.Manager.BeginTest("NegotiateTestCaseS930");
            this.Manager.Comment("reaching state \'S930\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp278;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp278);
            this.Manager.AddReturn(ReadConfigInfo, null, temp278);
            this.Manager.Comment("reaching state \'S931\'");
            int temp279 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS930ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS930ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS930ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS930ReadConfigChecker3)));
            if ((temp279 == 0)) {
                NegotiateTestCaseS189();
                goto label190;
            }
            if ((temp279 == 1)) {
                NegotiateTestCaseS790();
                goto label190;
            }
            if ((temp279 == 2)) {
                this.Manager.Comment("reaching state \'S932\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S933\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S934\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S935\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S936\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS930NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S937\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S938\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S939\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S940\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S941\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS930NegotiateResponseChecker)));
                }
                goto label190;
            }
            if ((temp279 == 3)) {
                this.Manager.Comment("reaching state \'S942\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S943\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S944\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S945\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S946\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS930NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S947\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb2Unknown])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2Unknown,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S948\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S949\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S950\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S951\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS930NegotiateResponseChecker1)));
                }
                goto label190;
            }
            throw new InvalidOperationException("never reached");
        label190:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS930ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S931");
        }
        
        private void NegotiateTestCaseS930ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S931");
        }
        
        private void NegotiateTestCaseS930ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S931");
        }
        
        private void NegotiateTestCaseS930NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S936");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS930ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S931");
        }
        
        private void NegotiateTestCaseS930NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S952
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS952() {
            this.Manager.BeginTest("NegotiateTestCaseS952");
            this.Manager.Comment("reaching state \'S952\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp280;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp280);
            this.Manager.AddReturn(ReadConfigInfo, null, temp280);
            this.Manager.Comment("reaching state \'S953\'");
            int temp281 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS952ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS952ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS952ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS952ReadConfigChecker3)));
            if ((temp281 == 0)) {
                NegotiateTestCaseS189();
                goto label191;
            }
            if ((temp281 == 1)) {
                NegotiateTestCaseS790();
                goto label191;
            }
            if ((temp281 == 2)) {
                this.Manager.Comment("reaching state \'S954\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S955\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S956\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S957\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S958\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS952NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S959\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S960\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S961\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S962\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S963\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS952NegotiateResponseChecker)));
                }
                goto label191;
            }
            if ((temp281 == 3)) {
                this.Manager.Comment("reaching state \'S964\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S965\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S966\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S967\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S968\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS952NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S969\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb302])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S970\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S971\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S972\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S973\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS952NegotiateResponseChecker1)));
                }
                goto label191;
            }
            throw new InvalidOperationException("never reached");
        label191:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS952ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S953");
        }
        
        private void NegotiateTestCaseS952ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S953");
        }
        
        private void NegotiateTestCaseS952ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S953");
        }
        
        private void NegotiateTestCaseS952NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S958");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS952ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S953");
        }
        
        private void NegotiateTestCaseS952NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S968");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S968");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S974
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS974() {
            this.Manager.BeginTest("NegotiateTestCaseS974");
            this.Manager.Comment("reaching state \'S974\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp282;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp282);
            this.Manager.AddReturn(ReadConfigInfo, null, temp282);
            this.Manager.Comment("reaching state \'S975\'");
            int temp283 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS974ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS974ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS974ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS974ReadConfigChecker3)));
            if ((temp283 == 0)) {
                NegotiateTestCaseS189();
                goto label192;
            }
            if ((temp283 == 1)) {
                NegotiateTestCaseS790();
                goto label192;
            }
            if ((temp283 == 2)) {
                this.Manager.Comment("reaching state \'S976\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S977\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S978\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S979\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S980\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS974NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S981\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S982\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S983\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S984\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S985\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS974NegotiateResponseChecker)));
                }
                goto label192;
            }
            if ((temp283 == 3)) {
                this.Manager.Comment("reaching state \'S986\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S987\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S988\'");
                this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            "SMB 2.002",
                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.3: This request is defined in [MS-SMB] section 2.2.4.5.1, with the SMB header defined in section 2.2.3.1. If the request matches the format described there, and Connection.NegotiateDialect is 0xFFFF, processing MUST continue as specified in 3.3.5.3.1.""");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                        "he dialect string \"SMB 2.???\".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                        ".\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: The server MUST scan the dialects provided for the dialect " +
                        "string \"SMB 2.002\".<217>\"");
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: If the string is present, the client understands SMB2, and " +
                        "the server MUST respond with an SMB2 NEGOTIATE Response.\"");
                this.Manager.Comment("reaching state \'S989\'");
                this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                this.Manager.Comment("reaching state \'S990\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS974NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S991\'");
                    this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                    this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If Connection.NegotiateDialect is 0x0202, 0x0210, 0x0300, or " +
                            "0x0302 the server MUST disconnect the connection, as specified in section 3.3.7." +
                            "1, and not reply.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is Smb2002\"");
                    this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
                    this.Manager.Comment("reaching state \'S992\'");
                    this.Manager.Comment("checking step \'return NegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S993\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S994\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S995\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS974NegotiateResponseChecker1)));
                }
                goto label192;
            }
            throw new InvalidOperationException("never reached");
        label192:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS974ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S975");
        }
        
        private void NegotiateTestCaseS974ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S975");
        }
        
        private void NegotiateTestCaseS974ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S975");
        }
        
        private void NegotiateTestCaseS974NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S980");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S980");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        
        private void NegotiateTestCaseS974ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S975");
        }
        
        private void NegotiateTestCaseS974NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb2002)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S990");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002, dialectRevision, "dialectRevision of NegotiateResponse, state S990");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for the dialect string ""SMB 2.???""."", ""[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2"", ""[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>"", ""[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to ""2.002"", Connection.NegotiateDialect MUST be set to 0x0202, and the response is sent to the client""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: Otherwise, the server MUST scan the dialects provided for t" +
                    "he dialect string \"SMB 2.???\".\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.1: If the string is not present, continue to section 3.3.5.3.2" +
                    "\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: DialectRevision MUST be set to 0x0202.<218>\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.3.2: Connection.Dialect MUST be set to \"2.002\", Connection.Negot" +
                    "iateDialect MUST be set to 0x0202, and the response is sent to the client\"");
        }
        #endregion
        
        #region Test Starting in S996
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Negotiate)]
        public void NegotiateTestCaseS996() {
            this.Manager.BeginTest("NegotiateTestCaseS996");
            this.Manager.Comment("reaching state \'S996\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig temp284;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.INegotiateAdapterInstance.ReadConfig(out temp284);
            this.Manager.AddReturn(ReadConfigInfo, null, temp284);
            this.Manager.Comment("reaching state \'S997\'");
            int temp285 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS996ReadConfigChecker)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS996ReadConfigChecker1)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS996ReadConfigChecker2)), new ExpectedReturn(NegotiateTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.NegotiateTestCaseS996ReadConfigChecker3)));
            if ((temp285 == 0)) {
                this.Manager.Comment("reaching state \'S1008\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S1009\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1010\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb2002,Smb21,Smb30])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002,
                                            this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                        "Head",
                                                        "Tail"}, new object[] {
                                                        Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                                        this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                                                    "Head",
                                                                    "Tail"}, new object[] {
                                                                    Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30,
                                                                    ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})})})}));
                this.Manager.Comment("reaching state \'S1011\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1012\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS996NegotiateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1013\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\",\"SMB 2.???\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                            "Head",
                                                            "Tail"}, new object[] {
                                                            "SMB 2.???",
                                                            ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})})}));
                    this.Manager.Comment("reaching state \'S1014\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1015\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1016\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1017\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS996NegotiateResponseChecker)));
                }
                goto label193;
            }
            if ((temp285 == 1)) {
                NegotiateTestCaseS183();
                goto label193;
            }
            if ((temp285 == 2)) {
                NegotiateTestCaseS189();
                goto label193;
            }
            if ((temp285 == 3)) {
                this.Manager.Comment("reaching state \'S998\'");
                this.Manager.Comment("executing step \'call SetupConnection()\'");
                this.INegotiateAdapterInstance.SetupConnection();
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.1: Connection.CommandSequenceWindow is set to a sequence window," +
                        " as specified in section 3.3.1.1, with a starting receive sequence of 0 and a wi" +
                        "ndow size of 1\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.CommandSequenceWindow to receive sequence of 0.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Connection.NegotiateDialect is set to 0xFFFF\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.NegotiateDialect is set to Smb2Unknown\"");
                this.Manager.Comment("reaching state \'S999\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1000\'");
                this.Manager.Comment("executing step \'call NegotiateRequest([Smb21])\'");
                this.INegotiateAdapterInstance.NegotiateRequest(this.Make<Microsoft.Modeling.Sequence<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                "Rep"}, new object[] {
                                this.Make<Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>>(new string[] {
                                            "Head",
                                            "Tail"}, new object[] {
                                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21,
                                            ((Microsoft.Xrt.Runtime.RuntimeList<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>)(null))})}));
                this.Manager.Comment("reaching state \'S1001\'");
                this.Manager.Comment("checking step \'return NegotiateRequest\'");
                this.Manager.Comment("reaching state \'S1002\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS996NegotiateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S1003\'");
                    this.Manager.Comment("executing step \'call ComNegotiateRequest([\"SMB 2.002\"])\'");
                    this.INegotiateAdapterInstance.ComNegotiateRequest(this.Make<Microsoft.Modeling.Sequence<string>>(new string[] {
                                    "Rep"}, new object[] {
                                    this.Make<Microsoft.Xrt.Runtime.RuntimeList<string>>(new string[] {
                                                "Head",
                                                "Tail"}, new object[] {
                                                "SMB 2.002",
                                                ((Microsoft.Xrt.Runtime.RuntimeList<string>)(null))})}));
                    this.Manager.Comment("reaching state \'S1004\'");
                    this.Manager.Comment("checking step \'return ComNegotiateRequest\'");
                    this.Manager.Comment("reaching state \'S1005\'");
                    this.Manager.Comment("executing step \'call ExpectDisconnect()\'");
                    this.INegotiateAdapterInstance.ExpectDisconnect();
                    this.Manager.Comment("reaching state \'S1006\'");
                    this.Manager.Comment("checking step \'return ExpectDisconnect\'");
                    this.Manager.Comment("reaching state \'S1007\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(NegotiateTestCase.NegotiateResponseInfo, null, new NegotiateResponseDelegate1(this.NegotiateTestCaseS996NegotiateResponseChecker1)));
                }
                goto label193;
            }
            throw new InvalidOperationException("never reached");
        label193:
;
            this.Manager.EndTest();
        }
        
        private void NegotiateTestCaseS996ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb21 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21}), c, "c of ReadConfig, state S997");
        }
        
        private void NegotiateTestCaseS996NegotiateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1012");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1012");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        
        private void NegotiateTestCaseS996ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb302 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb302}), c, "c of ReadConfig, state S997");
        }
        
        private void NegotiateTestCaseS996ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb2002 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb2002}), c, "c of ReadConfig, state S997");
        }
        
        private void NegotiateTestCaseS996ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out NegotiateServerConfig State: \r\nMaxSmbVersio" +
                    "nSupported: Smb30 \r\n]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Negotiate.NegotiateServerConfig>(new string[] {
                            "MaxSmbVersionSupported"}, new object[] {
                            Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb30}), c, "c of ReadConfig, state S997");
        }
        
        private void NegotiateTestCaseS996NegotiateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision dialectRevision) {
            this.Manager.Comment("checking step \'event NegotiateResponse(STATUS_SUCCESS,Smb21)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of NegotiateResponse, state S1002");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision>(this.Manager, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.DialectRevision.Smb21, dialectRevision, "dialectRevision of NegotiateResponse, state S1002");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between the dialects it implements and the Dialects array of the SMB2 NEGOTIATE request"", ""[TestInfo] Common dialect is Smb21"", ""[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection.Dialect to ""2.002"", ""2.100"", ""3.000"", or ""3.002"", and Connection.NegotiateDialect to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selected"", ""[TestInfo] Connection.Dialect is set to Smb21"", ""[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as specified in section 2.2.4, with the following specific values, and return STATUS_SUCCESS to the client."", ""[MS-SMB2] 	DialectRevision MUST be set to the common dialect""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST select the greatest common dialect between th" +
                    "e dialects it implements and the Dialects array of the SMB2 NEGOTIATE request\"");
            this.Manager.Checkpoint("\"[TestInfo] Common dialect is Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: If a common dialect is found, the server MUST set Connection." +
                    "Dialect to \"2.002\", \"2.100\", \"3.000\", or \"3.002\", and Connection.NegotiateDialec" +
                    "t to 0x0202, 0x0210, 0x0300, or 0x0302 accordingly, to reflect the dialect selec" +
                    "ted\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is set to Smb21\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The server MUST then construct an SMB2 NEGOTIATE Response, as" +
                    " specified in section 2.2.4, with the following specific values, and return STAT" +
                    "US_SUCCESS to the client.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tDialectRevision MUST be set to the common dialect\"");
        }
        #endregion
    }
}
