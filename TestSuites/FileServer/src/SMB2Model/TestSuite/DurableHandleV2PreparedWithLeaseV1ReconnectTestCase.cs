// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DurableHandleV2PreparedWithLeaseV1ReconnectTestCase : PtfTestClassBase {
        
        public DurableHandleV2PreparedWithLeaseV1ReconnectTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c);
        
        public delegate void OpenResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c);
        
        public delegate void PreConstraintDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig).MakeByRefType());
        
        static System.Reflection.EventInfo OpenResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "OpenResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter IHandleAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> c1;
        
        private IVariable<int> durableHandleResponseContext;
        
        private IVariable<int> leaseResponseContext;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> v3;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IHandleAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter))));
            this.Manager.Subscribe(OpenResponseInfo, this.IHandleAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("c1");
            this.durableHandleResponseContext = this.Manager.CreateVariable<int>("durableHandleResponseContext");
            this.leaseResponseContext = this.Manager.CreateVariable<int>("leaseResponseContext");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("v3");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker3)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S4\'");
                int temp3 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
                if ((temp3 == 0)) {
                    this.Manager.Comment("reaching state \'S13\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S14\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S15\'");
                    int temp1 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)));
                    if ((temp1 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label0;
                    }
                    if ((temp1 == 1)) {
                        this.Manager.Comment("reaching state \'S16\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,DifferentCl" +
                                "ient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S17\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S18\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS19();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker)));
                        }
                        goto label0;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S15\'.");
                label0:
;
                    goto label2;
                }
                if ((temp3 == 1)) {
                    this.Manager.Comment("reaching state \'S5\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S6\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    this.Manager.Comment("reaching state \'S7\'");
                    int temp2 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)));
                    if ((temp2 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label1;
                    }
                    if ((temp2 == 1)) {
                        this.Manager.Comment("reaching state \'S8\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S9\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S10\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker1))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS11();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker1)));
                        }
                        goto label1;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S7\'.");
                label1:
;
                    goto label2;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S4\'.");
            label2:
;
                goto label6;
            }
            if ((temp7 == 1)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S22\'");
                int temp6 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)));
                if ((temp6 == 0)) {
                    this.Manager.Comment("reaching state \'S23\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S24\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS25();
                    goto label5;
                }
                if ((temp6 == 1)) {
                    this.Manager.Comment("reaching state \'S31\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S32\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS33();
                    goto label5;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S22\'.");
            label5:
;
                goto label6;
            }
            if ((temp7 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label6;
            }
            if ((temp7 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker1() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS12() {
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S12\'.");
        }
        
        private void PreConstraintChecker2() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S18");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS19() {
            this.Manager.Comment("reaching state \'S19\'");
        }
        
        private void PreConstraintChecker3() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void PreConstraintChecker5() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS11() {
            this.Manager.Comment("reaching state \'S11\'");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker6() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
            int temp4 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,DifferentCl" +
                        "ient,DifferentCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S28\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker2))) != -1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS29();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker2)));
                }
                goto label3;
            }
            if ((temp4 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS30();
                goto label3;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S25\'.");
        label3:
;
        }
        
        private void PreConstraintChecker7() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S28");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S28");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S28");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S28");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS29() {
            this.Manager.Comment("reaching state \'S29\'");
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS30() {
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S30\'.");
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS33() {
            this.Manager.Comment("reaching state \'S33\'");
            int temp5 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
            if ((temp5 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS30();
                goto label4;
            }
            if ((temp5 == 1)) {
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                        "tClient,DifferentCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S36\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker3))) != -1)) {
                    this.Manager.Comment("reaching state \'S37\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker3)));
                }
                goto label4;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S33\'.");
        label4:
;
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void PreConstraintChecker11() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38() {
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S38\'.");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39() {
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S39\'.");
        }
        #endregion
        
        #region Test Starting in S125
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125");
            this.Manager.Comment("reaching state \'S125\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp8;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp8);
            this.Manager.AddReturn(ReadConfigInfo, null, temp8);
            this.Manager.Comment("reaching state \'S126\'");
            int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125ReadConfigChecker3)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S129\'");
                int temp11 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
                if ((temp11 == 0)) {
                    this.Manager.Comment("reaching state \'S130\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S131\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS132();
                    goto label9;
                }
                if ((temp11 == 1)) {
                    this.Manager.Comment("reaching state \'S137\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S138\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S139\'");
                    int temp10 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)));
                    if ((temp10 == 0)) {
                        this.Manager.Comment("reaching state \'S140\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,SameClient," +
                                "SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S141\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S142\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S143\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker1)));
                        }
                        goto label8;
                    }
                    if ((temp10 == 1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS52();
                        goto label8;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S139\'.");
                label8:
;
                    goto label9;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S129\'.");
            label9:
;
                goto label11;
            }
            if ((temp13 == 1)) {
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S146\'");
                int temp12 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)));
                if ((temp12 == 0)) {
                    this.Manager.Comment("reaching state \'S147\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S148\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S149\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker2))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS124();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker2)));
                    }
                    goto label10;
                }
                if ((temp12 == 1)) {
                    this.Manager.Comment("reaching state \'S150\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,DifferentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S151\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S152\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker3))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS98();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker3)));
                    }
                    goto label10;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S146\'.");
            label10:
;
                goto label11;
            }
            if ((temp13 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label11;
            }
            if ((temp13 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S126");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker12() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS132() {
            this.Manager.Comment("reaching state \'S132\'");
            int temp9 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S133\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                        "tClient,DifferentCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S135\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S136\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker)));
                }
                goto label7;
            }
            if ((temp9 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS52();
                goto label7;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S132\'.");
        label7:
;
        }
        
        private void PreConstraintChecker13() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S135");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S135");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S135");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS52() {
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S52\'.");
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker16() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S142");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S142");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S142");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, the server supports leasing, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, the server supports leasing, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker17() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S126");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker18() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S149");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S149");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S149");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS124() {
            this.Manager.Comment("reaching state \'S124\'");
        }
        
        private void PreConstraintChecker19() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S152");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S152");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S152");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS98() {
            this.Manager.Comment("reaching state \'S98\'");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S126");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS125ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S126");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S153
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153");
            this.Manager.Comment("reaching state \'S153\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp14;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp14);
            this.Manager.AddReturn(ReadConfigInfo, null, temp14);
            this.Manager.Comment("reaching state \'S154\'");
            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153ReadConfigChecker3)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S157\'");
                int temp16 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker20)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker23)));
                if ((temp16 == 0)) {
                    this.Manager.Comment("reaching state \'S158\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S159\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S160\'");
                    int temp15 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker21)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker22)));
                    if ((temp15 == 0)) {
                        this.Manager.Comment("reaching state \'S161\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S162\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S163\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS51();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker)));
                        }
                        goto label12;
                    }
                    if ((temp15 == 1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS52();
                        goto label12;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S160\'.");
                label12:
;
                    goto label13;
                }
                if ((temp16 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS83();
                    goto label13;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S157\'.");
            label13:
;
                goto label16;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S166\'");
                int temp18 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker24)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker25)));
                if ((temp18 == 0)) {
                    this.Manager.Comment("reaching state \'S167\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,LeaseV1,SameLeaseKey,SameClient,Diffe" +
                            "rentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S168\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S169\'");
                    int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker2)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker3)));
                    if ((temp17 == 0)) {
                        this.Manager.Comment("reaching state \'S170\'");
                        goto label14;
                    }
                    if ((temp17 == 1)) {
                        this.Manager.Comment("reaching state \'S171\'");
                        goto label14;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker2)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker3)));
                label14:
;
                    goto label15;
                }
                if ((temp18 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS95();
                    goto label15;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S166\'.");
            label15:
;
                goto label16;
            }
            if ((temp19 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label16;
            }
            if ((temp19 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S154");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker20() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker21() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S163");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S163");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S163");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S163");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS51() {
            this.Manager.Comment("reaching state \'S51\'");
        }
        
        private void PreConstraintChecker22() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker23() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS83() {
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                    "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                    "nt,SameCreateGuid)\'");
            this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
            this.Manager.Comment("reaching state \'S85\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker1))) != -1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS56();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker1)));
            }
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S85");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S85");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S85");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND. "", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS56() {
            this.Manager.Comment("reaching state \'S56\'");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S154");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker24() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S169");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S169");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S169");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S169");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S169");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S169");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker25() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS95() {
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                    "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                    "nt,SameCreateGuid)\'");
            this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
            this.Manager.Comment("reaching state \'S97\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker4))) != -1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS98();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker4)));
            }
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S97");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S97");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S97");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND. "", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S154");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS153ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S154");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S172
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172");
            this.Manager.Comment("reaching state \'S172\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp20;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp20);
            this.Manager.AddReturn(ReadConfigInfo, null, temp20);
            this.Manager.Comment("reaching state \'S173\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172ReadConfigChecker3)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S176\'");
                int temp21 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker26)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker27)));
                if ((temp21 == 0)) {
                    this.Manager.Comment("reaching state \'S177\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                            "nt,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S178\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S179\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS180();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172OpenResponseChecker)));
                    }
                    goto label17;
                }
                if ((temp21 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS83();
                    goto label17;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S176\'.");
            label17:
;
                goto label19;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S183\'");
                int temp22 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker28)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker29)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S184\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,SameClient," +
                            "SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S185\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S186\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172OpenResponseChecker1))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS124();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172OpenResponseChecker1)));
                    }
                    goto label18;
                }
                if ((temp22 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS95();
                    goto label18;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S183\'.");
            label18:
;
                goto label19;
            }
            if ((temp23 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label19;
            }
            if ((temp23 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S173");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker26() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S179");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S179");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S179");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S179");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND. "", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS180() {
            this.Manager.Comment("reaching state \'S180\'");
        }
        
        private void PreConstraintChecker27() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S173");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker28() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S186");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S186");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S186");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S186");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND. "", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker29() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S173");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS172ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S173");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S187
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187");
            this.Manager.Comment("reaching state \'S187\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp24;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp24);
            this.Manager.AddReturn(ReadConfigInfo, null, temp24);
            this.Manager.Comment("reaching state \'S188\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187ReadConfigChecker3)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S191\'");
                int temp25 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker30)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker31)));
                if ((temp25 == 0)) {
                    this.Manager.Comment("reaching state \'S192\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S193\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S194\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS180();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187OpenResponseChecker)));
                    }
                    goto label20;
                }
                if ((temp25 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS83();
                    goto label20;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S191\'.");
            label20:
;
                goto label22;
            }
            if ((temp27 == 1)) {
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S197\'");
                int temp26 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker32)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker33)));
                if ((temp26 == 0)) {
                    this.Manager.Comment("reaching state \'S198\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,DifferentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S199\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S200\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187OpenResponseChecker1))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS124();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187OpenResponseChecker1)));
                    }
                    goto label21;
                }
                if ((temp26 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS95();
                    goto label21;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S197\'.");
            label21:
;
                goto label22;
            }
            if ((temp27 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label22;
            }
            if ((temp27 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S188");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker30() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S194");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S194");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S194");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker31() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S188");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker32() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S200");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker33() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S188");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS187ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S188");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S201
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201");
            this.Manager.Comment("reaching state \'S201\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp28;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp28);
            this.Manager.AddReturn(ReadConfigInfo, null, temp28);
            this.Manager.Comment("reaching state \'S202\'");
            int temp32 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201ReadConfigChecker3)));
            if ((temp32 == 0)) {
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S205\'");
                int temp30 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker34)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker35)));
                if ((temp30 == 0)) {
                    this.Manager.Comment("reaching state \'S206\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,LeaseV1,SameLeaseKey,SameClient,Diffe" +
                            "rentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S207\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S208\'");
                    int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201OpenResponseChecker)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201OpenResponseChecker1)));
                    if ((temp29 == 0)) {
                        this.Manager.Comment("reaching state \'S209\'");
                        goto label23;
                    }
                    if ((temp29 == 1)) {
                        this.Manager.Comment("reaching state \'S210\'");
                        goto label23;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201OpenResponseChecker)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201OpenResponseChecker1)));
                label23:
;
                    goto label24;
                }
                if ((temp30 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS83();
                    goto label24;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S205\'.");
            label24:
;
                goto label26;
            }
            if ((temp32 == 1)) {
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S213\'");
                int temp31 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker36)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker37)));
                if ((temp31 == 0)) {
                    this.Manager.Comment("reaching state \'S214\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,DifferentCl" +
                            "ient,DifferentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S215\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S216\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201OpenResponseChecker2))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS124();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201OpenResponseChecker2)));
                    }
                    goto label25;
                }
                if ((temp31 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS95();
                    goto label25;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S213\'.");
            label25:
;
                goto label26;
            }
            if ((temp32 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label26;
            }
            if ((temp32 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label26;
            }
            throw new InvalidOperationException("never reached");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S202");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker34() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S208");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S208");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S208");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S208");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S208");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S208");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker35() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S202");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker36() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S216");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S216");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S216");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker37() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S202");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS201ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S202");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S217
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217");
            this.Manager.Comment("reaching state \'S217\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp33;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp33);
            this.Manager.AddReturn(ReadConfigInfo, null, temp33);
            this.Manager.Comment("reaching state \'S218\'");
            int temp38 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217ReadConfigChecker3)));
            if ((temp38 == 0)) {
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S221\'");
                int temp34 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker38)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker39)));
                if ((temp34 == 0)) {
                    this.Manager.Comment("reaching state \'S222\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,SameClient," +
                            "SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S223\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S224\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS180();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217OpenResponseChecker)));
                    }
                    goto label27;
                }
                if ((temp34 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS83();
                    goto label27;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S221\'.");
            label27:
;
                goto label31;
            }
            if ((temp38 == 1)) {
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S227\'");
                int temp37 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker40)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker43)));
                if ((temp37 == 0)) {
                    this.Manager.Comment("reaching state \'S228\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S229\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S230\'");
                    int temp36 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker41)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker42)));
                    if ((temp36 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label29;
                    }
                    if ((temp36 == 1)) {
                        this.Manager.Comment("reaching state \'S231\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,LeaseV1,SameLeaseKey,SameClient,Diffe" +
                                "rentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S232\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S233\'");
                        int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217OpenResponseChecker1)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217OpenResponseChecker2)));
                        if ((temp35 == 0)) {
                            this.Manager.Comment("reaching state \'S234\'");
                            goto label28;
                        }
                        if ((temp35 == 1)) {
                            this.Manager.Comment("reaching state \'S235\'");
                            goto label28;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217OpenResponseChecker1)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217OpenResponseChecker2)));
                    label28:
;
                        goto label29;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S230\'.");
                label29:
;
                    goto label30;
                }
                if ((temp37 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS95();
                    goto label30;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S227\'.");
            label30:
;
                goto label31;
            }
            if ((temp38 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label31;
            }
            if ((temp38 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S218");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker38() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S224");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND. "", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker39() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S218");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker40() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker41() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker42() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker43() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S218");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS217ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S218");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S236
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236");
            this.Manager.Comment("reaching state \'S236\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp39;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp39);
            this.Manager.AddReturn(ReadConfigInfo, null, temp39);
            this.Manager.Comment("reaching state \'S237\'");
            int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236ReadConfigChecker3)));
            if ((temp43 == 0)) {
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S240\'");
                int temp40 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker44)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker45)));
                if ((temp40 == 0)) {
                    this.Manager.Comment("reaching state \'S241\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,DifferentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S242\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S243\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS180();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236OpenResponseChecker)));
                    }
                    goto label32;
                }
                if ((temp40 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS83();
                    goto label32;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S240\'.");
            label32:
;
                goto label35;
            }
            if ((temp43 == 1)) {
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S246\'");
                int temp42 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker46)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker49)));
                if ((temp42 == 0)) {
                    this.Manager.Comment("reaching state \'S247\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S248\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S249\'");
                    int temp41 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker47)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker48)));
                    if ((temp41 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label33;
                    }
                    if ((temp41 == 1)) {
                        this.Manager.Comment("reaching state \'S250\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,SameClient," +
                                "SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S251\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S252\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236OpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S253\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236OpenResponseChecker1)));
                        }
                        goto label33;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S249\'.");
                label33:
;
                    goto label34;
                }
                if ((temp42 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS95();
                    goto label34;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S246\'.");
            label34:
;
                goto label35;
            }
            if ((temp43 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label35;
            }
            if ((temp43 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S237");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker44() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S243");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S243");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S243");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S243");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker45() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S237");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker46() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker47() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker48() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, the server supports leasing, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, the server supports leasing, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker49() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S237");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS236ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S237");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S254
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254");
            this.Manager.Comment("reaching state \'S254\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp44;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp44);
            this.Manager.AddReturn(ReadConfigInfo, null, temp44);
            this.Manager.Comment("reaching state \'S255\'");
            int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254ReadConfigChecker3)));
            if ((temp48 == 0)) {
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S258\'");
                int temp45 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker50)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker51)));
                if ((temp45 == 0)) {
                    this.Manager.Comment("reaching state \'S259\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,DifferentCl" +
                            "ient,DifferentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S260\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S261\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS180();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254OpenResponseChecker)));
                    }
                    goto label36;
                }
                if ((temp45 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS83();
                    goto label36;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S258\'.");
            label36:
;
                goto label39;
            }
            if ((temp48 == 1)) {
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S263\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S264\'");
                int temp47 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker52)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker55)));
                if ((temp47 == 0)) {
                    this.Manager.Comment("reaching state \'S265\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S266\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S267\'");
                    int temp46 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker53)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker54)));
                    if ((temp46 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label37;
                    }
                    if ((temp46 == 1)) {
                        this.Manager.Comment("reaching state \'S268\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S269\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S270\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254OpenResponseChecker1))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS19();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254OpenResponseChecker1)));
                        }
                        goto label37;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S267\'.");
                label37:
;
                    goto label38;
                }
                if ((temp47 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS95();
                    goto label38;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S264\'.");
            label38:
;
                goto label39;
            }
            if ((temp48 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label39;
            }
            if ((temp48 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S255");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker50() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S261");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S261");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S261");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker51() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S255");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker52() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker53() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker54() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S270");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S270");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S270");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker55() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S255");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS254ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S255");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S271
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271");
            this.Manager.Comment("reaching state \'S271\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp49;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp49);
            this.Manager.AddReturn(ReadConfigInfo, null, temp49);
            this.Manager.Comment("reaching state \'S272\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271ReadConfigChecker3)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S275\'");
                int temp51 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker56)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker59)));
                if ((temp51 == 0)) {
                    this.Manager.Comment("reaching state \'S276\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S277\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS278();
                    goto label41;
                }
                if ((temp51 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS83();
                    goto label41;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S275\'.");
            label41:
;
                goto label43;
            }
            if ((temp53 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label43;
            }
            if ((temp53 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label43;
            }
            if ((temp53 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker56() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS278() {
            this.Manager.Comment("reaching state \'S278\'");
            int temp50 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker57)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker58)));
            if ((temp50 == 0)) {
                this.Manager.Comment("reaching state \'S279\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,DifferentCl" +
                        "ient,DifferentCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S281\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271OpenResponseChecker))) != -1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS51();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271OpenResponseChecker)));
                }
                goto label40;
            }
            if ((temp50 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS52();
                goto label40;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S278\'.");
        label40:
;
        }
        
        private void PreConstraintChecker57() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S281");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S281");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S281");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker58() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker59() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282() {
            this.Manager.Comment("reaching state \'S282\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                    "leV2,LeaseV1)\'");
            this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                    "B 3.x dialect family. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S283\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S284\'");
            int temp52 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker60)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker61)));
            if ((temp52 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS121();
                goto label42;
            }
            if ((temp52 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS95();
                goto label42;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S284\'.");
        label42:
;
        }
        
        private void PreConstraintChecker60() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS121() {
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                    "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                    "nt,SameCreateGuid)\'");
            this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
            this.Manager.Comment("reaching state \'S123\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271OpenResponseChecker1))) != -1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS124();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271OpenResponseChecker1)));
            }
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND. "", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker61() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS271ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S285
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285");
            this.Manager.Comment("reaching state \'S285\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp54;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp54);
            this.Manager.AddReturn(ReadConfigInfo, null, temp54);
            this.Manager.Comment("reaching state \'S286\'");
            int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285ReadConfigChecker3)));
            if ((temp57 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label46;
            }
            if ((temp57 == 1)) {
                this.Manager.Comment("reaching state \'S287\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S288\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S289\'");
                int temp56 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker62)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker65)));
                if ((temp56 == 0)) {
                    this.Manager.Comment("reaching state \'S290\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S291\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S292\'");
                    int temp55 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker63)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker64)));
                    if ((temp55 == 0)) {
                        this.Manager.Comment("reaching state \'S293\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S294\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S295\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285OpenResponseChecker))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS29();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285OpenResponseChecker)));
                        }
                        goto label44;
                    }
                    if ((temp55 == 1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label44;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S292\'.");
                label44:
;
                    goto label45;
                }
                if ((temp56 == 1)) {
                    this.Manager.Comment("reaching state \'S296\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S297\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS33();
                    goto label45;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S289\'.");
            label45:
;
                goto label46;
            }
            if ((temp57 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label46;
            }
            if ((temp57 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label46;
            }
            throw new InvalidOperationException("never reached");
        label46:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker62() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker63() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is present, or if Open.Lease is NOT NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL."", ""[TestTag] Compatibility"", ""[TestInfo] SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is not present.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.Lease is NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is present, or if Open.Lease is NOT NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create cont" +
                    "ext is not present.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker64() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker65() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS285ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S298
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298");
            this.Manager.Comment("reaching state \'S298\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp58;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp58);
            this.Manager.AddReturn(ReadConfigInfo, null, temp58);
            this.Manager.Comment("reaching state \'S299\'");
            int temp61 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298ReadConfigChecker3)));
            if ((temp61 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label49;
            }
            if ((temp61 == 1)) {
                this.Manager.Comment("reaching state \'S300\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S301\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S302\'");
                int temp60 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker66)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker69)));
                if ((temp60 == 0)) {
                    this.Manager.Comment("reaching state \'S303\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S304\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S305\'");
                    int temp59 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker67)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker68)));
                    if ((temp59 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label47;
                    }
                    if ((temp59 == 1)) {
                        this.Manager.Comment("reaching state \'S306\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S307\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S308\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298OpenResponseChecker))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS29();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298OpenResponseChecker)));
                        }
                        goto label47;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S305\'.");
                label47:
;
                    goto label48;
                }
                if ((temp60 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS309();
                    goto label48;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S302\'.");
            label48:
;
                goto label49;
            }
            if ((temp61 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label49;
            }
            if ((temp61 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S299");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S299");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker66() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker67() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker68() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S308");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S308");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S308");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S308");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker69() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS309() {
            this.Manager.Comment("reaching state \'S309\'");
            this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                    "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                    "nt,SameCreateGuid)\'");
            this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
            this.Manager.Comment("reaching state \'S310\'");
            this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
            this.Manager.Comment("reaching state \'S311\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298OpenResponseChecker1))) != -1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS312();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298OpenResponseChecker1)));
            }
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S311");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S311");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S311");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S311");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND. "", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS312() {
            this.Manager.Comment("reaching state \'S312\'");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S299");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS298ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S299");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S313
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313");
            this.Manager.Comment("reaching state \'S313\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp62;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp62);
            this.Manager.AddReturn(ReadConfigInfo, null, temp62);
            this.Manager.Comment("reaching state \'S314\'");
            int temp65 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313ReadConfigChecker3)));
            if ((temp65 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label52;
            }
            if ((temp65 == 1)) {
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S317\'");
                int temp64 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker70)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker71)));
                if ((temp64 == 0)) {
                    this.Manager.Comment("reaching state \'S318\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S319\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S320\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS312();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313OpenResponseChecker)));
                    }
                    goto label51;
                }
                if ((temp64 == 1)) {
                    this.Manager.Comment("reaching state \'S321\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S322\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S323\'");
                    int temp63 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker72)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker73)));
                    if ((temp63 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label50;
                    }
                    if ((temp63 == 1)) {
                        this.Manager.Comment("reaching state \'S324\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,SameClient," +
                                "SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S325\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S326\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313OpenResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S327\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313OpenResponseChecker1)));
                        }
                        goto label50;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S323\'.");
                label50:
;
                    goto label51;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S317\'.");
            label51:
;
                goto label52;
            }
            if ((temp65 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label52;
            }
            if ((temp65 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label52;
            }
            throw new InvalidOperationException("never reached");
        label52:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S314");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S314");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker70() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S320");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S320");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S320");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S320");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker71() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker72() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker73() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S326");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S326");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S326");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S326");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, the server supports leasing, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If an SMB2_CREATE_REQUEST_LEASE create context is also present in the request, the server supports leasing, and Open.Lease.LeaseKey does not match the LeaseKey provided in the SMB2_CREATE_REQUEST_LEASE create context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9.""");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S314");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS313ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S314");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S328
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328");
            this.Manager.Comment("reaching state \'S328\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp66;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp66);
            this.Manager.AddReturn(ReadConfigInfo, null, temp66);
            this.Manager.Comment("reaching state \'S329\'");
            int temp70 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328ReadConfigChecker3)));
            if ((temp70 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label56;
            }
            if ((temp70 == 1)) {
                this.Manager.Comment("reaching state \'S330\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S331\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S332\'");
                int temp69 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker74)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker75)));
                if ((temp69 == 0)) {
                    this.Manager.Comment("reaching state \'S333\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,DifferentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S334\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S335\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS312();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328OpenResponseChecker)));
                    }
                    goto label55;
                }
                if ((temp69 == 1)) {
                    this.Manager.Comment("reaching state \'S336\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S337\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S338\'");
                    int temp68 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker76)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker77)));
                    if ((temp68 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label54;
                    }
                    if ((temp68 == 1)) {
                        this.Manager.Comment("reaching state \'S339\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,LeaseV1,SameLeaseKey,SameClient,Diffe" +
                                "rentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S340\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S341\'");
                        int temp67 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328OpenResponseChecker1)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328OpenResponseChecker2)));
                        if ((temp67 == 0)) {
                            this.Manager.Comment("reaching state \'S342\'");
                            goto label53;
                        }
                        if ((temp67 == 1)) {
                            this.Manager.Comment("reaching state \'S343\'");
                            goto label53;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328OpenResponseChecker1)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328OpenResponseChecker2)));
                    label53:
;
                        goto label54;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S338\'.");
                label54:
;
                    goto label55;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S332\'.");
            label55:
;
                goto label56;
            }
            if ((temp70 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label56;
            }
            if ((temp70 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S329");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S329");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker74() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S335");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S335");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S335");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S335");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker75() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker76() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker77() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S341");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S341");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S341");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S341");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S341");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S341");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S341");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S341");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S329");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS328ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S329");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S344
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344");
            this.Manager.Comment("reaching state \'S344\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp71;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp71);
            this.Manager.AddReturn(ReadConfigInfo, null, temp71);
            this.Manager.Comment("reaching state \'S345\'");
            int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344ReadConfigChecker3)));
            if ((temp74 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label59;
            }
            if ((temp74 == 1)) {
                this.Manager.Comment("reaching state \'S346\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S347\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S348\'");
                int temp73 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker78)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker79)));
                if ((temp73 == 0)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS309();
                    goto label58;
                }
                if ((temp73 == 1)) {
                    this.Manager.Comment("reaching state \'S349\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S350\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S351\'");
                    int temp72 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker80)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker81)));
                    if ((temp72 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS30();
                        goto label57;
                    }
                    if ((temp72 == 1)) {
                        this.Manager.Comment("reaching state \'S352\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S353\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S354\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344OpenResponseChecker))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS29();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344OpenResponseChecker)));
                        }
                        goto label57;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S351\'.");
                label57:
;
                    goto label58;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S348\'.");
            label58:
;
                goto label59;
            }
            if ((temp74 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label59;
            }
            if ((temp74 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S345");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S345");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker78() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker79() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker80() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker81() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S354");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S354");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S354");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S354");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S345");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS344ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S345");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S355
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355");
            this.Manager.Comment("reaching state \'S355\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp75;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp75);
            this.Manager.AddReturn(ReadConfigInfo, null, temp75);
            this.Manager.Comment("reaching state \'S356\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355ReadConfigChecker3)));
            if ((temp77 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label61;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S357\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S358\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S359\'");
                int temp76 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker82)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker83)));
                if ((temp76 == 0)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS309();
                    goto label60;
                }
                if ((temp76 == 1)) {
                    this.Manager.Comment("reaching state \'S360\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                            "nt,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S361\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S362\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS363();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355OpenResponseChecker)));
                    }
                    goto label60;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S359\'.");
            label60:
;
                goto label61;
            }
            if ((temp77 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label61;
            }
            if ((temp77 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label61;
            }
            throw new InvalidOperationException("never reached");
        label61:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker82() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker83() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S362");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S362");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S362");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S362");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND. "", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS363() {
            this.Manager.Comment("reaching state \'S363\'");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS355ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S364
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364");
            this.Manager.Comment("reaching state \'S364\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp78;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp78);
            this.Manager.AddReturn(ReadConfigInfo, null, temp78);
            this.Manager.Comment("reaching state \'S365\'");
            int temp80 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364ReadConfigChecker3)));
            if ((temp80 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label63;
            }
            if ((temp80 == 1)) {
                this.Manager.Comment("reaching state \'S366\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S367\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S368\'");
                int temp79 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker84)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker85)));
                if ((temp79 == 0)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS309();
                    goto label62;
                }
                if ((temp79 == 1)) {
                    this.Manager.Comment("reaching state \'S369\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S370\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S371\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS363();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364OpenResponseChecker)));
                    }
                    goto label62;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S368\'.");
            label62:
;
                goto label63;
            }
            if ((temp80 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label63;
            }
            if ((temp80 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S365");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S365");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker84() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker85() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S371");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S371");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S371");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S365");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS364ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S365");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S372
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372");
            this.Manager.Comment("reaching state \'S372\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp81;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp81);
            this.Manager.AddReturn(ReadConfigInfo, null, temp81);
            this.Manager.Comment("reaching state \'S373\'");
            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372ReadConfigChecker3)));
            if ((temp83 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label65;
            }
            if ((temp83 == 1)) {
                this.Manager.Comment("reaching state \'S374\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S376\'");
                int temp82 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker86)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker87)));
                if ((temp82 == 0)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS309();
                    goto label64;
                }
                if ((temp82 == 1)) {
                    this.Manager.Comment("reaching state \'S377\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,SameClient," +
                            "SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S378\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S379\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS363();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372OpenResponseChecker)));
                    }
                    goto label64;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S376\'.");
            label64:
;
                goto label65;
            }
            if ((temp83 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label65;
            }
            if ((temp83 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label65;
            }
            throw new InvalidOperationException("never reached");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S373");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S373");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker86() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker87() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S379");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S379");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S379");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND. "", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S373");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS372ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S373");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S380
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380");
            this.Manager.Comment("reaching state \'S380\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp84;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp84);
            this.Manager.AddReturn(ReadConfigInfo, null, temp84);
            this.Manager.Comment("reaching state \'S381\'");
            int temp86 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380ReadConfigChecker3)));
            if ((temp86 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label67;
            }
            if ((temp86 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label67;
            }
            if ((temp86 == 2)) {
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S384\'");
                int temp85 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker88)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker89)));
                if ((temp85 == 0)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS309();
                    goto label66;
                }
                if ((temp85 == 1)) {
                    this.Manager.Comment("reaching state \'S385\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,DifferentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S386\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S387\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS363();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380OpenResponseChecker)));
                    }
                    goto label66;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S384\'.");
            label66:
;
                goto label67;
            }
            if ((temp86 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S381");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S381");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S381");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker88() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker89() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S387");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S387");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S387");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S387");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS380ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S381");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S388
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388");
            this.Manager.Comment("reaching state \'S388\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp87;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp87);
            this.Manager.AddReturn(ReadConfigInfo, null, temp87);
            this.Manager.Comment("reaching state \'S389\'");
            int temp90 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388ReadConfigChecker3)));
            if ((temp90 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label70;
            }
            if ((temp90 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label70;
            }
            if ((temp90 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label70;
            }
            if ((temp90 == 3)) {
                this.Manager.Comment("reaching state \'S390\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S391\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S392\'");
                int temp89 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker90)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker91)));
                if ((temp89 == 0)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS309();
                    goto label69;
                }
                if ((temp89 == 1)) {
                    this.Manager.Comment("reaching state \'S393\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,LeaseV1,SameLeaseKey,SameClient,Diffe" +
                            "rentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S394\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S395\'");
                    int temp88 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388OpenResponseChecker)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388OpenResponseChecker1)));
                    if ((temp88 == 0)) {
                        this.Manager.Comment("reaching state \'S396\'");
                        goto label68;
                    }
                    if ((temp88 == 1)) {
                        this.Manager.Comment("reaching state \'S397\'");
                        goto label68;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388OpenResponseChecker)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388OpenResponseChecker1)));
                label68:
;
                    goto label69;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S392\'.");
            label69:
;
                goto label70;
            }
            throw new InvalidOperationException("never reached");
        label70:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S389");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S389");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S389");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S389");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker90() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker91() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S395");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S395");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S395");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S395");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS388OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S395");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S395");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S395");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S395");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S398
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398");
            this.Manager.Comment("reaching state \'S398\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp91;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp91);
            this.Manager.AddReturn(ReadConfigInfo, null, temp91);
            this.Manager.Comment("reaching state \'S399\'");
            int temp93 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398ReadConfigChecker3)));
            if ((temp93 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label72;
            }
            if ((temp93 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label72;
            }
            if ((temp93 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label72;
            }
            if ((temp93 == 3)) {
                this.Manager.Comment("reaching state \'S400\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S402\'");
                int temp92 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker92)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker93)));
                if ((temp92 == 0)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS309();
                    goto label71;
                }
                if ((temp92 == 1)) {
                    this.Manager.Comment("reaching state \'S403\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,LeaseV1,DifferentLeaseKey,DifferentCl" +
                            "ient,DifferentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S404\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S405\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS363();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398OpenResponseChecker)));
                    }
                    goto label71;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S402\'.");
            label71:
;
                goto label72;
            }
            throw new InvalidOperationException("never reached");
        label72:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S399");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S399");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S399");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S399");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker92() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker93() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS398OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40");
            this.Manager.Comment("reaching state \'S40\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp94;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp94);
            this.Manager.AddReturn(ReadConfigInfo, null, temp94);
            this.Manager.Comment("reaching state \'S41\'");
            int temp100 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40ReadConfigChecker3)));
            if ((temp100 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label78;
            }
            if ((temp100 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label78;
            }
            if ((temp100 == 2)) {
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S44\'");
                int temp96 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker94)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker97)));
                if ((temp96 == 0)) {
                    this.Manager.Comment("reaching state \'S45\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S46\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S47\'");
                    int temp95 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker95)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker96)));
                    if ((temp95 == 0)) {
                        this.Manager.Comment("reaching state \'S48\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S49\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S50\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS51();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker)));
                        }
                        goto label73;
                    }
                    if ((temp95 == 1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS52();
                        goto label73;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S47\'.");
                label73:
;
                    goto label74;
                }
                if ((temp96 == 1)) {
                    this.Manager.Comment("reaching state \'S53\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,DifferentCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                    this.Manager.Comment("reaching state \'S54\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S55\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker1))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS56();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker1)));
                    }
                    goto label74;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S44\'.");
            label74:
;
                goto label78;
            }
            if ((temp100 == 3)) {
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S59\'");
                int temp99 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker98)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker101)));
                if ((temp99 == 0)) {
                    this.Manager.Comment("reaching state \'S60\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S61\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S62\'");
                    int temp97 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker99)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker100)));
                    if ((temp97 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label75;
                    }
                    if ((temp97 == 1)) {
                        this.Manager.Comment("reaching state \'S63\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S64\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S65\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker2))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS19();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker2)));
                        }
                        goto label75;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S62\'.");
                label75:
;
                    goto label77;
                }
                if ((temp99 == 1)) {
                    this.Manager.Comment("reaching state \'S66\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S67\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S68\'");
                    int temp98 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker102)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker103)));
                    if ((temp98 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label76;
                    }
                    if ((temp98 == 1)) {
                        this.Manager.Comment("reaching state \'S69\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S70\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S71\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker3))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS11();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker3)));
                        }
                        goto label76;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S68\'.");
                label76:
;
                    goto label77;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S59\'.");
            label77:
;
                goto label78;
            }
            throw new InvalidOperationException("never reached");
        label78:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S41");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S41");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S41");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker94() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker95() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is present, or if Open.Lease is NOT NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL."", ""[TestTag] Compatibility"", ""[TestInfo] SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is not present.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.Lease is NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is present, or if Open.Lease is NOT NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create cont" +
                    "ext is not present.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker96() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker97() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S55");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S55");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S55");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S41");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker98() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker99() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker100() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S65");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S65");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S65");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is present, or if Open.Lease is NOT NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Lease is not NULL."", ""[TestTag] Compatibility"", ""[TestInfo] SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is not present.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If Open.Lease is NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is present, or if Open.Lease is NOT NULL and the SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context is not present, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.Lease is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create cont" +
                    "ext is not present.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker101() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker102() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
        }
        
        private void PreConstraintChecker103() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS40OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S71");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S71");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S71");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S71");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S406
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS406() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS406");
            this.Manager.Comment("reaching state \'S406\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp101;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp101);
            this.Manager.AddReturn(ReadConfigInfo, null, temp101);
            this.Manager.Comment("reaching state \'S407\'");
            int temp103 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS406ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS406ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS406ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS406ReadConfigChecker3)));
            if ((temp103 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label80;
            }
            if ((temp103 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label80;
            }
            if ((temp103 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label80;
            }
            if ((temp103 == 3)) {
                this.Manager.Comment("reaching state \'S408\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S409\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S410\'");
                int temp102 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker104)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker105)));
                if ((temp102 == 0)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS309();
                    goto label79;
                }
                if ((temp102 == 1)) {
                    this.Manager.Comment("reaching state \'S411\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S412\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS25();
                    goto label79;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S410\'.");
            label79:
;
                goto label80;
            }
            throw new InvalidOperationException("never reached");
        label80:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS406ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S407");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS406ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S407");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS406ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S407");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS406ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S407");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker104() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker105() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        #endregion
        
        #region Test Starting in S413
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS413() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS413");
            this.Manager.Comment("reaching state \'S413\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp104;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp104);
            this.Manager.AddReturn(ReadConfigInfo, null, temp104);
            this.Manager.Comment("reaching state \'S414\'");
            int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS413ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS413ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS413ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS413ReadConfigChecker3)));
            if ((temp106 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS282();
                goto label82;
            }
            if ((temp106 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label82;
            }
            if ((temp106 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label82;
            }
            if ((temp106 == 3)) {
                this.Manager.Comment("reaching state \'S415\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S416\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S417\'");
                int temp105 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker106)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker107)));
                if ((temp105 == 0)) {
                    this.Manager.Comment("reaching state \'S418\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S419\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS278();
                    goto label81;
                }
                if ((temp105 == 1)) {
                    this.Manager.Comment("reaching state \'S420\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S421\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS132();
                    goto label81;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S417\'.");
            label81:
;
                goto label82;
            }
            throw new InvalidOperationException("never reached");
        label82:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS413ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S414");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS413ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S414");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS413ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S414");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS413ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S414");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker106() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker107() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72");
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp107;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp107);
            this.Manager.AddReturn(ReadConfigInfo, null, temp107);
            this.Manager.Comment("reaching state \'S73\'");
            int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72ReadConfigChecker3)));
            if ((temp112 == 0)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label87;
            }
            if ((temp112 == 1)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label87;
            }
            if ((temp112 == 2)) {
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S75\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S76\'");
                int temp109 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker108)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker111)));
                if ((temp109 == 0)) {
                    this.Manager.Comment("reaching state \'S77\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S78\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S79\'");
                    int temp108 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker109)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker110)));
                    if ((temp108 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS52();
                        goto label83;
                    }
                    if ((temp108 == 1)) {
                        this.Manager.Comment("reaching state \'S80\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S81\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S82\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72OpenResponseChecker))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS51();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72OpenResponseChecker)));
                        }
                        goto label83;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S79\'.");
                label83:
;
                    goto label84;
                }
                if ((temp109 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS83();
                    goto label84;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S76\'.");
            label84:
;
                goto label87;
            }
            if ((temp112 == 3)) {
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S88\'");
                int temp111 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker112)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker115)));
                if ((temp111 == 0)) {
                    this.Manager.Comment("reaching state \'S89\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_LEASE, Lease.LeaseStat" +
                            "e contains SMB2_LEASE_HANDLE_CACHING, Open.OplockState is equal to Held, and Ope" +
                            "n.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S90\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    this.Manager.Comment("reaching state \'S91\'");
                    int temp110 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker113)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker114)));
                    if ((temp110 == 0)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS12();
                        goto label85;
                    }
                    if ((temp110 == 1)) {
                        this.Manager.Comment("reaching state \'S92\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S93\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S94\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72OpenResponseChecker1))) != -1)) {
                            DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS19();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72OpenResponseChecker1)));
                        }
                        goto label85;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S91\'.");
                label85:
;
                    goto label86;
                }
                if ((temp111 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS95();
                    goto label86;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S88\'.");
            label86:
;
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S73");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S73");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S73");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker108() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker109() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker110() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S82");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S82");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S82");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker111() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S73");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker112() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker113() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void PreConstraintChecker114() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS72OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S94");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S94");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S94");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker115() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        #endregion
        
        #region Test Starting in S99
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV2LeaseV1)]
        public void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99() {
            this.Manager.BeginTest("DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99");
            this.Manager.Comment("reaching state \'S99\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp113;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp113);
            this.Manager.AddReturn(ReadConfigInfo, null, temp113);
            this.Manager.Comment("reaching state \'S100\'");
            int temp118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker1)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker2)), new ExpectedReturn(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker3)));
            if ((temp118 == 0)) {
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S103\'");
                int temp116 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker116)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker117)));
                if ((temp116 == 0)) {
                    this.Manager.Comment("reaching state \'S104\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S105\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S106\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS56();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker)));
                    }
                    goto label90;
                }
                if ((temp116 == 1)) {
                    this.Manager.Comment("reaching state \'S107\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S108\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S109\'");
                    int temp115 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker118)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker119)));
                    if ((temp115 == 0)) {
                        this.Manager.Comment("reaching state \'S110\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,LeaseV1,SameLeaseKey,SameClient,Diffe" +
                                "rentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S111\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S112\'");
                        int temp114 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker1)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker2)));
                        if ((temp114 == 0)) {
                            this.Manager.Comment("reaching state \'S113\'");
                            goto label88;
                        }
                        if ((temp114 == 1)) {
                            this.Manager.Comment("reaching state \'S114\'");
                            goto label88;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker1)), new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker2)));
                    label88:
;
                        goto label89;
                    }
                    if ((temp115 == 1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS52();
                        goto label89;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S109\'.");
                label89:
;
                    goto label90;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S103\'.");
            label90:
;
                goto label92;
            }
            if ((temp118 == 1)) {
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV2,LeaseV1)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                        "B 3.x dialect family. \"");
                this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                        "n.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S117\'");
                int temp117 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker120)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker121)));
                if ((temp117 == 0)) {
                    this.Manager.Comment("reaching state \'S118\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                            "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                            "tClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S119\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S120\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker3))) != -1)) {
                        DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS98();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV2PreparedWithLeaseV1ReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker3)));
                    }
                    goto label91;
                }
                if ((temp117 == 1)) {
                    DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS121();
                    goto label91;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S117\'.");
            label91:
;
                goto label92;
            }
            if ((temp118 == 2)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS38();
                goto label92;
            }
            if ((temp118 == 3)) {
                DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS39();
                goto label92;
            }
            throw new InvalidOperationException("never reached");
        label92:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S100");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker116() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S106");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker117() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker118() {
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S112");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S112");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S112");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S112");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S112");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S112");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker119() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S100");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker120() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0))), "Fail to check preconstraint : (c.IsLeasingSupported | 0) == 0");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S120");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S120");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the ClientGuid of the connection that received this request, the server MUST fail the create request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Lease is not NULL and Open.ClientGuid is not equal to the Clie" +
                    "ntGuid of the connection that received this request, the server MUST fail the cr" +
                    "eate request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker121() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 0))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 0) == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S100");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV2PreparedWithLeaseV1ReconnectTestCaseS99ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S100");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
    }
}
