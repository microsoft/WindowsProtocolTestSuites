// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ValidateNegotiateInfoTestCase : PtfTestClassBase {
        
        public ValidateNegotiateInfoTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c);
        
        public delegate void ValidateNegotiateInfoResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config);
        
        public delegate void ValidateNegotiateInfoRequestDelegate1();
        
        public delegate void TerminateConnectionDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.IValidateNegotiateInfoAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig).MakeByRefType());
        
        static System.Reflection.EventInfo ValidateNegotiateInfoResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.IValidateNegotiateInfoAdapter), "ValidateNegotiateInfoResponse");
        
        static System.Reflection.MethodBase ValidateNegotiateInfoRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.IValidateNegotiateInfoAdapter), "ValidateNegotiateInfoRequest", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType));
        
        static System.Reflection.EventInfo TerminateConnectionInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.IValidateNegotiateInfoAdapter), "TerminateConnection");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.IValidateNegotiateInfoAdapter IValidateNegotiateInfoAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig> c1;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig> v;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig> v1;
        
        private IVariable<int> v2;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IValidateNegotiateInfoAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.IValidateNegotiateInfoAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.IValidateNegotiateInfoAdapter))));
            this.Manager.Subscribe(TerminateConnectionInfo, this.IValidateNegotiateInfoAdapterInstance);
            this.Manager.Subscribe(ValidateNegotiateInfoResponseInfo, this.IValidateNegotiateInfoAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>("c1");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>("v");
            this.v1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS0() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp2 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS0ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS0ReadConfigChecker1)));
            if ((temp2 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S16\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S17\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker)));
                }
                goto label1;
            }
            if ((temp2 == 1)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NEGOTIATE" +
                        "_SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S6\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker5)));
                if ((temp1 == 0)) {
                    this.Manager.Comment("reaching state \'S10\'");
                    goto label0;
                }
                if ((temp1 == 1)) {
                    this.Manager.Comment("reaching state \'S11\'");
                    goto label0;
                }
                if ((temp1 == 2)) {
                    this.Manager.Comment("reaching state \'S7\'");
                    goto label0;
                }
                if ((temp1 == 3)) {
                    this.Manager.Comment("reaching state \'S8\'");
                    goto label0;
                }
                if ((temp1 == 4)) {
                    this.Manager.Comment("reaching state \'S9\'");
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker5)));
            label0:
;
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S16");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S16");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS0ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S1006
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS1006() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS1006");
            this.Manager.Comment("reaching state \'S1006\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp3;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp3);
            this.Manager.AddReturn(ReadConfigInfo, null, temp3);
            this.Manager.Comment("reaching state \'S1007\'");
            int temp5 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS1006ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS1006ReadConfigChecker1)));
            if ((temp5 == 0)) {
                this.Manager.Comment("reaching state \'S1008\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S1009\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1010\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S1011\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S1012\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1013\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker)));
                }
                goto label3;
            }
            if ((temp5 == 1)) {
                this.Manager.Comment("reaching state \'S1014\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S1015\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1016\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S1017\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S1018\'");
                int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker5)));
                if ((temp4 == 0)) {
                    this.Manager.Comment("reaching state \'S1019\'");
                    goto label2;
                }
                if ((temp4 == 1)) {
                    this.Manager.Comment("reaching state \'S1020\'");
                    goto label2;
                }
                if ((temp4 == 2)) {
                    this.Manager.Comment("reaching state \'S1021\'");
                    goto label2;
                }
                if ((temp4 == 3)) {
                    this.Manager.Comment("reaching state \'S1022\'");
                    goto label2;
                }
                if ((temp4 == 4)) {
                    this.Manager.Comment("reaching state \'S1023\'");
                    goto label2;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker5)));
            label2:
;
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS1006ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1007");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S1012");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1012");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS1006ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1007");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S1018");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1018");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S1018");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1018");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S1018");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1018");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S1018");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1018");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS1006ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S1018");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1018");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S105
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS105() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS105");
            this.Manager.Comment("reaching state \'S105\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp6;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp6);
            this.Manager.AddReturn(ReadConfigInfo, null, temp6);
            this.Manager.Comment("reaching state \'S106\'");
            int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS105ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS105ReadConfigChecker1)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS83();
                goto label4;
            }
            if ((temp7 == 1)) {
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NEGOTIATE_SIGNING_ENABLED|NEGOT" +
                        "IATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS75();
                goto label4;
            }
            throw new InvalidOperationException("never reached");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS105ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S106");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS83() {
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS105ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S84\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS105TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S85\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS105TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS105ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS105TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS105ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S106");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS75() {
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS105ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S76\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS105TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S77\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS105TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS105ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS105TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S113
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS113() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS113");
            this.Manager.Comment("reaching state \'S113\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp8;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp8);
            this.Manager.AddReturn(ReadConfigInfo, null, temp8);
            this.Manager.Comment("reaching state \'S114\'");
            int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS113ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS113ReadConfigChecker1)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_ENABLED" +
                        "|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS118();
                goto label5;
            }
            if ((temp9 == 1)) {
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS124();
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS113ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S114");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS118() {
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS113ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S119\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS113TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S120\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS113TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS113ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS113TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS113ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S114");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS124() {
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS113ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S125\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS113TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S126\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS113TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS113ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS113TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S127
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS127() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS127");
            this.Manager.Comment("reaching state \'S127\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp10;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp10);
            this.Manager.AddReturn(ReadConfigInfo, null, temp10);
            this.Manager.Comment("reaching state \'S128\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS127ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS127ReadConfigChecker1)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_ENABLED" +
                        "|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS118();
                goto label6;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S132\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S133\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS124();
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS127ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S128");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS127ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S128");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S135
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS135() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS135");
            this.Manager.Comment("reaching state \'S135\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp12;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp12);
            this.Manager.AddReturn(ReadConfigInfo, null, temp12);
            this.Manager.Comment("reaching state \'S136\'");
            int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS135ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS135ReadConfigChecker1)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_ENABLED" +
                        "|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS118();
                goto label7;
            }
            if ((temp13 == 1)) {
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS124();
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS135ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S136");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS135ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S136");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S143
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS143() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS143");
            this.Manager.Comment("reaching state \'S143\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp14;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp14);
            this.Manager.AddReturn(ReadConfigInfo, null, temp14);
            this.Manager.Comment("reaching state \'S144\'");
            int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS143ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS143ReadConfigChecker1)));
            if ((temp15 == 0)) {
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_ENABLED" +
                        "|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S146\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S147\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS118();
                goto label8;
            }
            if ((temp15 == 1)) {
                this.Manager.Comment("reaching state \'S148\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S149\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS124();
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS143ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S144");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS143ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S144");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S151
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS151() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS151");
            this.Manager.Comment("reaching state \'S151\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp16;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp16);
            this.Manager.AddReturn(ReadConfigInfo, null, temp16);
            this.Manager.Comment("reaching state \'S152\'");
            int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS151ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS151ReadConfigChecker1)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S153\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_ENABLED" +
                        "|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS118();
                goto label9;
            }
            if ((temp17 == 1)) {
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS124();
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS151ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S152");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS151ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S152");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S159
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS159() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS159");
            this.Manager.Comment("reaching state \'S159\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp18;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp18);
            this.Manager.AddReturn(ReadConfigInfo, null, temp18);
            this.Manager.Comment("reaching state \'S160\'");
            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS159ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS159ReadConfigChecker1)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS164();
                goto label10;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS170();
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS159ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S160");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS164() {
            this.Manager.Comment("reaching state \'S164\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS159ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S165\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS159TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S166\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS159TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS159ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS159TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS159ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S160");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS170() {
            this.Manager.Comment("reaching state \'S170\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS159ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S171\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS159TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S172\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS159TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS159ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS159TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S173
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS173() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS173");
            this.Manager.Comment("reaching state \'S173\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp20;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp20);
            this.Manager.AddReturn(ReadConfigInfo, null, temp20);
            this.Manager.Comment("reaching state \'S174\'");
            int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS173ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS173ReadConfigChecker1)));
            if ((temp21 == 0)) {
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S176\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS164();
                goto label11;
            }
            if ((temp21 == 1)) {
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS170();
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS173ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S174");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS173ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S174");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS18() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp22;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp22);
            this.Manager.AddReturn(ReadConfigInfo, null, temp22);
            this.Manager.Comment("reaching state \'S19\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS18ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS18ReadConfigChecker1)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS23();
                goto label12;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS29();
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS18ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S19");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS23() {
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS18ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S24\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS18TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S25\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS18TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS18ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS18TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS18ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S19");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS29() {
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS18ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S30\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS18TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S31\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS18TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS18ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS18TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S181
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS181() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS181");
            this.Manager.Comment("reaching state \'S181\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp24;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp24);
            this.Manager.AddReturn(ReadConfigInfo, null, temp24);
            this.Manager.Comment("reaching state \'S182\'");
            int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS181ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS181ReadConfigChecker1)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S184\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S185\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS164();
                goto label13;
            }
            if ((temp25 == 1)) {
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS170();
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS181ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S182");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS181ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S182");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S189
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS189() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS189");
            this.Manager.Comment("reaching state \'S189\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp26;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp26);
            this.Manager.AddReturn(ReadConfigInfo, null, temp26);
            this.Manager.Comment("reaching state \'S190\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS189ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS189ReadConfigChecker1)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S192\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS164();
                goto label14;
            }
            if ((temp27 == 1)) {
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS170();
                goto label14;
            }
            throw new InvalidOperationException("never reached");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS189ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S190");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS189ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S190");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S197
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS197() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS197");
            this.Manager.Comment("reaching state \'S197\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp28;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp28);
            this.Manager.AddReturn(ReadConfigInfo, null, temp28);
            this.Manager.Comment("reaching state \'S198\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS197ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS197ReadConfigChecker1)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS164();
                goto label15;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS170();
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS197ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S198");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS197ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S198");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S205
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS205() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS205");
            this.Manager.Comment("reaching state \'S205\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp30;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp30);
            this.Manager.AddReturn(ReadConfigInfo, null, temp30);
            this.Manager.Comment("reaching state \'S206\'");
            int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS205ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS205ReadConfigChecker1)));
            if ((temp31 == 0)) {
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS210();
                goto label16;
            }
            if ((temp31 == 1)) {
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS216();
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS205ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S206");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS210() {
            this.Manager.Comment("reaching state \'S210\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS205ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S211\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS205TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S212\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS205TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS205ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS205TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS205ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S206");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS216() {
            this.Manager.Comment("reaching state \'S216\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS205ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S217\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS205TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S218\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS205TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS205ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS205TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S219
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS219() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS219");
            this.Manager.Comment("reaching state \'S219\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp32;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp32);
            this.Manager.AddReturn(ReadConfigInfo, null, temp32);
            this.Manager.Comment("reaching state \'S220\'");
            int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS219ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS219ReadConfigChecker1)));
            if ((temp33 == 0)) {
                this.Manager.Comment("reaching state \'S221\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS210();
                goto label17;
            }
            if ((temp33 == 1)) {
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS216();
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS219ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S220");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS219ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S220");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S227
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS227() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS227");
            this.Manager.Comment("reaching state \'S227\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp34;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp34);
            this.Manager.AddReturn(ReadConfigInfo, null, temp34);
            this.Manager.Comment("reaching state \'S228\'");
            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS227ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS227ReadConfigChecker1)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S231\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS210();
                goto label18;
            }
            if ((temp35 == 1)) {
                this.Manager.Comment("reaching state \'S232\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S233\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S234\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS216();
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS227ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S228");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS227ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S228");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S235
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS235() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS235");
            this.Manager.Comment("reaching state \'S235\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp36;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp36);
            this.Manager.AddReturn(ReadConfigInfo, null, temp36);
            this.Manager.Comment("reaching state \'S236\'");
            int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS235ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS235ReadConfigChecker1)));
            if ((temp37 == 0)) {
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS210();
                goto label19;
            }
            if ((temp37 == 1)) {
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S241\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S242\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS216();
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS235ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S236");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS235ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S236");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S243
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS243() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS243");
            this.Manager.Comment("reaching state \'S243\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp38;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp38);
            this.Manager.AddReturn(ReadConfigInfo, null, temp38);
            this.Manager.Comment("reaching state \'S244\'");
            int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS243ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS243ReadConfigChecker1)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S246\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS210();
                goto label20;
            }
            if ((temp39 == 1)) {
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS216();
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS243ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S244");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS243ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S244");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S251
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS251() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS251");
            this.Manager.Comment("reaching state \'S251\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp40;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp40);
            this.Manager.AddReturn(ReadConfigInfo, null, temp40);
            this.Manager.Comment("reaching state \'S252\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS251ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS251ReadConfigChecker1)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S254\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S255\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S257\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS251ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S258\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS251ValidateNegotiateInfoResponseChecker)));
                }
                goto label21;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS262();
                goto label21;
            }
            throw new InvalidOperationException("never reached");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS251ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S252");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS251ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S257");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS251ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S252");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS262() {
            this.Manager.Comment("reaching state \'S262\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS251ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S263\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS251TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S264\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS251TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS251ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS251TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S265
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS265() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS265");
            this.Manager.Comment("reaching state \'S265\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp42;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp42);
            this.Manager.AddReturn(ReadConfigInfo, null, temp42);
            this.Manager.Comment("reaching state \'S266\'");
            int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS265ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS265ReadConfigChecker1)));
            if ((temp43 == 0)) {
                this.Manager.Comment("reaching state \'S267\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS270();
                goto label22;
            }
            if ((temp43 == 1)) {
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS262();
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS265ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S266");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS270() {
            this.Manager.Comment("reaching state \'S270\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS265ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S271\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS265TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S272\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS265TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS265ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS265TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS265ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S266");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS276() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS276");
            this.Manager.Comment("reaching state \'S276\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp44;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp44);
            this.Manager.AddReturn(ReadConfigInfo, null, temp44);
            this.Manager.Comment("reaching state \'S277\'");
            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS276ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS276ReadConfigChecker1)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S278\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S279\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS270();
                goto label23;
            }
            if ((temp45 == 1)) {
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS262();
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS276ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S277");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS276ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S277");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S284
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS284() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS284");
            this.Manager.Comment("reaching state \'S284\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp46;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp46);
            this.Manager.AddReturn(ReadConfigInfo, null, temp46);
            this.Manager.Comment("reaching state \'S285\'");
            int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS284ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS284ReadConfigChecker1)));
            if ((temp47 == 0)) {
                this.Manager.Comment("reaching state \'S286\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S287\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S288\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS270();
                goto label24;
            }
            if ((temp47 == 1)) {
                this.Manager.Comment("reaching state \'S289\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S290\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS262();
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS284ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S285");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS284ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S285");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S292
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS292() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS292");
            this.Manager.Comment("reaching state \'S292\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp48;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp48);
            this.Manager.AddReturn(ReadConfigInfo, null, temp48);
            this.Manager.Comment("reaching state \'S293\'");
            int temp49 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS292ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS292ReadConfigChecker1)));
            if ((temp49 == 0)) {
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS270();
                goto label25;
            }
            if ((temp49 == 1)) {
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S298\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S299\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS262();
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS292ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S293");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS292ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S293");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S300
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS300() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS300");
            this.Manager.Comment("reaching state \'S300\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp50;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp50);
            this.Manager.AddReturn(ReadConfigInfo, null, temp50);
            this.Manager.Comment("reaching state \'S301\'");
            int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS300ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS300ReadConfigChecker1)));
            if ((temp51 == 0)) {
                this.Manager.Comment("reaching state \'S302\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S306\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS300ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S307\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS300ValidateNegotiateInfoResponseChecker)));
                }
                goto label26;
            }
            if ((temp51 == 1)) {
                this.Manager.Comment("reaching state \'S308\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS311();
                goto label26;
            }
            throw new InvalidOperationException("never reached");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS300ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S301");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS300ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S306");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S306");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS300ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S301");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS311() {
            this.Manager.Comment("reaching state \'S311\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS300ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S312\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS300TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S313\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS300TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS300ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS300TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S314
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS314() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS314");
            this.Manager.Comment("reaching state \'S314\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp52;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp52);
            this.Manager.AddReturn(ReadConfigInfo, null, temp52);
            this.Manager.Comment("reaching state \'S315\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS314ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS314ReadConfigChecker1)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S317\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S318\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS319();
                goto label27;
            }
            if ((temp53 == 1)) {
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S323\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S324\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS311();
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS314ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S315");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS319() {
            this.Manager.Comment("reaching state \'S319\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS314ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S320\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS314TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S321\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS314TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS314ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS314TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS314ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S315");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS32() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS32");
            this.Manager.Comment("reaching state \'S32\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp54;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp54);
            this.Manager.AddReturn(ReadConfigInfo, null, temp54);
            this.Manager.Comment("reaching state \'S33\'");
            int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS32ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS32ReadConfigChecker1)));
            if ((temp55 == 0)) {
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS23();
                goto label28;
            }
            if ((temp55 == 1)) {
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS29();
                goto label28;
            }
            throw new InvalidOperationException("never reached");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS32ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S33");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS32ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S33");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S325
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS325() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS325");
            this.Manager.Comment("reaching state \'S325\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp56;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp56);
            this.Manager.AddReturn(ReadConfigInfo, null, temp56);
            this.Manager.Comment("reaching state \'S326\'");
            int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS325ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS325ReadConfigChecker1)));
            if ((temp57 == 0)) {
                this.Manager.Comment("reaching state \'S327\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S328\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S329\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS319();
                goto label29;
            }
            if ((temp57 == 1)) {
                this.Manager.Comment("reaching state \'S330\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S331\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S332\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS311();
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS325ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S326");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS325ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S326");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S333
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS333() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS333");
            this.Manager.Comment("reaching state \'S333\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp58;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp58);
            this.Manager.AddReturn(ReadConfigInfo, null, temp58);
            this.Manager.Comment("reaching state \'S334\'");
            int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS333ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS333ReadConfigChecker1)));
            if ((temp59 == 0)) {
                this.Manager.Comment("reaching state \'S335\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS319();
                goto label30;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S340\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS311();
                goto label30;
            }
            throw new InvalidOperationException("never reached");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS333ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S334");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS333ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S334");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S341
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS341() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS341");
            this.Manager.Comment("reaching state \'S341\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp60;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp60);
            this.Manager.AddReturn(ReadConfigInfo, null, temp60);
            this.Manager.Comment("reaching state \'S342\'");
            int temp62 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS341ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS341ReadConfigChecker1)));
            if ((temp62 == 0)) {
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S344\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S345\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS319();
                goto label32;
            }
            if ((temp62 == 1)) {
                this.Manager.Comment("reaching state \'S346\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S347\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S348\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S350\'");
                int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker4)));
                if ((temp61 == 0)) {
                    this.Manager.Comment("reaching state \'S351\'");
                    goto label31;
                }
                if ((temp61 == 1)) {
                    this.Manager.Comment("reaching state \'S352\'");
                    goto label31;
                }
                if ((temp61 == 2)) {
                    this.Manager.Comment("reaching state \'S353\'");
                    goto label31;
                }
                if ((temp61 == 3)) {
                    this.Manager.Comment("reaching state \'S354\'");
                    goto label31;
                }
                if ((temp61 == 4)) {
                    this.Manager.Comment("reaching state \'S355\'");
                    goto label31;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker4)));
            label31:
;
                goto label32;
            }
            throw new InvalidOperationException("never reached");
        label32:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS341ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S342");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS341ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S342");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S350");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S350");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S350");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S350");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS341ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S350");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S356
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS356() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS356");
            this.Manager.Comment("reaching state \'S356\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp63;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp63);
            this.Manager.AddReturn(ReadConfigInfo, null, temp63);
            this.Manager.Comment("reaching state \'S357\'");
            int temp64 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS356ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS356ReadConfigChecker1)));
            if ((temp64 == 0)) {
                this.Manager.Comment("reaching state \'S358\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NEGOTIATE_S" +
                        "IGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S359\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S360\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS361();
                goto label33;
            }
            if ((temp64 == 1)) {
                this.Manager.Comment("reaching state \'S364\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S365\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S366\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS367();
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS356ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S357");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS361() {
            this.Manager.Comment("reaching state \'S361\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS356ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S362\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS356TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S363\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS356TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS356ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS356TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS356ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S357");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS367() {
            this.Manager.Comment("reaching state \'S367\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS356ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S368\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS356TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S369\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS356TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS356ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS356TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S370
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS370() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS370");
            this.Manager.Comment("reaching state \'S370\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp65;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp65);
            this.Manager.AddReturn(ReadConfigInfo, null, temp65);
            this.Manager.Comment("reaching state \'S371\'");
            int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS370ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS370ReadConfigChecker1)));
            if ((temp66 == 0)) {
                this.Manager.Comment("reaching state \'S372\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NEGOTIATE_S" +
                        "IGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S373\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S374\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS361();
                goto label34;
            }
            if ((temp66 == 1)) {
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S376\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S377\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS367();
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS370ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S371");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS370ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S371");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S378
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS378() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS378");
            this.Manager.Comment("reaching state \'S378\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp67;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp67);
            this.Manager.AddReturn(ReadConfigInfo, null, temp67);
            this.Manager.Comment("reaching state \'S379\'");
            int temp68 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS378ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS378ReadConfigChecker1)));
            if ((temp68 == 0)) {
                this.Manager.Comment("reaching state \'S380\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NEGOTIATE_S" +
                        "IGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S381\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS361();
                goto label35;
            }
            if ((temp68 == 1)) {
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS367();
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS378ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S379");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS378ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S379");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S386
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS386() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS386");
            this.Manager.Comment("reaching state \'S386\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp69;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp69);
            this.Manager.AddReturn(ReadConfigInfo, null, temp69);
            this.Manager.Comment("reaching state \'S387\'");
            int temp70 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS386ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS386ReadConfigChecker1)));
            if ((temp70 == 0)) {
                this.Manager.Comment("reaching state \'S388\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NEGOTIATE_S" +
                        "IGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S389\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S390\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS361();
                goto label36;
            }
            if ((temp70 == 1)) {
                this.Manager.Comment("reaching state \'S391\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S392\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S393\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS367();
                goto label36;
            }
            throw new InvalidOperationException("never reached");
        label36:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS386ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S387");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS386ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S387");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S394
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS394() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS394");
            this.Manager.Comment("reaching state \'S394\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp71;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp71);
            this.Manager.AddReturn(ReadConfigInfo, null, temp71);
            this.Manager.Comment("reaching state \'S395\'");
            int temp72 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS394ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS394ReadConfigChecker1)));
            if ((temp72 == 0)) {
                this.Manager.Comment("reaching state \'S396\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NEGOTIATE_S" +
                        "IGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S397\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S398\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS361();
                goto label37;
            }
            if ((temp72 == 1)) {
                this.Manager.Comment("reaching state \'S399\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S400\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS367();
                goto label37;
            }
            throw new InvalidOperationException("never reached");
        label37:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS394ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S395");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS394ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S395");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS40() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS40");
            this.Manager.Comment("reaching state \'S40\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp73;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp73);
            this.Manager.AddReturn(ReadConfigInfo, null, temp73);
            this.Manager.Comment("reaching state \'S41\'");
            int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS40ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS40ReadConfigChecker1)));
            if ((temp74 == 0)) {
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS23();
                goto label38;
            }
            if ((temp74 == 1)) {
                this.Manager.Comment("reaching state \'S45\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S47\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS29();
                goto label38;
            }
            throw new InvalidOperationException("never reached");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS40ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S41");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS40ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S41");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S402
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS402() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS402");
            this.Manager.Comment("reaching state \'S402\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp75;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp75);
            this.Manager.AddReturn(ReadConfigInfo, null, temp75);
            this.Manager.Comment("reaching state \'S403\'");
            int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS402ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS402ReadConfigChecker1)));
            if ((temp76 == 0)) {
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S405\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S406\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS407();
                goto label39;
            }
            if ((temp76 == 1)) {
                this.Manager.Comment("reaching state \'S410\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S412\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS413();
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS402ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S403");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS407() {
            this.Manager.Comment("reaching state \'S407\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS402ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S408\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS402TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S409\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS402TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS402ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS402TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS402ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S403");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS413() {
            this.Manager.Comment("reaching state \'S413\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS402ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S414\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS402TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S415\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS402TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS402ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS402TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S416
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS416() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS416");
            this.Manager.Comment("reaching state \'S416\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp77;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp77);
            this.Manager.AddReturn(ReadConfigInfo, null, temp77);
            this.Manager.Comment("reaching state \'S417\'");
            int temp78 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS416ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS416ReadConfigChecker1)));
            if ((temp78 == 0)) {
                this.Manager.Comment("reaching state \'S418\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S419\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S420\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS407();
                goto label40;
            }
            if ((temp78 == 1)) {
                this.Manager.Comment("reaching state \'S421\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S422\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S423\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS413();
                goto label40;
            }
            throw new InvalidOperationException("never reached");
        label40:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS416ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S417");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS416ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S417");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S424
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS424() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS424");
            this.Manager.Comment("reaching state \'S424\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp79;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp79);
            this.Manager.AddReturn(ReadConfigInfo, null, temp79);
            this.Manager.Comment("reaching state \'S425\'");
            int temp80 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS424ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS424ReadConfigChecker1)));
            if ((temp80 == 0)) {
                this.Manager.Comment("reaching state \'S426\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S427\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S428\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS407();
                goto label41;
            }
            if ((temp80 == 1)) {
                this.Manager.Comment("reaching state \'S429\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S430\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S431\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS413();
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS424ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S425");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS424ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S425");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S432
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS432() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS432");
            this.Manager.Comment("reaching state \'S432\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp81;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp81);
            this.Manager.AddReturn(ReadConfigInfo, null, temp81);
            this.Manager.Comment("reaching state \'S433\'");
            int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS432ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS432ReadConfigChecker1)));
            if ((temp82 == 0)) {
                this.Manager.Comment("reaching state \'S434\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S435\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S436\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS407();
                goto label42;
            }
            if ((temp82 == 1)) {
                this.Manager.Comment("reaching state \'S437\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S438\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S439\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS413();
                goto label42;
            }
            throw new InvalidOperationException("never reached");
        label42:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS432ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S433");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS432ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S433");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S440
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS440() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS440");
            this.Manager.Comment("reaching state \'S440\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp83;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp83);
            this.Manager.AddReturn(ReadConfigInfo, null, temp83);
            this.Manager.Comment("reaching state \'S441\'");
            int temp84 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS440ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS440ReadConfigChecker1)));
            if ((temp84 == 0)) {
                this.Manager.Comment("reaching state \'S442\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S443\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S444\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS407();
                goto label43;
            }
            if ((temp84 == 1)) {
                this.Manager.Comment("reaching state \'S445\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S446\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S447\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS413();
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS440ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S441");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS440ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S441");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S448
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS448() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS448");
            this.Manager.Comment("reaching state \'S448\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp85;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp85);
            this.Manager.AddReturn(ReadConfigInfo, null, temp85);
            this.Manager.Comment("reaching state \'S449\'");
            int temp86 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS448ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS448ReadConfigChecker1)));
            if ((temp86 == 0)) {
                this.Manager.Comment("reaching state \'S450\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S451\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S452\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS453();
                goto label44;
            }
            if ((temp86 == 1)) {
                this.Manager.Comment("reaching state \'S456\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)\'" +
                        "");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S457\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S458\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS459();
                goto label44;
            }
            throw new InvalidOperationException("never reached");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS448ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S449");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS453() {
            this.Manager.Comment("reaching state \'S453\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS448ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S454\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS448TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S455\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS448TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS448ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS448TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS448ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S449");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS459() {
            this.Manager.Comment("reaching state \'S459\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS448ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S460\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS448TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S461\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS448TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS448ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS448TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S462
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS462() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS462");
            this.Manager.Comment("reaching state \'S462\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp87;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp87);
            this.Manager.AddReturn(ReadConfigInfo, null, temp87);
            this.Manager.Comment("reaching state \'S463\'");
            int temp88 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS462ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS462ReadConfigChecker1)));
            if ((temp88 == 0)) {
                this.Manager.Comment("reaching state \'S464\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S465\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S466\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS453();
                goto label45;
            }
            if ((temp88 == 1)) {
                this.Manager.Comment("reaching state \'S467\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)\'" +
                        "");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S468\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S469\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS459();
                goto label45;
            }
            throw new InvalidOperationException("never reached");
        label45:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS462ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS462ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S470
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS470() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS470");
            this.Manager.Comment("reaching state \'S470\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp89;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp89);
            this.Manager.AddReturn(ReadConfigInfo, null, temp89);
            this.Manager.Comment("reaching state \'S471\'");
            int temp90 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS470ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS470ReadConfigChecker1)));
            if ((temp90 == 0)) {
                this.Manager.Comment("reaching state \'S472\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S473\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S474\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS453();
                goto label46;
            }
            if ((temp90 == 1)) {
                this.Manager.Comment("reaching state \'S475\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)\'" +
                        "");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S476\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S477\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS459();
                goto label46;
            }
            throw new InvalidOperationException("never reached");
        label46:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS470ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S471");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS470ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S471");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S478
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS478() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS478");
            this.Manager.Comment("reaching state \'S478\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp91;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp91);
            this.Manager.AddReturn(ReadConfigInfo, null, temp91);
            this.Manager.Comment("reaching state \'S479\'");
            int temp92 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS478ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS478ReadConfigChecker1)));
            if ((temp92 == 0)) {
                this.Manager.Comment("reaching state \'S480\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S481\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S482\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS453();
                goto label47;
            }
            if ((temp92 == 1)) {
                this.Manager.Comment("reaching state \'S483\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)\'" +
                        "");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S484\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S485\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS459();
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS478ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S479");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS478ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S479");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS48() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS48");
            this.Manager.Comment("reaching state \'S48\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp93;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp93);
            this.Manager.AddReturn(ReadConfigInfo, null, temp93);
            this.Manager.Comment("reaching state \'S49\'");
            int temp94 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS48ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS48ReadConfigChecker1)));
            if ((temp94 == 0)) {
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS23();
                goto label48;
            }
            if ((temp94 == 1)) {
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS29();
                goto label48;
            }
            throw new InvalidOperationException("never reached");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS48ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S49");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS48ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S49");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S486
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS486() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS486");
            this.Manager.Comment("reaching state \'S486\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp95;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp95);
            this.Manager.AddReturn(ReadConfigInfo, null, temp95);
            this.Manager.Comment("reaching state \'S487\'");
            int temp96 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS486ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS486ReadConfigChecker1)));
            if ((temp96 == 0)) {
                this.Manager.Comment("reaching state \'S488\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S489\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S490\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS453();
                goto label49;
            }
            if ((temp96 == 1)) {
                this.Manager.Comment("reaching state \'S491\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)\'" +
                        "");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S492\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S493\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS459();
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS486ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S487");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS486ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S487");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S494
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS494() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS494");
            this.Manager.Comment("reaching state \'S494\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp97;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp97);
            this.Manager.AddReturn(ReadConfigInfo, null, temp97);
            this.Manager.Comment("reaching state \'S495\'");
            int temp98 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS494ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS494ReadConfigChecker1)));
            if ((temp98 == 0)) {
                this.Manager.Comment("reaching state \'S496\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S497\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S498\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS499();
                goto label50;
            }
            if ((temp98 == 1)) {
                this.Manager.Comment("reaching state \'S502\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_REQUIRE" +
                        "D)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S503\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S504\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS505();
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS494ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S495");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS499() {
            this.Manager.Comment("reaching state \'S499\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS494ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S500\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS494TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S501\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS494TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS494ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS494TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS494ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S495");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS505() {
            this.Manager.Comment("reaching state \'S505\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS494ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S506\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS494TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S507\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS494TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS494ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS494TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S508
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS508() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS508");
            this.Manager.Comment("reaching state \'S508\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp99;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp99);
            this.Manager.AddReturn(ReadConfigInfo, null, temp99);
            this.Manager.Comment("reaching state \'S509\'");
            int temp100 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS508ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS508ReadConfigChecker1)));
            if ((temp100 == 0)) {
                this.Manager.Comment("reaching state \'S510\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S511\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S512\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS499();
                goto label51;
            }
            if ((temp100 == 1)) {
                this.Manager.Comment("reaching state \'S513\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_REQUIRE" +
                        "D)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S514\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S515\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS505();
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS508ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S509");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS508ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S509");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S516
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS516() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS516");
            this.Manager.Comment("reaching state \'S516\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp101;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp101);
            this.Manager.AddReturn(ReadConfigInfo, null, temp101);
            this.Manager.Comment("reaching state \'S517\'");
            int temp102 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS516ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS516ReadConfigChecker1)));
            if ((temp102 == 0)) {
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S520\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS499();
                goto label52;
            }
            if ((temp102 == 1)) {
                this.Manager.Comment("reaching state \'S521\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_REQUIRE" +
                        "D)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S522\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S523\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS505();
                goto label52;
            }
            throw new InvalidOperationException("never reached");
        label52:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS516ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S517");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS516ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S517");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S524
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS524() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS524");
            this.Manager.Comment("reaching state \'S524\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp103;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp103);
            this.Manager.AddReturn(ReadConfigInfo, null, temp103);
            this.Manager.Comment("reaching state \'S525\'");
            int temp104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS524ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS524ReadConfigChecker1)));
            if ((temp104 == 0)) {
                this.Manager.Comment("reaching state \'S526\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S527\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S528\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS499();
                goto label53;
            }
            if ((temp104 == 1)) {
                this.Manager.Comment("reaching state \'S529\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_REQUIRE" +
                        "D)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S530\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S531\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS505();
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS524ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S525");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS524ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S525");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S532
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS532() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS532");
            this.Manager.Comment("reaching state \'S532\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp105;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp105);
            this.Manager.AddReturn(ReadConfigInfo, null, temp105);
            this.Manager.Comment("reaching state \'S533\'");
            int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS532ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS532ReadConfigChecker1)));
            if ((temp106 == 0)) {
                this.Manager.Comment("reaching state \'S534\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S535\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S536\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS499();
                goto label54;
            }
            if ((temp106 == 1)) {
                this.Manager.Comment("reaching state \'S537\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_REQUIRE" +
                        "D)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S538\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S539\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS505();
                goto label54;
            }
            throw new InvalidOperationException("never reached");
        label54:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS532ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S533");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS532ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S533");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S540
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS540() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS540");
            this.Manager.Comment("reaching state \'S540\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp107;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp107);
            this.Manager.AddReturn(ReadConfigInfo, null, temp107);
            this.Manager.Comment("reaching state \'S541\'");
            int temp108 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS540ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS540ReadConfigChecker1)));
            if ((temp108 == 0)) {
                this.Manager.Comment("reaching state \'S542\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S543\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S544\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS545();
                goto label55;
            }
            if ((temp108 == 1)) {
                this.Manager.Comment("reaching state \'S548\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S549\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS551();
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS540ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S541");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS545() {
            this.Manager.Comment("reaching state \'S545\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS540ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S546\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS540TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S547\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS540TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS540ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS540TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS540ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S541");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS551() {
            this.Manager.Comment("reaching state \'S551\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS540ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S552\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS540TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S553\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS540TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS540ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS540TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S554
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS554() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS554");
            this.Manager.Comment("reaching state \'S554\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp109;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp109);
            this.Manager.AddReturn(ReadConfigInfo, null, temp109);
            this.Manager.Comment("reaching state \'S555\'");
            int temp110 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS554ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS554ReadConfigChecker1)));
            if ((temp110 == 0)) {
                this.Manager.Comment("reaching state \'S556\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S557\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S558\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS545();
                goto label56;
            }
            if ((temp110 == 1)) {
                this.Manager.Comment("reaching state \'S559\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S560\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S561\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS551();
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS554ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S555");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS554ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S555");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS56() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS56");
            this.Manager.Comment("reaching state \'S56\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp111;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp111);
            this.Manager.AddReturn(ReadConfigInfo, null, temp111);
            this.Manager.Comment("reaching state \'S57\'");
            int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS56ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS56ReadConfigChecker1)));
            if ((temp112 == 0)) {
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS23();
                goto label57;
            }
            if ((temp112 == 1)) {
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS29();
                goto label57;
            }
            throw new InvalidOperationException("never reached");
        label57:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS56ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S57");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS56ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S57");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S562
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS562() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS562");
            this.Manager.Comment("reaching state \'S562\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp113;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp113);
            this.Manager.AddReturn(ReadConfigInfo, null, temp113);
            this.Manager.Comment("reaching state \'S563\'");
            int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS562ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS562ReadConfigChecker1)));
            if ((temp114 == 0)) {
                this.Manager.Comment("reaching state \'S564\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S565\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S566\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS545();
                goto label58;
            }
            if ((temp114 == 1)) {
                this.Manager.Comment("reaching state \'S567\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S568\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S569\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS551();
                goto label58;
            }
            throw new InvalidOperationException("never reached");
        label58:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS562ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S563");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS562ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S563");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S570
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS570() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS570");
            this.Manager.Comment("reaching state \'S570\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp115;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp115);
            this.Manager.AddReturn(ReadConfigInfo, null, temp115);
            this.Manager.Comment("reaching state \'S571\'");
            int temp116 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS570ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS570ReadConfigChecker1)));
            if ((temp116 == 0)) {
                this.Manager.Comment("reaching state \'S572\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S573\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S574\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS545();
                goto label59;
            }
            if ((temp116 == 1)) {
                this.Manager.Comment("reaching state \'S575\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S576\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S577\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS551();
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS570ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S571");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS570ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S571");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S578
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS578() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS578");
            this.Manager.Comment("reaching state \'S578\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp117;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp117);
            this.Manager.AddReturn(ReadConfigInfo, null, temp117);
            this.Manager.Comment("reaching state \'S579\'");
            int temp118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS578ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS578ReadConfigChecker1)));
            if ((temp118 == 0)) {
                this.Manager.Comment("reaching state \'S580\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S581\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S582\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS545();
                goto label60;
            }
            if ((temp118 == 1)) {
                this.Manager.Comment("reaching state \'S583\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S584\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S585\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS551();
                goto label60;
            }
            throw new InvalidOperationException("never reached");
        label60:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS578ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S579");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS578ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S579");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S586
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS586() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS586");
            this.Manager.Comment("reaching state \'S586\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp119;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp119);
            this.Manager.AddReturn(ReadConfigInfo, null, temp119);
            this.Manager.Comment("reaching state \'S587\'");
            int temp120 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS586ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS586ReadConfigChecker1)));
            if ((temp120 == 0)) {
                this.Manager.Comment("reaching state \'S588\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S589\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S590\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS591();
                goto label61;
            }
            if ((temp120 == 1)) {
                this.Manager.Comment("reaching state \'S594\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S595\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S596\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS597();
                goto label61;
            }
            throw new InvalidOperationException("never reached");
        label61:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS586ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S587");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS591() {
            this.Manager.Comment("reaching state \'S591\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS586ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S592\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS586TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S593\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS586TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS586ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS586TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS586ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S587");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS597() {
            this.Manager.Comment("reaching state \'S597\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS586ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S598\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS586TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S599\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS586TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS586ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS586TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S600
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS600() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS600");
            this.Manager.Comment("reaching state \'S600\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp121;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp121);
            this.Manager.AddReturn(ReadConfigInfo, null, temp121);
            this.Manager.Comment("reaching state \'S601\'");
            int temp122 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS600ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS600ReadConfigChecker1)));
            if ((temp122 == 0)) {
                this.Manager.Comment("reaching state \'S602\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S603\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S604\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS591();
                goto label62;
            }
            if ((temp122 == 1)) {
                this.Manager.Comment("reaching state \'S605\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S606\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S607\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS597();
                goto label62;
            }
            throw new InvalidOperationException("never reached");
        label62:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS600ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S601");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS600ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S601");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S608
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS608() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS608");
            this.Manager.Comment("reaching state \'S608\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp123;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp123);
            this.Manager.AddReturn(ReadConfigInfo, null, temp123);
            this.Manager.Comment("reaching state \'S609\'");
            int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS608ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS608ReadConfigChecker1)));
            if ((temp124 == 0)) {
                this.Manager.Comment("reaching state \'S610\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S611\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S612\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS591();
                goto label63;
            }
            if ((temp124 == 1)) {
                this.Manager.Comment("reaching state \'S613\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S614\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S615\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS597();
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS608ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S609");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS608ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S609");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S616
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS616() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS616");
            this.Manager.Comment("reaching state \'S616\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp125;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp125);
            this.Manager.AddReturn(ReadConfigInfo, null, temp125);
            this.Manager.Comment("reaching state \'S617\'");
            int temp126 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS616ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS616ReadConfigChecker1)));
            if ((temp126 == 0)) {
                this.Manager.Comment("reaching state \'S618\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S619\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S620\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS591();
                goto label64;
            }
            if ((temp126 == 1)) {
                this.Manager.Comment("reaching state \'S621\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S622\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S623\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS597();
                goto label64;
            }
            throw new InvalidOperationException("never reached");
        label64:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS616ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S617");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS616ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S617");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S624
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS624() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS624");
            this.Manager.Comment("reaching state \'S624\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp127;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp127);
            this.Manager.AddReturn(ReadConfigInfo, null, temp127);
            this.Manager.Comment("reaching state \'S625\'");
            int temp128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS624ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS624ReadConfigChecker1)));
            if ((temp128 == 0)) {
                this.Manager.Comment("reaching state \'S626\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S627\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S628\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS591();
                goto label65;
            }
            if ((temp128 == 1)) {
                this.Manager.Comment("reaching state \'S629\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S630\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S631\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS597();
                goto label65;
            }
            throw new InvalidOperationException("never reached");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS624ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S625");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS624ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S625");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S632
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS632() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS632");
            this.Manager.Comment("reaching state \'S632\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp129;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp129);
            this.Manager.AddReturn(ReadConfigInfo, null, temp129);
            this.Manager.Comment("reaching state \'S633\'");
            int temp130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS632ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS632ReadConfigChecker1)));
            if ((temp130 == 0)) {
                this.Manager.Comment("reaching state \'S634\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED|" +
                        "NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S635\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S636\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS637();
                goto label66;
            }
            if ((temp130 == 1)) {
                this.Manager.Comment("reaching state \'S640\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S641\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S642\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS643();
                goto label66;
            }
            throw new InvalidOperationException("never reached");
        label66:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS632ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S633");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS637() {
            this.Manager.Comment("reaching state \'S637\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS632ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S638\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS632TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S639\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS632TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS632ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS632TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS632ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S633");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS643() {
            this.Manager.Comment("reaching state \'S643\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS632ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S644\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS632TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S645\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS632TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS632ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS632TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS64() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS64");
            this.Manager.Comment("reaching state \'S64\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp131;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp131);
            this.Manager.AddReturn(ReadConfigInfo, null, temp131);
            this.Manager.Comment("reaching state \'S65\'");
            int temp132 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS64ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS64ReadConfigChecker1)));
            if ((temp132 == 0)) {
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S70\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS64ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S71\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS64ValidateNegotiateInfoResponseChecker)));
                }
                goto label67;
            }
            if ((temp132 == 1)) {
                this.Manager.Comment("reaching state \'S72\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NEGOTIATE_SIGNING_ENABLED|NEGOT" +
                        "IATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S73\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS75();
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS64ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S65");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS64ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S70");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS64ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S65");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S646
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS646() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS646");
            this.Manager.Comment("reaching state \'S646\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp133;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp133);
            this.Manager.AddReturn(ReadConfigInfo, null, temp133);
            this.Manager.Comment("reaching state \'S647\'");
            int temp134 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS646ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS646ReadConfigChecker1)));
            if ((temp134 == 0)) {
                this.Manager.Comment("reaching state \'S648\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED|" +
                        "NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S649\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S650\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS637();
                goto label68;
            }
            if ((temp134 == 1)) {
                this.Manager.Comment("reaching state \'S651\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S652\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S653\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS643();
                goto label68;
            }
            throw new InvalidOperationException("never reached");
        label68:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS646ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S647");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS646ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S647");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S654
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS654() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS654");
            this.Manager.Comment("reaching state \'S654\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp135;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp135);
            this.Manager.AddReturn(ReadConfigInfo, null, temp135);
            this.Manager.Comment("reaching state \'S655\'");
            int temp136 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS654ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS654ReadConfigChecker1)));
            if ((temp136 == 0)) {
                this.Manager.Comment("reaching state \'S656\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED|" +
                        "NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S657\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S658\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS637();
                goto label69;
            }
            if ((temp136 == 1)) {
                this.Manager.Comment("reaching state \'S659\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S660\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S661\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS643();
                goto label69;
            }
            throw new InvalidOperationException("never reached");
        label69:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS654ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S655");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS654ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S655");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S662
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS662() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS662");
            this.Manager.Comment("reaching state \'S662\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp137;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp137);
            this.Manager.AddReturn(ReadConfigInfo, null, temp137);
            this.Manager.Comment("reaching state \'S663\'");
            int temp138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS662ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS662ReadConfigChecker1)));
            if ((temp138 == 0)) {
                this.Manager.Comment("reaching state \'S664\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED|" +
                        "NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S665\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S666\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS637();
                goto label70;
            }
            if ((temp138 == 1)) {
                this.Manager.Comment("reaching state \'S667\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S668\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S669\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS643();
                goto label70;
            }
            throw new InvalidOperationException("never reached");
        label70:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS662ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S663");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS662ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S663");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S670
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS670() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS670");
            this.Manager.Comment("reaching state \'S670\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp139;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp139);
            this.Manager.AddReturn(ReadConfigInfo, null, temp139);
            this.Manager.Comment("reaching state \'S671\'");
            int temp140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS670ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS670ReadConfigChecker1)));
            if ((temp140 == 0)) {
                this.Manager.Comment("reaching state \'S672\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED|" +
                        "NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S673\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S674\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS637();
                goto label71;
            }
            if ((temp140 == 1)) {
                this.Manager.Comment("reaching state \'S675\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S676\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S677\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS643();
                goto label71;
            }
            throw new InvalidOperationException("never reached");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS670ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S671");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS670ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S671");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S678
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS678() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS678");
            this.Manager.Comment("reaching state \'S678\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp141;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp141);
            this.Manager.AddReturn(ReadConfigInfo, null, temp141);
            this.Manager.Comment("reaching state \'S679\'");
            int temp142 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS678ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS678ReadConfigChecker1)));
            if ((temp142 == 0)) {
                this.Manager.Comment("reaching state \'S680\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S681\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S682\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS683();
                goto label72;
            }
            if ((temp142 == 1)) {
                this.Manager.Comment("reaching state \'S686\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S687\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S688\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS689();
                goto label72;
            }
            throw new InvalidOperationException("never reached");
        label72:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS678ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S679");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS683() {
            this.Manager.Comment("reaching state \'S683\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS678ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S684\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS678TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S685\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS678TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS678ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS678TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS678ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S679");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS689() {
            this.Manager.Comment("reaching state \'S689\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS678ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S690\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS678TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S691\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS678TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS678ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS678TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S692
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS692() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS692");
            this.Manager.Comment("reaching state \'S692\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp143;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp143);
            this.Manager.AddReturn(ReadConfigInfo, null, temp143);
            this.Manager.Comment("reaching state \'S693\'");
            int temp144 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS692ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS692ReadConfigChecker1)));
            if ((temp144 == 0)) {
                this.Manager.Comment("reaching state \'S694\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S695\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S696\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS683();
                goto label73;
            }
            if ((temp144 == 1)) {
                this.Manager.Comment("reaching state \'S697\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S698\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S699\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS689();
                goto label73;
            }
            throw new InvalidOperationException("never reached");
        label73:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS692ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S693");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS692ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S693");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S700
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS700() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS700");
            this.Manager.Comment("reaching state \'S700\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp145;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp145);
            this.Manager.AddReturn(ReadConfigInfo, null, temp145);
            this.Manager.Comment("reaching state \'S701\'");
            int temp146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS700ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS700ReadConfigChecker1)));
            if ((temp146 == 0)) {
                this.Manager.Comment("reaching state \'S702\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S703\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S704\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS683();
                goto label74;
            }
            if ((temp146 == 1)) {
                this.Manager.Comment("reaching state \'S705\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S706\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S707\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS689();
                goto label74;
            }
            throw new InvalidOperationException("never reached");
        label74:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS700ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S701");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS700ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S701");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S708
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS708() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS708");
            this.Manager.Comment("reaching state \'S708\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp147;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp147);
            this.Manager.AddReturn(ReadConfigInfo, null, temp147);
            this.Manager.Comment("reaching state \'S709\'");
            int temp148 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS708ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS708ReadConfigChecker1)));
            if ((temp148 == 0)) {
                this.Manager.Comment("reaching state \'S710\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S711\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S712\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS683();
                goto label75;
            }
            if ((temp148 == 1)) {
                this.Manager.Comment("reaching state \'S713\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S714\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S715\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS689();
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS708ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S709");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS708ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S709");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S716
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS716() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS716");
            this.Manager.Comment("reaching state \'S716\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp149;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp149);
            this.Manager.AddReturn(ReadConfigInfo, null, temp149);
            this.Manager.Comment("reaching state \'S717\'");
            int temp150 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS716ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS716ReadConfigChecker1)));
            if ((temp150 == 0)) {
                this.Manager.Comment("reaching state \'S718\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S719\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S720\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS683();
                goto label76;
            }
            if ((temp150 == 1)) {
                this.Manager.Comment("reaching state \'S721\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S722\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S723\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS689();
                goto label76;
            }
            throw new InvalidOperationException("never reached");
        label76:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS716ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S717");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS716ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S717");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S724
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS724() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS724");
            this.Manager.Comment("reaching state \'S724\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp151;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp151);
            this.Manager.AddReturn(ReadConfigInfo, null, temp151);
            this.Manager.Comment("reaching state \'S725\'");
            int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS724ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS724ReadConfigChecker1)));
            if ((temp152 == 0)) {
                this.Manager.Comment("reaching state \'S726\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S727\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S728\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS729();
                goto label77;
            }
            if ((temp152 == 1)) {
                this.Manager.Comment("reaching state \'S732\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NEGOTIATE" +
                        "_SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S733\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S734\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS735();
                goto label77;
            }
            throw new InvalidOperationException("never reached");
        label77:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS724ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S725");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS729() {
            this.Manager.Comment("reaching state \'S729\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS724ValidateNegotiateInfoRequestChecker)));
            this.Manager.Comment("reaching state \'S730\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS724TerminateConnectionChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S731\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS724TerminateConnectionChecker)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS724ValidateNegotiateInfoRequestChecker() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS724TerminateConnectionChecker() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        
        private void ValidateNegotiateInfoTestCaseS724ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S725");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS735() {
            this.Manager.Comment("reaching state \'S735\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoRequestInfo, null, new ValidateNegotiateInfoRequestDelegate1(this.ValidateNegotiateInfoTestCaseS724ValidateNegotiateInfoRequestChecker1)));
            this.Manager.Comment("reaching state \'S736\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS724TerminateConnectionChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S737\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.TerminateConnectionInfo, null, new TerminateConnectionDelegate1(this.ValidateNegotiateInfoTestCaseS724TerminateConnectionChecker1)));
            }
        }
        
        private void ValidateNegotiateInfoTestCaseS724ValidateNegotiateInfoRequestChecker1() {
            this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
        }
        
        private void ValidateNegotiateInfoTestCaseS724TerminateConnectionChecker1() {
            this.Manager.Comment("checking step \'event TerminateConnection()\'");
            this.Manager.Checkpoint("\"[TestInfo] Server MUST terminate the transport connection and free the Connectio" +
                    "n object\"");
        }
        #endregion
        
        #region Test Starting in S738
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS738() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS738");
            this.Manager.Comment("reaching state \'S738\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp153;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp153);
            this.Manager.AddReturn(ReadConfigInfo, null, temp153);
            this.Manager.Comment("reaching state \'S739\'");
            int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS738ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS738ReadConfigChecker1)));
            if ((temp154 == 0)) {
                this.Manager.Comment("reaching state \'S740\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S741\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S742\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS729();
                goto label78;
            }
            if ((temp154 == 1)) {
                this.Manager.Comment("reaching state \'S743\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NEGOTIATE" +
                        "_SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S744\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S745\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS735();
                goto label78;
            }
            throw new InvalidOperationException("never reached");
        label78:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS738ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S739");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS738ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S739");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S746
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS746() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS746");
            this.Manager.Comment("reaching state \'S746\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp155;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp155);
            this.Manager.AddReturn(ReadConfigInfo, null, temp155);
            this.Manager.Comment("reaching state \'S747\'");
            int temp156 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS746ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS746ReadConfigChecker1)));
            if ((temp156 == 0)) {
                this.Manager.Comment("reaching state \'S748\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S749\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S750\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS729();
                goto label79;
            }
            if ((temp156 == 1)) {
                this.Manager.Comment("reaching state \'S751\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NEGOTIATE" +
                        "_SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S752\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S753\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS735();
                goto label79;
            }
            throw new InvalidOperationException("never reached");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS746ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S747");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS746ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S747");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S754
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS754() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS754");
            this.Manager.Comment("reaching state \'S754\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp157;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp157);
            this.Manager.AddReturn(ReadConfigInfo, null, temp157);
            this.Manager.Comment("reaching state \'S755\'");
            int temp158 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS754ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS754ReadConfigChecker1)));
            if ((temp158 == 0)) {
                this.Manager.Comment("reaching state \'S756\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S757\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S758\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS729();
                goto label80;
            }
            if ((temp158 == 1)) {
                this.Manager.Comment("reaching state \'S759\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NEGOTIATE" +
                        "_SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S760\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S761\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS735();
                goto label80;
            }
            throw new InvalidOperationException("never reached");
        label80:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS754ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S755");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS754ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S755");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S762
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS762() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS762");
            this.Manager.Comment("reaching state \'S762\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp159;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp159);
            this.Manager.AddReturn(ReadConfigInfo, null, temp159);
            this.Manager.Comment("reaching state \'S763\'");
            int temp160 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS762ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS762ReadConfigChecker1)));
            if ((temp160 == 0)) {
                this.Manager.Comment("reaching state \'S764\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForSmb30,NEGOTIATE_SI" +
                        "GNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S765\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S766\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS729();
                goto label81;
            }
            if ((temp160 == 1)) {
                this.Manager.Comment("reaching state \'S767\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NEGOTIATE" +
                        "_SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S768\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S769\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS735();
                goto label81;
            }
            throw new InvalidOperationException("never reached");
        label81:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS762ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S763");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS762ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S763");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S770
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS770() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS770");
            this.Manager.Comment("reaching state \'S770\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp161;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp161);
            this.Manager.AddReturn(ReadConfigInfo, null, temp161);
            this.Manager.Comment("reaching state \'S771\'");
            int temp163 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS770ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS770ReadConfigChecker1)));
            if ((temp163 == 0)) {
                this.Manager.Comment("reaching state \'S772\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S773\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S774\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S775\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S776\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S777\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker)));
                }
                goto label83;
            }
            if ((temp163 == 1)) {
                this.Manager.Comment("reaching state \'S778\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S779\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S780\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S781\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S782\'");
                int temp162 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker5)));
                if ((temp162 == 0)) {
                    this.Manager.Comment("reaching state \'S783\'");
                    goto label82;
                }
                if ((temp162 == 1)) {
                    this.Manager.Comment("reaching state \'S784\'");
                    goto label82;
                }
                if ((temp162 == 2)) {
                    this.Manager.Comment("reaching state \'S785\'");
                    goto label82;
                }
                if ((temp162 == 3)) {
                    this.Manager.Comment("reaching state \'S786\'");
                    goto label82;
                }
                if ((temp162 == 4)) {
                    this.Manager.Comment("reaching state \'S787\'");
                    goto label82;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker5)));
            label82:
;
                goto label83;
            }
            throw new InvalidOperationException("never reached");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS770ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S771");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S776");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S776");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS770ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S771");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S782");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S782");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S782");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S782");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S782");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S782");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S782");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S782");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS770ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S782");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S782");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS78() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS78");
            this.Manager.Comment("reaching state \'S78\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp164;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp164);
            this.Manager.AddReturn(ReadConfigInfo, null, temp164);
            this.Manager.Comment("reaching state \'S79\'");
            int temp165 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS78ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS78ReadConfigChecker1)));
            if ((temp165 == 0)) {
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(None,CapabilitiesSameWithNegoti" +
                        "ate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS83();
                goto label84;
            }
            if ((temp165 == 1)) {
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NEGOTIATE_SIGNING_ENABLED|NEGOT" +
                        "IATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS75();
                goto label84;
            }
            throw new InvalidOperationException("never reached");
        label84:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS78ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S79");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS78ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S79");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S788
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS788() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS788");
            this.Manager.Comment("reaching state \'S788\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp166;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp166);
            this.Manager.AddReturn(ReadConfigInfo, null, temp166);
            this.Manager.Comment("reaching state \'S789\'");
            int temp168 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS788ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS788ReadConfigChecker1)));
            if ((temp168 == 0)) {
                this.Manager.Comment("reaching state \'S790\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S791\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S792\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS83();
                goto label86;
            }
            if ((temp168 == 1)) {
                this.Manager.Comment("reaching state \'S793\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NEGOTIATE_SIGNING_ENABLED|NEGOT" +
                        "IATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S794\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S795\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S796\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S797\'");
                int temp167 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker4)));
                if ((temp167 == 0)) {
                    this.Manager.Comment("reaching state \'S798\'");
                    goto label85;
                }
                if ((temp167 == 1)) {
                    this.Manager.Comment("reaching state \'S799\'");
                    goto label85;
                }
                if ((temp167 == 2)) {
                    this.Manager.Comment("reaching state \'S800\'");
                    goto label85;
                }
                if ((temp167 == 3)) {
                    this.Manager.Comment("reaching state \'S801\'");
                    goto label85;
                }
                if ((temp167 == 4)) {
                    this.Manager.Comment("reaching state \'S802\'");
                    goto label85;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker4)));
            label85:
;
                goto label86;
            }
            throw new InvalidOperationException("never reached");
        label86:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS788ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S789");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS788ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S789");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S797");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S797");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S797");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S797");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S797");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S797");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S797");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S797");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS788ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S797");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S797");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S803
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS803() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS803");
            this.Manager.Comment("reaching state \'S803\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp169;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp169);
            this.Manager.AddReturn(ReadConfigInfo, null, temp169);
            this.Manager.Comment("reaching state \'S804\'");
            int temp171 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS803ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS803ReadConfigChecker1)));
            if ((temp171 == 0)) {
                this.Manager.Comment("reaching state \'S805\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_ENABLED" +
                        "|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S806\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S807\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S808\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S809\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S810\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker)));
                }
                goto label88;
            }
            if ((temp171 == 1)) {
                this.Manager.Comment("reaching state \'S811\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S812\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S813\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S814\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S815\'");
                int temp170 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker5)));
                if ((temp170 == 0)) {
                    this.Manager.Comment("reaching state \'S816\'");
                    goto label87;
                }
                if ((temp170 == 1)) {
                    this.Manager.Comment("reaching state \'S817\'");
                    goto label87;
                }
                if ((temp170 == 2)) {
                    this.Manager.Comment("reaching state \'S818\'");
                    goto label87;
                }
                if ((temp170 == 3)) {
                    this.Manager.Comment("reaching state \'S819\'");
                    goto label87;
                }
                if ((temp170 == 4)) {
                    this.Manager.Comment("reaching state \'S820\'");
                    goto label87;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker5)));
            label87:
;
                goto label88;
            }
            throw new InvalidOperationException("never reached");
        label88:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS803ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S804");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S809");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S809");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS803ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S804");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S815");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S815");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S815");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S815");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S815");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S815");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S815");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S815");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS803ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S815");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S815");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S821
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS821() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS821");
            this.Manager.Comment("reaching state \'S821\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp172;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp172);
            this.Manager.AddReturn(ReadConfigInfo, null, temp172);
            this.Manager.Comment("reaching state \'S822\'");
            int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS821ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS821ReadConfigChecker1)));
            if ((temp174 == 0)) {
                this.Manager.Comment("reaching state \'S823\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForNonSmb30,NEGOTIAT" +
                        "E_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S824\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S825\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S826\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S827\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S828\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker)));
                }
                goto label90;
            }
            if ((temp174 == 1)) {
                this.Manager.Comment("reaching state \'S829\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S830\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S831\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S832\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S833\'");
                int temp173 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker5)));
                if ((temp173 == 0)) {
                    this.Manager.Comment("reaching state \'S834\'");
                    goto label89;
                }
                if ((temp173 == 1)) {
                    this.Manager.Comment("reaching state \'S835\'");
                    goto label89;
                }
                if ((temp173 == 2)) {
                    this.Manager.Comment("reaching state \'S836\'");
                    goto label89;
                }
                if ((temp173 == 3)) {
                    this.Manager.Comment("reaching state \'S837\'");
                    goto label89;
                }
                if ((temp173 == 4)) {
                    this.Manager.Comment("reaching state \'S838\'");
                    goto label89;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker5)));
            label89:
;
                goto label90;
            }
            throw new InvalidOperationException("never reached");
        label90:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS821ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S822");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S827");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S827");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS821ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S822");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S833");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S833");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S833");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S833");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S833");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S833");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S833");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S833");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS821ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S833");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S833");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S839
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS839() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS839");
            this.Manager.Comment("reaching state \'S839\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp175;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp175);
            this.Manager.AddReturn(ReadConfigInfo, null, temp175);
            this.Manager.Comment("reaching state \'S840\'");
            int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS839ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS839ReadConfigChecker1)));
            if ((temp177 == 0)) {
                this.Manager.Comment("reaching state \'S841\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,AllBitsSet,NEGOTIATE_SIGNING_REQUIRED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S842\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S843\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S844\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S845\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S846\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker)));
                }
                goto label92;
            }
            if ((temp177 == 1)) {
                this.Manager.Comment("reaching state \'S847\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S848\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S849\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S850\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S851\'");
                int temp176 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker5)));
                if ((temp176 == 0)) {
                    this.Manager.Comment("reaching state \'S852\'");
                    goto label91;
                }
                if ((temp176 == 1)) {
                    this.Manager.Comment("reaching state \'S853\'");
                    goto label91;
                }
                if ((temp176 == 2)) {
                    this.Manager.Comment("reaching state \'S854\'");
                    goto label91;
                }
                if ((temp176 == 3)) {
                    this.Manager.Comment("reaching state \'S855\'");
                    goto label91;
                }
                if ((temp176 == 4)) {
                    this.Manager.Comment("reaching state \'S856\'");
                    goto label91;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker5)));
            label91:
;
                goto label92;
            }
            throw new InvalidOperationException("never reached");
        label92:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS839ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S840");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S845");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S845");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS839ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S840");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S851");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S851");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S851");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S851");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S851");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S851");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S851");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S851");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS839ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S851");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S851");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S857
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS857() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS857");
            this.Manager.Comment("reaching state \'S857\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp178;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp178);
            this.Manager.AddReturn(ReadConfigInfo, null, temp178);
            this.Manager.Comment("reaching state \'S858\'");
            int temp180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS857ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS857ReadConfigChecker1)));
            if ((temp180 == 0)) {
                this.Manager.Comment("reaching state \'S859\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S860\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S861\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS270();
                goto label94;
            }
            if ((temp180 == 1)) {
                this.Manager.Comment("reaching state \'S862\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S863\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S864\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S865\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S866\'");
                int temp179 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker4)));
                if ((temp179 == 0)) {
                    this.Manager.Comment("reaching state \'S867\'");
                    goto label93;
                }
                if ((temp179 == 1)) {
                    this.Manager.Comment("reaching state \'S868\'");
                    goto label93;
                }
                if ((temp179 == 2)) {
                    this.Manager.Comment("reaching state \'S869\'");
                    goto label93;
                }
                if ((temp179 == 3)) {
                    this.Manager.Comment("reaching state \'S870\'");
                    goto label93;
                }
                if ((temp179 == 4)) {
                    this.Manager.Comment("reaching state \'S871\'");
                    goto label93;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker4)));
            label93:
;
                goto label94;
            }
            throw new InvalidOperationException("never reached");
        label94:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS857ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S858");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS857ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S858");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S866");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S866");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S866");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S866");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS857ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S866");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S872
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS872() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS872");
            this.Manager.Comment("reaching state \'S872\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp181;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp181);
            this.Manager.AddReturn(ReadConfigInfo, null, temp181);
            this.Manager.Comment("reaching state \'S873\'");
            int temp182 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS872ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS872ReadConfigChecker1)));
            if ((temp182 == 0)) {
                this.Manager.Comment("reaching state \'S874\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S875\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S876\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS319();
                goto label95;
            }
            if ((temp182 == 1)) {
                this.Manager.Comment("reaching state \'S877\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S878\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S879\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidDifferentFromNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the Guid received in the VALIDATE_NEGOTIATE_INFO reque" +
                        "st structure is not equal to the Connection.ClientGuid, the server MUST terminat" +
                        "e the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Guid received in the VALIDATE_NEGOTIATE_INFO request structure is not" +
                        " equal to the Connection.ClientGuid\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS311();
                goto label95;
            }
            throw new InvalidOperationException("never reached");
        label95:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS872ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S873");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS872ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S873");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S880
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS880() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS880");
            this.Manager.Comment("reaching state \'S880\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp183;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp183);
            this.Manager.AddReturn(ReadConfigInfo, null, temp183);
            this.Manager.Comment("reaching state \'S881\'");
            int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS880ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS880ReadConfigChecker1)));
            if ((temp185 == 0)) {
                this.Manager.Comment("reaching state \'S882\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NEGOTIATE_S" +
                        "IGNING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S883\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S884\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S885\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S886\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S887\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker)));
                }
                goto label97;
            }
            if ((temp185 == 1)) {
                this.Manager.Comment("reaching state \'S888\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S889\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S890\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S891\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S892\'");
                int temp184 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker5)));
                if ((temp184 == 0)) {
                    this.Manager.Comment("reaching state \'S893\'");
                    goto label96;
                }
                if ((temp184 == 1)) {
                    this.Manager.Comment("reaching state \'S894\'");
                    goto label96;
                }
                if ((temp184 == 2)) {
                    this.Manager.Comment("reaching state \'S895\'");
                    goto label96;
                }
                if ((temp184 == 3)) {
                    this.Manager.Comment("reaching state \'S896\'");
                    goto label96;
                }
                if ((temp184 == 4)) {
                    this.Manager.Comment("reaching state \'S897\'");
                    goto label96;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker5)));
            label96:
;
                goto label97;
            }
            throw new InvalidOperationException("never reached");
        label97:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS880ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S881");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S886");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S886");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS880ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S881");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS880ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S89
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS89() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS89");
            this.Manager.Comment("reaching state \'S89\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp186;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp186);
            this.Manager.AddReturn(ReadConfigInfo, null, temp186);
            this.Manager.Comment("reaching state \'S90\'");
            int temp187 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS89ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS89ReadConfigChecker1)));
            if ((temp187 == 0)) {
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectDifferentFromNegotiate,C" +
                        "apabilitiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType.DialectDifferentFromNegotiate, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.15.12: The server MUST determine the greatest common dialect between the dialects it implements and the Dialects array of the VALIDATE_NEGOTIATE_INFO request. If no dialect is matched, or if the value is not equal to Connection.Dialect, the server MUST terminate the transport connection and free the Connection object""");
                this.Manager.Checkpoint("\"[TestInfo] No dialect is matched between the dialects it implements and the Dial" +
                        "ects array of the VALIDATE_NEGOTIATE_INFO request, or if the value is not equal " +
                        "to Connection.Dialect\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS83();
                goto label98;
            }
            if ((temp187 == 1)) {
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NEGOTIATE_SIGNING_ENABLED|NEGOT" +
                        "IATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS75();
                goto label98;
            }
            throw new InvalidOperationException("never reached");
        label98:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS89ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S90");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS89ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S90");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        #endregion
        
        #region Test Starting in S898
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS898() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS898");
            this.Manager.Comment("reaching state \'S898\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp188;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp188);
            this.Manager.AddReturn(ReadConfigInfo, null, temp188);
            this.Manager.Comment("reaching state \'S899\'");
            int temp190 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS898ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS898ReadConfigChecker1)));
            if ((temp190 == 0)) {
                this.Manager.Comment("reaching state \'S900\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForNonSmb30,NEGOTIATE_" +
                        "SIGNING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S901\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S902\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S903\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S904\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S905\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker)));
                }
                goto label100;
            }
            if ((temp190 == 1)) {
                this.Manager.Comment("reaching state \'S906\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S907\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S908\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S909\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S910\'");
                int temp189 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker5)));
                if ((temp189 == 0)) {
                    this.Manager.Comment("reaching state \'S911\'");
                    goto label99;
                }
                if ((temp189 == 1)) {
                    this.Manager.Comment("reaching state \'S912\'");
                    goto label99;
                }
                if ((temp189 == 2)) {
                    this.Manager.Comment("reaching state \'S913\'");
                    goto label99;
                }
                if ((temp189 == 3)) {
                    this.Manager.Comment("reaching state \'S914\'");
                    goto label99;
                }
                if ((temp189 == 4)) {
                    this.Manager.Comment("reaching state \'S915\'");
                    goto label99;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker5)));
            label99:
;
                goto label100;
            }
            throw new InvalidOperationException("never reached");
        label100:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS898ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S899");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S904");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S904");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS898ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S899");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S910");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S910");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S910");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S910");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS898ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S910");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S910");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S916
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS916() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS916");
            this.Manager.Comment("reaching state \'S916\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp191;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp191);
            this.Manager.AddReturn(ReadConfigInfo, null, temp191);
            this.Manager.Comment("reaching state \'S917\'");
            int temp193 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS916ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS916ReadConfigChecker1)));
            if ((temp193 == 0)) {
                this.Manager.Comment("reaching state \'S918\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S919\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S920\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S921\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S922\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S923\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker)));
                }
                goto label102;
            }
            if ((temp193 == 1)) {
                this.Manager.Comment("reaching state \'S924\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)\'" +
                        "");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S925\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S926\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S927\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S928\'");
                int temp192 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker5)));
                if ((temp192 == 0)) {
                    this.Manager.Comment("reaching state \'S929\'");
                    goto label101;
                }
                if ((temp192 == 1)) {
                    this.Manager.Comment("reaching state \'S930\'");
                    goto label101;
                }
                if ((temp192 == 2)) {
                    this.Manager.Comment("reaching state \'S931\'");
                    goto label101;
                }
                if ((temp192 == 3)) {
                    this.Manager.Comment("reaching state \'S932\'");
                    goto label101;
                }
                if ((temp192 == 4)) {
                    this.Manager.Comment("reaching state \'S933\'");
                    goto label101;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker5)));
            label101:
;
                goto label102;
            }
            throw new InvalidOperationException("never reached");
        label102:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS916ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S917");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S922");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S922");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS916ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S917");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S928");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S928");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S928");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S928");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S928");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S928");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S928");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S928");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS916ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S928");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S928");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S934
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS934() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS934");
            this.Manager.Comment("reaching state \'S934\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp194;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp194);
            this.Manager.AddReturn(ReadConfigInfo, null, temp194);
            this.Manager.Comment("reaching state \'S935\'");
            int temp196 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS934ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS934ReadConfigChecker1)));
            if ((temp196 == 0)) {
                this.Manager.Comment("reaching state \'S936\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S937\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S938\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S939\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S940\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S941\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker)));
                }
                goto label104;
            }
            if ((temp196 == 1)) {
                this.Manager.Comment("reaching state \'S942\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,AllBitsSet,NEGOTIATE_SIGNING_REQUIRE" +
                        "D)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S943\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S944\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S945\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S946\'");
                int temp195 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker5)));
                if ((temp195 == 0)) {
                    this.Manager.Comment("reaching state \'S947\'");
                    goto label103;
                }
                if ((temp195 == 1)) {
                    this.Manager.Comment("reaching state \'S948\'");
                    goto label103;
                }
                if ((temp195 == 2)) {
                    this.Manager.Comment("reaching state \'S949\'");
                    goto label103;
                }
                if ((temp195 == 3)) {
                    this.Manager.Comment("reaching state \'S950\'");
                    goto label103;
                }
                if ((temp195 == 4)) {
                    this.Manager.Comment("reaching state \'S951\'");
                    goto label103;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker5)));
            label103:
;
                goto label104;
            }
            throw new InvalidOperationException("never reached");
        label104:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS934ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S935");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S940");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S940");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS934ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S935");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S946");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S946");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S946");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S946");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS934ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S946");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S946");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S952
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS952() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS952");
            this.Manager.Comment("reaching state \'S952\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp197;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp197);
            this.Manager.AddReturn(ReadConfigInfo, null, temp197);
            this.Manager.Comment("reaching state \'S953\'");
            int temp199 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS952ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS952ReadConfigChecker1)));
            if ((temp199 == 0)) {
                this.Manager.Comment("reaching state \'S954\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,None,NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values.NEGOTIATE_SIGNING_REQUIRED);
                this.Manager.Comment("reaching state \'S955\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S956\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S957\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S958\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S959\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker)));
                }
                goto label106;
            }
            if ((temp199 == 1)) {
                this.Manager.Comment("reaching state \'S960\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,FullCapabilitiesForSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S961\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S962\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S963\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S964\'");
                int temp198 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker5)));
                if ((temp198 == 0)) {
                    this.Manager.Comment("reaching state \'S965\'");
                    goto label105;
                }
                if ((temp198 == 1)) {
                    this.Manager.Comment("reaching state \'S966\'");
                    goto label105;
                }
                if ((temp198 == 2)) {
                    this.Manager.Comment("reaching state \'S967\'");
                    goto label105;
                }
                if ((temp198 == 3)) {
                    this.Manager.Comment("reaching state \'S968\'");
                    goto label105;
                }
                if ((temp198 == 4)) {
                    this.Manager.Comment("reaching state \'S969\'");
                    goto label105;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker5)));
            label105:
;
                goto label106;
            }
            throw new InvalidOperationException("never reached");
        label106:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS952ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S953");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S958");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S958");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS952ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S953");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S964");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S964");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S964");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S964");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS952ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S964");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S964");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S97
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS97() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS97");
            this.Manager.Comment("reaching state \'S97\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp200;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp200);
            this.Manager.AddReturn(ReadConfigInfo, null, temp200);
            this.Manager.Comment("reaching state \'S98\'");
            int temp201 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS97ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS97ReadConfigChecker1)));
            if ((temp201 == 0)) {
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,None,NEGOTIATE_SIGNING_ENABLED|NEGOT" +
                        "IATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeDifferentFromNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If the SecurityMode received in the VALIDATE_NEGOTIATE_IN" +
                        "FO request structure is not equal to Connection.ClientSecurityMode, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] SecurityMode received in the VALIDATE_NEGOTIATE_INFO request structur" +
                        "e is not equal to Connection.ClientSecurityMode\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS75();
                goto label107;
            }
            if ((temp201 == 1)) {
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,FullCapabilitiesForSmb30,NEGOTIATE_SIG" +
                        "NING_ENABLED|NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S100\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesDifferentFromNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNeg" +
                        "otiate)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15.12: If Connection.ClientCapabilities is not equal to the Capa" +
                        "bilities received in the VALIDATE_NEGOTIATE_INFO request structure, the server M" +
                        "UST terminate the transport connection and free the Connection object\"");
                this.Manager.Checkpoint("\"[TestInfo] Connection.ClientCapabilities is not equal to the Capabilities receiv" +
                        "ed in the VALIDATE_NEGOTIATE_INFO request\"");
                this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
                this.Manager.AddReturn(ValidateNegotiateInfoRequestInfo, null);
                ValidateNegotiateInfoTestCaseS83();
                goto label107;
            }
            throw new InvalidOperationException("never reached");
        label107:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS97ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S98");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS97ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S98");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        #endregion
        
        #region Test Starting in S970
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS970() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS970");
            this.Manager.Comment("reaching state \'S970\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp202;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp202);
            this.Manager.AddReturn(ReadConfigInfo, null, temp202);
            this.Manager.Comment("reaching state \'S971\'");
            int temp204 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS970ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS970ReadConfigChecker1)));
            if ((temp204 == 0)) {
                this.Manager.Comment("reaching state \'S972\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,FullCapabilitiesForNonSmb30,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.FullCapabilitiesForNonSmb30, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S973\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S974\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S975\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S976\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S977\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker)));
                }
                goto label109;
            }
            if ((temp204 == 1)) {
                this.Manager.Comment("reaching state \'S978\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED)" +
                        "\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(1)));
                this.Manager.Comment("reaching state \'S979\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S980\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S981\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S982\'");
                int temp203 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker5)));
                if ((temp203 == 0)) {
                    this.Manager.Comment("reaching state \'S983\'");
                    goto label108;
                }
                if ((temp203 == 1)) {
                    this.Manager.Comment("reaching state \'S984\'");
                    goto label108;
                }
                if ((temp203 == 2)) {
                    this.Manager.Comment("reaching state \'S985\'");
                    goto label108;
                }
                if ((temp203 == 3)) {
                    this.Manager.Comment("reaching state \'S986\'");
                    goto label108;
                }
                if ((temp203 == 4)) {
                    this.Manager.Comment("reaching state \'S987\'");
                    goto label108;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker5)));
            label108:
;
                goto label109;
            }
            throw new InvalidOperationException("never reached");
        label109:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS970ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S971");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S976");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S976");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS970ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S971");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S982");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S982");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S982");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S982");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS970ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S982");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S982");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S988
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.FsctlValidateNegotiateInfo)]
        public void ValidateNegotiateInfoTestCaseS988() {
            this.Manager.BeginTest("ValidateNegotiateInfoTestCaseS988");
            this.Manager.Comment("reaching state \'S988\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig temp205;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IValidateNegotiateInfoAdapterInstance.ReadConfig(out temp205);
            this.Manager.AddReturn(ReadConfigInfo, null, temp205);
            this.Manager.Comment("reaching state \'S989\'");
            int temp207 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS988ReadConfigChecker)), new ExpectedReturn(ValidateNegotiateInfoTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.ValidateNegotiateInfoTestCaseS988ReadConfigChecker1)));
            if ((temp207 == 0)) {
                this.Manager.Comment("reaching state \'S990\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,AllBitsSet,NEGOTIATE_SIGNING_ENABLED|" +
                        "NEGOTIATE_SIGNING_REQUIRED)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities.AllBitsSet, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(3)));
                this.Manager.Comment("reaching state \'S991\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S992\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S993\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S994\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S995\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker)));
                }
                goto label111;
            }
            if ((temp207 == 1)) {
                this.Manager.Comment("reaching state \'S996\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,None,NONE)\'");
                this.IValidateNegotiateInfoAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ModelCapabilities)(0)), ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.SecurityMode_Values)(0)));
                this.Manager.Comment("reaching state \'S997\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S998\'");
                this.Manager.Comment("executing step \'call ValidateNegotiateInfoRequest(DialectSameWithNegotiate,Capabi" +
                        "litiesSameWithNegotiate,SecurityModeSameWithNegotiate,ClientGuidSameWithNegotiat" +
                        "e)\'");
                this.IValidateNegotiateInfoAdapterInstance.ValidateNegotiateInfoRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.DialectType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.CapabilitiesType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.SecurityModeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ClientGuidType)(0)));
                this.Manager.Comment("reaching state \'S999\'");
                this.Manager.Comment("checking step \'return ValidateNegotiateInfoRequest\'");
                this.Manager.Comment("reaching state \'S1000\'");
                int temp206 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker5)));
                if ((temp206 == 0)) {
                    this.Manager.Comment("reaching state \'S1001\'");
                    goto label110;
                }
                if ((temp206 == 1)) {
                    this.Manager.Comment("reaching state \'S1002\'");
                    goto label110;
                }
                if ((temp206 == 2)) {
                    this.Manager.Comment("reaching state \'S1003\'");
                    goto label110;
                }
                if ((temp206 == 3)) {
                    this.Manager.Comment("reaching state \'S1004\'");
                    goto label110;
                }
                if ((temp206 == 4)) {
                    this.Manager.Comment("reaching state \'S1005\'");
                    goto label110;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker1)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker2)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker3)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker4)), new ExpectedEvent(ValidateNegotiateInfoTestCase.ValidateNegotiateInfoResponseInfo, null, new ValidateNegotiateInfoResponseDelegate1(this.ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker5)));
            label110:
;
                goto label111;
            }
            throw new InvalidOperationException("never reached");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void ValidateNegotiateInfoTestCaseS988ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S989");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 1");
        }
        
        private void ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ValidateNegotiateInfoResponse, state S994");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S994");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed" +
                        " on the server\"");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1))), "Fail to check the assumption : c.ValidateNegotiateInfoSupported == 1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is allowed on the server\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS988ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c, c, "c of ReadConfig, state S989");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.ValidateNegotiateInfoSupported)))), ((object)(0))), "Fail to check the assumption : v.ValidateNegotiateInfoSupported == 0");
        }
        
        private void ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S1000");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v1.Platform == 268435463");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S1000");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v1.Platform == 268435462");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2012, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S1000");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008, so follow the SHOULD requirement\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of ValidateNegotiateInfoResponse, state S1000");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not all" +
                        "owed on the server\", \"[TestInfo] SUT platform is NonWindows, so only assert stat" +
                        "us is not equal to STATUS_SUCCESS\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is NonWindows, so only assert status is not equal to STA" +
                    "TUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ValidateNegotiateInfoTestCaseS988ValidateNegotiateInfoResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig config) {
            this.Manager.Comment("checking step \'event ValidateNegotiateInfoResponse(STATUS_NOT_SUPPORTED,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_NOT_SUPPORTED, status, "status of ValidateNegotiateInfoResponse, state S1000");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.c1, config, "config of ValidateNegotiateInfoResponse, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server"", ""[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPPORTED when an FSCTL is not allowed on the server"", ""[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement"", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.ValidateNegotiateInfoSupported)))), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(c.ValidateNegotiateInfoSupported == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ValidateNegotiateInfo.ValidateNegotiateInfoConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v1.Platform == 268435460");
            this.Manager.Checkpoint("\"[TestInfo] FSCTL_VALIDATE_NEGOTIATE_INFO is not allowed on the server\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.15: The server SHOULD<299> fail the request with STATUS_NOT_SUPP" +
                    "ORTED when an FSCTL is not allowed on the server\"");
            this.Manager.Checkpoint("\"[TestInfo] SUT platform is WindowsServer2008R2, so follow the SHOULD requirement" +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
    }
}
