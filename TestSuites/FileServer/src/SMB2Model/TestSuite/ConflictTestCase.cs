// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ConflictTestCase : PtfTestClassBase {
        
        public ConflictTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ConflictResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState);
        
        public delegate void ConflictRequestDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ConflictRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.IConflictAdapter), "ConflictRequest", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType));
        
        static System.Reflection.EventInfo ConflictResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.IConflictAdapter), "ConflictResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.IConflictAdapter IConflictAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IConflictAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.IConflictAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.IConflictAdapter))));
            this.Manager.Subscribe(ConflictResponseInfo, this.IConflictAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS0() {
            this.Manager.BeginTest("ConflictTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Write,Lease)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(1)));
            this.Manager.AddReturn(ConflictRequestInfo, null);
            ConflictTestCaseS3();
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS3() {
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ConflictTestCase.ConflictRequestInfo, null, new ConflictRequestDelegate1(this.ConflictTestCaseS0ConflictRequestChecker)));
            this.Manager.Comment("reaching state \'S4\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS0ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S5\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS0ConflictResponseChecker)));
            }
        }
        
        private void ConflictTestCaseS0ConflictRequestChecker() {
            this.Manager.Comment("checking step \'return ConflictRequest\'");
        }
        
        private void ConflictTestCaseS0ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S4");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S4");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] The state of the file is not changed. So" +
                        " any request from the second client should succeed.\", \"[TestInfo] No lease is gr" +
                        "anted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The state of the file is not changed. So any request from the second " +
                    "client should succeed.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S105
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS105() {
            this.Manager.BeginTest("ConflictTestCaseS105");
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Read,Delete)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete);
            this.Manager.AddReturn(ConflictRequestInfo, null);
            ConflictTestCaseS108();
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS108() {
            this.Manager.Comment("reaching state \'S108\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ConflictTestCase.ConflictRequestInfo, null, new ConflictRequestDelegate1(this.ConflictTestCaseS105ConflictRequestChecker)));
            this.Manager.Comment("reaching state \'S109\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS105ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S110\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS105ConflictResponseChecker)));
            }
        }
        
        private void ConflictTestCaseS105ConflictRequestChecker() {
            this.Manager.Comment("checking step \'return ConflictRequest\'");
        }
        
        private void ConflictTestCaseS105ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S109");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S109");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] The state of the file is not changed. So" +
                        " any request from the second client should succeed.\", \"[TestInfo] No lease is gr" +
                        "anted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The state of the file is not changed. So any request from the second " +
                    "client should succeed.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S111
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS111() {
            this.Manager.BeginTest("ConflictTestCaseS111");
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Delete,Delete)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete);
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S115\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS111ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S116\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS111ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS111ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_OBJECT_NAME_NOT_FOUND,NoLeaseBreak)\'" +
                    "");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ConflictResponse, state S115");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S115");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] The file is deleted, so any operation to" +
                        " the non-existed file fails.\", \"[TestTag] Compatibility\", \"[TestInfo] No lease i" +
                        "s granted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The file is deleted, so any operation to the non-existed file fails.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S117
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS117() {
            this.Manager.BeginTest("ConflictTestCaseS117");
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("executing step \'call ConflictRequest(ExclusiveLock,Delete)\'");
            this.IConflictAdapterInstance.ConflictRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete);
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S121\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS117ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S122\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS117ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS117ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Delete succeed even the file is locked.\"" +
                        ", \"[TestInfo] No lease is granted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Delete succeed even the file is locked.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS12() {
            this.Manager.BeginTest("ConflictTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call ConflictRequest(UncommitedDelete,ExclusiveLock)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.UncommitedDelete, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)));
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S16\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS12ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S17\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS12ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS12ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S16");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S16");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The file is not deleted, and it will be deleted only if the second open is closed."", ""[TestInfo] So the other operation ahead of Close request from the second client will succeed."", ""[TestInfo] No lease is granted to the first open, so no lease break.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The file is not deleted, and it will be deleted only if the second op" +
                    "en is closed.\"");
            this.Manager.Checkpoint("\"[TestInfo] So the other operation ahead of Close request from the second client " +
                    "will succeed.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S123
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS123() {
            this.Manager.BeginTest("ConflictTestCaseS123");
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Write,Delete)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete);
            this.Manager.AddReturn(ConflictRequestInfo, null);
            ConflictTestCaseS108();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS126() {
            this.Manager.BeginTest("ConflictTestCaseS126");
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Lease,Delete)\'");
            this.IConflictAdapterInstance.ConflictRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete);
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S130\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS126ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S131\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS126ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS126ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S130");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] A lease to this file is granted to the first open, but it will not fail the operation from the second client"", ""[TestInfo] A lease is granted to the first open, but the Delete request from the second client cannot break the state.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] A lease to this file is granted to the first open, but it will not fa" +
                    "il the operation from the second client\"");
            this.Manager.Checkpoint("\"[TestInfo] A lease is granted to the first open, but the Delete request from the" +
                    " second client cannot break the state.\"");
        }
        #endregion
        
        #region Test Starting in S132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS132() {
            this.Manager.BeginTest("ConflictTestCaseS132");
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Read,Read)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read);
            this.Manager.AddReturn(ConflictRequestInfo, null);
            ConflictTestCaseS135();
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS135() {
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ConflictTestCase.ConflictRequestInfo, null, new ConflictRequestDelegate1(this.ConflictTestCaseS132ConflictRequestChecker)));
            this.Manager.Comment("reaching state \'S136\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS132ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S137\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS132ConflictResponseChecker)));
            }
        }
        
        private void ConflictTestCaseS132ConflictRequestChecker() {
            this.Manager.Comment("checking step \'return ConflictRequest\'");
        }
        
        private void ConflictTestCaseS132ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] The state of the file is not changed. So" +
                        " any request from the second client should succeed.\", \"[TestInfo] No lease is gr" +
                        "anted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The state of the file is not changed. So any request from the second " +
                    "client should succeed.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS138() {
            this.Manager.BeginTest("ConflictTestCaseS138");
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("executing step \'call ConflictRequest(ExclusiveLock,Read)\'");
            this.IConflictAdapterInstance.ConflictRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read);
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S142\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS138ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S143\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS138ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS138ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_FILE_LOCK_CONFLICT,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_LOCK_CONFLICT, status, "status of ConflictResponse, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Read fails because the file is locked.\"," +
                        " \"[TestTag] Compatibility\", \"[TestInfo] No lease is granted to the first open, s" +
                        "o no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Read fails because the file is locked.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S144
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS144() {
            this.Manager.BeginTest("ConflictTestCaseS144");
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Delete,Read)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read);
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S148\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS144ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S149\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS144ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS144ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_OBJECT_NAME_NOT_FOUND,NoLeaseBreak)\'" +
                    "");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ConflictResponse, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] The file is deleted, so any operation to" +
                        " the non-existed file fails.\", \"[TestTag] Compatibility\", \"[TestInfo] No lease i" +
                        "s granted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The file is deleted, so any operation to the non-existed file fails.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS150() {
            this.Manager.BeginTest("ConflictTestCaseS150");
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Write,Read)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read);
            this.Manager.AddReturn(ConflictRequestInfo, null);
            ConflictTestCaseS135();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S153
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS153() {
            this.Manager.BeginTest("ConflictTestCaseS153");
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S154\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Lease,Read)\'");
            this.IConflictAdapterInstance.ConflictRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read);
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S157\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS153ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S158\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS153ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS153ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] A lease to this file is granted to the first open, but it will not fail the operation from the second client"", ""[TestInfo] A lease is granted to the first open, but the Read request from the second client cannot break the state.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] A lease to this file is granted to the first open, but it will not fa" +
                    "il the operation from the second client\"");
            this.Manager.Checkpoint("\"[TestInfo] A lease is granted to the first open, but the Read request from the s" +
                    "econd client cannot break the state.\"");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS18() {
            this.Manager.BeginTest("ConflictTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Write,ExclusiveLock)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)));
            this.Manager.AddReturn(ConflictRequestInfo, null);
            ConflictTestCaseS21();
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS21() {
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ConflictTestCase.ConflictRequestInfo, null, new ConflictRequestDelegate1(this.ConflictTestCaseS18ConflictRequestChecker)));
            this.Manager.Comment("reaching state \'S22\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS18ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S23\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS18ConflictResponseChecker)));
            }
        }
        
        private void ConflictTestCaseS18ConflictRequestChecker() {
            this.Manager.Comment("checking step \'return ConflictRequest\'");
        }
        
        private void ConflictTestCaseS18ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S22");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S22");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] The state of the file is not changed. So" +
                        " any request from the second client should succeed.\", \"[TestInfo] No lease is gr" +
                        "anted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The state of the file is not changed. So any request from the second " +
                    "client should succeed.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS24() {
            this.Manager.BeginTest("ConflictTestCaseS24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call ConflictRequest(ExclusiveLock,Write)\'");
            this.IConflictAdapterInstance.ConflictRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write);
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S28\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS24ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S29\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS24ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS24ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_FILE_LOCK_CONFLICT,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_LOCK_CONFLICT, status, "status of ConflictResponse, state S28");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S28");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Write fails because the file is locked.\"" +
                        ", \"[TestTag] Compatibility\", \"[TestInfo] No lease is granted to the first open, " +
                        "so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Write fails because the file is locked.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS30() {
            this.Manager.BeginTest("ConflictTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call ConflictRequest(ExclusiveLock,ExclusiveLock)\'");
            this.IConflictAdapterInstance.ConflictRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)));
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S34\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS30ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S35\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS30ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS30ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_LOCK_NOT_GRANTED,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_LOCK_NOT_GRANTED, status, "status of ConflictResponse, state S34");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.14.2: If the range being locked is already locked by another open in a way that does not allow this open to take a lock on the range, and if SMB2_LOCKFLAG_FAIL_IMMEDIATELY is set, the server MUST fail the request with STATUS_LOCK_NOT_GRANTED."", ""[TestInfo] The file is already locked and SMB2_LOCKFLAG_FAIL_IMMEDIATELY is set."", ""[TestTag] Compatibility"", ""[TestInfo] No lease is granted to the first open, so no lease break.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.14.2: If the range being locked is already locked by another open in a way that does not allow this open to take a lock on the range, and if SMB2_LOCKFLAG_FAIL_IMMEDIATELY is set, the server MUST fail the request with STATUS_LOCK_NOT_GRANTED.""");
            this.Manager.Checkpoint("\"[TestInfo] The file is already locked and SMB2_LOCKFLAG_FAIL_IMMEDIATELY is set." +
                    "\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS36() {
            this.Manager.BeginTest("ConflictTestCaseS36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call ConflictRequest(UncommitedDelete,Write)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.UncommitedDelete, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write);
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S40\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS36ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S41\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS36ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS36ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S40");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The file is not deleted, and it will be deleted only if the second open is closed."", ""[TestInfo] So the other operation ahead of Close request from the second client will succeed."", ""[TestInfo] No lease is granted to the first open, so no lease break.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The file is not deleted, and it will be deleted only if the second op" +
                    "en is closed.\"");
            this.Manager.Checkpoint("\"[TestInfo] So the other operation ahead of Close request from the second client " +
                    "will succeed.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS42() {
            this.Manager.BeginTest("ConflictTestCaseS42");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Read,ExclusiveLock)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)));
            this.Manager.AddReturn(ConflictRequestInfo, null);
            ConflictTestCaseS21();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S45
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS45() {
            this.Manager.BeginTest("ConflictTestCaseS45");
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Delete,ExclusiveLock)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)));
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S49\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS45ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S50\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS45ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS45ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_OBJECT_NAME_NOT_FOUND,NoLeaseBreak)\'" +
                    "");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ConflictResponse, state S49");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] The file is deleted, so any operation to" +
                        " the non-existed file fails.\", \"[TestTag] Compatibility\", \"[TestInfo] No lease i" +
                        "s granted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The file is deleted, so any operation to the non-existed file fails.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S51
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS51() {
            this.Manager.BeginTest("ConflictTestCaseS51");
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Lease,ExclusiveLock)\'");
            this.IConflictAdapterInstance.ConflictRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)));
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S55\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS51ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S56\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS51ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS51ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,LeaseBreakExisted)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(1)), leaseBreakState, "leaseBreakState of ConflictResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] A lease to this file is granted to the first open, but it will not fail the operation from the second client"", ""[TestInfo] A lease to this file is granted to the first open. "", ""[TestInfo] The ExclusiveLock request from second client should break the lease state.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] A lease to this file is granted to the first open, but it will not fa" +
                    "il the operation from the second client\"");
            this.Manager.Checkpoint("\"[TestInfo] A lease to this file is granted to the first open. \"");
            this.Manager.Checkpoint("\"[TestInfo] The ExclusiveLock request from second client should break the lease s" +
                    "tate.\"");
        }
        #endregion
        
        #region Test Starting in S57
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS57() {
            this.Manager.BeginTest("ConflictTestCaseS57");
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Read,Write)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write);
            this.Manager.AddReturn(ConflictRequestInfo, null);
            ConflictTestCaseS9();
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS9() {
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(ConflictTestCase.ConflictRequestInfo, null, new ConflictRequestDelegate1(this.ConflictTestCaseS57ConflictRequestChecker)));
            this.Manager.Comment("reaching state \'S10\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS57ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S11\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS57ConflictResponseChecker)));
            }
        }
        
        private void ConflictTestCaseS57ConflictRequestChecker() {
            this.Manager.Comment("checking step \'return ConflictRequest\'");
        }
        
        private void ConflictTestCaseS57ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S10");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] The state of the file is not changed. So" +
                        " any request from the second client should succeed.\", \"[TestInfo] No lease is gr" +
                        "anted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The state of the file is not changed. So any request from the second " +
                    "client should succeed.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS6() {
            this.Manager.BeginTest("ConflictTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Write,Write)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write);
            this.Manager.AddReturn(ConflictRequestInfo, null);
            ConflictTestCaseS9();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS60() {
            this.Manager.BeginTest("ConflictTestCaseS60");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Delete,Write)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write);
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S64\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS60ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S65\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS60ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS60ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_OBJECT_NAME_NOT_FOUND,NoLeaseBreak)\'" +
                    "");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ConflictResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] The file is deleted, so any operation to" +
                        " the non-existed file fails.\", \"[TestTag] Compatibility\", \"[TestInfo] No lease i" +
                        "s granted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The file is deleted, so any operation to the non-existed file fails.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS66() {
            this.Manager.BeginTest("ConflictTestCaseS66");
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Lease,Write)\'");
            this.IConflictAdapterInstance.ConflictRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Write);
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S70\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS66ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S71\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS66ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS66ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,LeaseBreakExisted)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(1)), leaseBreakState, "leaseBreakState of ConflictResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] A lease to this file is granted to the first open, but it will not fail the operation from the second client"", ""[TestInfo] A lease to this file is granted to the first open. "", ""[TestInfo] The Write request from second client should break the lease state.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] A lease to this file is granted to the first open, but it will not fa" +
                    "il the operation from the second client\"");
            this.Manager.Checkpoint("\"[TestInfo] A lease to this file is granted to the first open. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Write request from second client should break the lease state.\"");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS72() {
            this.Manager.BeginTest("ConflictTestCaseS72");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Read,Lease)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(1)));
            this.Manager.AddReturn(ConflictRequestInfo, null);
            ConflictTestCaseS3();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S75
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS75() {
            this.Manager.BeginTest("ConflictTestCaseS75");
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Delete,Lease)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(1)));
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S79\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS75ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S80\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS75ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS75ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_OBJECT_NAME_NOT_FOUND,NoLeaseBreak)\'" +
                    "");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of ConflictResponse, state S79");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S79");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] The file is deleted, so any operation to" +
                        " the non-existed file fails.\", \"[TestTag] Compatibility\", \"[TestInfo] No lease i" +
                        "s granted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The file is deleted, so any operation to the non-existed file fails.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S81
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS81() {
            this.Manager.BeginTest("ConflictTestCaseS81");
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("executing step \'call ConflictRequest(Lease,Lease)\'");
            this.IConflictAdapterInstance.ConflictRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(1)));
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S85\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS81ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S86\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS81ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS81ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] A lease to this file is granted to the first open, but it will not fail the operation from the second client"", ""[TestInfo] A lease is granted to the first open, but the Lease request from the second client cannot break the state.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] A lease to this file is granted to the first open, but it will not fa" +
                    "il the operation from the second client\"");
            this.Manager.Checkpoint("\"[TestInfo] A lease is granted to the first open, but the Lease request from the " +
                    "second client cannot break the state.\"");
        }
        #endregion
        
        #region Test Starting in S87
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS87() {
            this.Manager.BeginTest("ConflictTestCaseS87");
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("executing step \'call ConflictRequest(ExclusiveLock,Lease)\'");
            this.IConflictAdapterInstance.ConflictRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType)(1)));
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S91\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS87ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S92\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS87ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS87ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[TestInfo] Lease succeed even the file is locked.\"," +
                        " \"[TestInfo] No lease is granted to the first open, so no lease break.\"");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] Lease succeed even the file is locked.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S93
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS93() {
            this.Manager.BeginTest("ConflictTestCaseS93");
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("executing step \'call ConflictRequest(UncommitedDelete,Delete)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.UncommitedDelete, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Delete);
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S97\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS93ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S98\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS93ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS93ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The file is not deleted, and it will be deleted only if the second open is closed."", ""[TestInfo] So the other operation ahead of Close request from the second client will succeed."", ""[TestInfo] No lease is granted to the first open, so no lease break.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The file is not deleted, and it will be deleted only if the second op" +
                    "en is closed.\"");
            this.Manager.Checkpoint("\"[TestInfo] So the other operation ahead of Close request from the second client " +
                    "will succeed.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
        
        #region Test Starting in S99
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OperateOneFileFromTwoNodes)]
        public void ConflictTestCaseS99() {
            this.Manager.BeginTest("ConflictTestCaseS99");
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IConflictAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S100\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("executing step \'call ConflictRequest(UncommitedDelete,Read)\'");
            this.IConflictAdapterInstance.ConflictRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.UncommitedDelete, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.RequestType.Read);
            this.Manager.Comment("reaching state \'S102\'");
            this.Manager.Comment("checking step \'return ConflictRequest\'");
            this.Manager.Comment("reaching state \'S103\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS99ConflictResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S104\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ConflictTestCase.ConflictResponseInfo, null, new ConflictResponseDelegate1(this.ConflictTestCaseS99ConflictResponseChecker)));
            }
            this.Manager.EndTest();
        }
        
        private void ConflictTestCaseS99ConflictResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState leaseBreakState) {
            this.Manager.Comment("checking step \'event ConflictResponse(STATUS_SUCCESS,NoLeaseBreak)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of ConflictResponse, state S103");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Conflict.LeaseBreakState)(0)), leaseBreakState, "leaseBreakState of ConflictResponse, state S103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The file is not deleted, and it will be deleted only if the second open is closed."", ""[TestInfo] So the other operation ahead of Close request from the second client will succeed."", ""[TestInfo] No lease is granted to the first open, so no lease break.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The file is not deleted, and it will be deleted only if the second op" +
                    "en is closed.\"");
            this.Manager.Checkpoint("\"[TestInfo] So the other operation ahead of Close request from the second client " +
                    "will succeed.\"");
            this.Manager.Checkpoint("\"[TestInfo] No lease is granted to the first open, so no lease break.\"");
        }
        #endregion
    }
}
