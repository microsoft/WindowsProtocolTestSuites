// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CreateCloseTestCase : PtfTestClassBase {
        
        public CreateCloseTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c);
        
        public delegate void CreateResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config);
        
        public delegate void CloseResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ICreateCloseAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig).MakeByRefType());
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ICreateCloseAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo CloseResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ICreateCloseAdapter), "CloseResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ICreateCloseAdapter ICreateCloseAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig> c1;
        
        private IVariable<int> queryResponseStatus;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig> v;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig> v1;
        
        private IVariable<int> v2;
        
        private IVariable<int> v3;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ICreateCloseAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ICreateCloseAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ICreateCloseAdapter))));
            this.Manager.Subscribe(CloseResponseInfo, this.ICreateCloseAdapterInstance);
            this.Manager.Subscribe(CreateResponseInfo, this.ICreateCloseAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>("c1");
            this.queryResponseStatus = this.Manager.CreateVariable<int>("queryResponseStatus");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>("v");
            this.v1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<int>("v3");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS0() {
            this.Manager.BeginTest("CreateCloseTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp3 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS0ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS0ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS0ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS0ReadConfigChecker3)));
            if ((temp3 == 0)) {
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S105\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS106();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker)));
                }
                goto label2;
            }
            if ((temp3 == 1)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S6\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S7\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S8\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S9\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker5))) != -1)) {
                        this.Manager.Comment("reaching state \'S10\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                                "ToOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S11\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S12\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker6))) != -1)) {
                            this.Manager.Comment("reaching state \'S13\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S14\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S15\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker7))) != -1)) {
                                this.Manager.Comment("reaching state \'S16\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                        "ToOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                                this.Manager.Comment("reaching state \'S17\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S18\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S19\'");
                                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                            "oOpenDurableFileID)\'");
                                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                    this.Manager.Comment("reaching state \'S20\'");
                                    this.Manager.Comment("checking step \'return CloseRequest\'");
                                    this.Manager.Comment("reaching state \'S21\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker9))) != -1)) {
                                        this.Manager.Comment("reaching state \'S22\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker9)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker8)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker7)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker6)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker5)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker1)));
                }
                goto label2;
            }
            if ((temp3 == 2)) {
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,InvalidCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S27\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker2)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker3)));
                if ((temp1 == 0)) {
                    CreateCloseTestCaseS28();
                    goto label0;
                }
                if ((temp1 == 1)) {
                    this.Manager.Comment("reaching state \'S41\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S43\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker14))) != -1)) {
                        this.Manager.Comment("reaching state \'S44\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S45\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S46\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker15))) != -1)) {
                            this.Manager.Comment("reaching state \'S47\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S48\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S49\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker16))) != -1)) {
                                this.Manager.Comment("reaching state \'S50\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S51\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S52\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker17))) != -1)) {
                                    this.Manager.Comment("reaching state \'S53\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker17)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker16)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker15)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker14)));
                    }
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker2)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker3)));
            label0:
;
                goto label2;
            }
            if ((temp3 == 3)) {
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,InvalidImpersonationLevel,NonDirectoryFile" +
                        ")\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S58\'");
                int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker4)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker5)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker6)));
                if ((temp2 == 0)) {
                    CreateCloseTestCaseS59();
                    goto label1;
                }
                if ((temp2 == 1)) {
                    this.Manager.Comment("reaching state \'S72\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S73\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S74\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker22))) != -1)) {
                        this.Manager.Comment("reaching state \'S75\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S76\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S77\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker23))) != -1)) {
                            this.Manager.Comment("reaching state \'S78\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S79\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S80\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker24))) != -1)) {
                                this.Manager.Comment("reaching state \'S81\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S82\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S83\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker25))) != -1)) {
                                    CreateCloseTestCaseS84();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker25)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker24)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker23)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker22)));
                    }
                    goto label1;
                }
                if ((temp2 == 2)) {
                    this.Manager.Comment("reaching state \'S85\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S86\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S87\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker26))) != -1)) {
                        CreateCloseTestCaseS88();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker26)));
                    }
                    goto label1;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker4)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker5)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS0CreateResponseChecker6)));
            label1:
;
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS0CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S105");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S105");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS106() {
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S108\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker))) != -1)) {
                CreateCloseTestCaseS109();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker)));
            }
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S108");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S108");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS109() {
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S111\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S114\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S115\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S116\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S117\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker3))) != -1)) {
                        this.Manager.Comment("reaching state \'S118\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S119\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S120\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker4))) != -1)) {
                            CreateCloseTestCaseS121();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker4)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker3)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker2)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker1)));
            }
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S111");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S117");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S120");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS121() {
            this.Manager.Comment("reaching state \'S121\'");
        }
        
        private void CreateCloseTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS0CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S9");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S9");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S12");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S12");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S15");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S15");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S21");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S21");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS0CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S27");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context not specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error."", ""[TestInfo] The create context of Create Request is invalid"", ""[TestTag] UnexpectedContext"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context no" +
                    "t specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error.\"");
            this.Manager.Checkpoint("\"[TestInfo] The create context of Create Request is invalid\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS28() {
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S30\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker10))) != -1)) {
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S33\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker11))) != -1)) {
                    this.Manager.Comment("reaching state \'S34\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S35\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S36\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker12))) != -1)) {
                        this.Manager.Comment("reaching state \'S37\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S38\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S39\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker13))) != -1)) {
                            CreateCloseTestCaseS40();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker13)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker12)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker11)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker10)));
            }
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S30");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S30");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S33");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S33");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S39");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S39");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS40() {
            this.Manager.Comment("reaching state \'S40\'");
        }
        
        private void CreateCloseTestCaseS0CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S27");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context not specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error."", ""[TestInfo] The create context of Create Request is invalid"", ""[TestTag] UnexpectedContext"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context no" +
                    "t specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error.\"");
            this.Manager.Checkpoint("\"[TestInfo] The create context of Create Request is invalid\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S43");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S46");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S49");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S49");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S52");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S52");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS0CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S58");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS59() {
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S61\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker18))) != -1)) {
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S64\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker19))) != -1)) {
                    this.Manager.Comment("reaching state \'S65\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S66\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S67\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker20))) != -1)) {
                        this.Manager.Comment("reaching state \'S68\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S69\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S70\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker21))) != -1)) {
                            CreateCloseTestCaseS71();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker21)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker20)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker19)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker18)));
            }
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S61");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S64");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker20(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S67");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker21(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S70");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS71() {
            this.Manager.Comment("reaching state \'S71\'");
        }
        
        private void CreateCloseTestCaseS0CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_BAD_IMPERSONATION_LEVEL,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_BAD_IMPERSONATION_LEVEL, status, "status of CreateResponse, state S58");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435458)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker22(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S74");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S74");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker23(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S77");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S77");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker24(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S80");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker25(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S83");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS84() {
            this.Manager.Comment("reaching state \'S84\'");
        }
        
        private void CreateCloseTestCaseS0CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S58");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker26(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS88() {
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S90\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker27))) != -1)) {
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S93\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker28))) != -1)) {
                    this.Manager.Comment("reaching state \'S94\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S95\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S96\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker29))) != -1)) {
                        this.Manager.Comment("reaching state \'S97\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S98\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S99\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker30))) != -1)) {
                            this.Manager.Comment("reaching state \'S100\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker30)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker29)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker28)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS0CloseResponseChecker27)));
            }
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker27(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S90");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker28(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S93");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker29(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S96");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS0CloseResponseChecker30(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S99");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS122() {
            this.Manager.BeginTest("CreateCloseTestCaseS122");
            this.Manager.Comment("reaching state \'S122\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp4;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp4);
            this.Manager.AddReturn(ReadConfigInfo, null, temp4);
            this.Manager.Comment("reaching state \'S123\'");
            int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS122ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS122ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS122ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS122ReadConfigChecker3)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,InvalidImpersonationLevel,NonDirectoryFile" +
                        ")\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S128\'");
                int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker2)));
                if ((temp5 == 0)) {
                    this.Manager.Comment("reaching state \'S129\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S130\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S131\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S132\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S133\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S134\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S135\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S136\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S137\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker2))) != -1)) {
                                CreateCloseTestCaseS88();
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker)));
                    }
                    goto label3;
                }
                if ((temp5 == 1)) {
                    CreateCloseTestCaseS71();
                    goto label3;
                }
                if ((temp5 == 2)) {
                    CreateCloseTestCaseS84();
                    goto label3;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker2)));
            label3:
;
                goto label5;
            }
            if ((temp7 == 1)) {
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,InvalidImpersonationLevel,NonDirectoryFile" +
                        ")\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S142\'");
                int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker3)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker4)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker5)));
                if ((temp6 == 0)) {
                    this.Manager.Comment("reaching state \'S143\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S144\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S145\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker3))) != -1)) {
                        this.Manager.Comment("reaching state \'S146\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S147\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S148\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker4))) != -1)) {
                            this.Manager.Comment("reaching state \'S149\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S150\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S151\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker5))) != -1)) {
                                CreateCloseTestCaseS152();
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker5)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker4)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker3)));
                    }
                    goto label4;
                }
                if ((temp6 == 1)) {
                    CreateCloseTestCaseS165();
                    goto label4;
                }
                if ((temp6 == 2)) {
                    CreateCloseTestCaseS166();
                    goto label4;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker3)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker4)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker5)));
            label4:
;
                goto label5;
            }
            if ((temp7 == 2)) {
                CreateCloseTestCaseS167();
                goto label5;
            }
            if ((temp7 == 3)) {
                CreateCloseTestCaseS173();
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS122ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S123");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS122CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S128");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS122CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S131");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS122CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S134");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS122CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(0)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the request, the server MUST query the attributes of the file after the close."", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Close Request.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags fiel" +
                    "d of the request, the server MUST query the attributes of the file after the clo" +
                    "se.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Clo" +
                    "se Request.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS122CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S128");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS122CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_BAD_IMPERSONATION_LEVEL,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_BAD_IMPERSONATION_LEVEL, status, "status of CreateResponse, state S128");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435458)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS122ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S123");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS122CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S142");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS122CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S145");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS122CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S148");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS122CloseResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(0)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the request, the server MUST query the attributes of the file after the close."", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Close Request.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags fiel" +
                    "d of the request, the server MUST query the attributes of the file after the clo" +
                    "se.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Clo" +
                    "se Request.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS152() {
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S154\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker6))) != -1)) {
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S157\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker7))) != -1)) {
                    this.Manager.Comment("reaching state \'S158\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S159\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S160\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker8))) != -1)) {
                        this.Manager.Comment("reaching state \'S161\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S162\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S163\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker9))) != -1)) {
                            this.Manager.Comment("reaching state \'S164\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker9)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker8)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker7)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS122CloseResponseChecker6)));
            }
        }
        
        private void CreateCloseTestCaseS122CloseResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S154");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS122CloseResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S157");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS122CloseResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS122CloseResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S163");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S163");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS122CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S142");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS165() {
            this.Manager.Comment("reaching state \'S165\'");
        }
        
        private void CreateCloseTestCaseS122CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_BAD_IMPERSONATION_LEVEL,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_BAD_IMPERSONATION_LEVEL, status, "status of CreateResponse, state S142");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435458)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS166() {
            this.Manager.Comment("reaching state \'S166\'");
        }
        
        private void CreateCloseTestCaseS122ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S123");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS167() {
            this.Manager.Comment("reaching state \'S167\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
            this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Comment("reaching state \'S168\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S169\'");
            this.Manager.Comment("executing step \'call CreateRequest(StartWithPathSeparator,FileOpenReparsePointSet" +
                    ",FileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
            this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
            this.Manager.Comment("reaching state \'S170\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S171\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker6))) != -1)) {
                CreateCloseTestCaseS172();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker6)));
            }
        }
        
        private void CreateCloseTestCaseS122CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S171");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first character is a path separator character, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The first character in the file name of the Create Request is a path separator."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first ch" +
                    "aracter is a path separator character, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The first character in the file name of the Create Request is a path " +
                    "separator.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS172() {
            this.Manager.Comment("reaching state \'S172\'");
        }
        
        private void CreateCloseTestCaseS122ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S123");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS173() {
            this.Manager.Comment("reaching state \'S173\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
            this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Comment("reaching state \'S174\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("executing step \'call CreateRequest(StartWithPathSeparator,FileOpenReparsePointSet" +
                    ",FileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
            this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
            this.Manager.Comment("reaching state \'S176\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S177\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker7))) != -1)) {
                CreateCloseTestCaseS178();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS122CreateResponseChecker7)));
            }
        }
        
        private void CreateCloseTestCaseS122CreateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S177");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first character is a path separator character, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The first character in the file name of the Create Request is a path separator."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first ch" +
                    "aracter is a path separator character, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The first character in the file name of the Create Request is a path " +
                    "separator.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS178() {
            this.Manager.Comment("reaching state \'S178\'");
        }
        #endregion
        
        #region Test Starting in S179
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS179() {
            this.Manager.BeginTest("CreateCloseTestCaseS179");
            this.Manager.Comment("reaching state \'S179\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp8;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp8);
            this.Manager.AddReturn(ReadConfigInfo, null, temp8);
            this.Manager.Comment("reaching state \'S180\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS179ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS179ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS179ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS179ReadConfigChecker3)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,InvalidImpersonationLevel,NonDirectoryFile" +
                        ")\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S184\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S185\'");
                int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker2)));
                if ((temp9 == 0)) {
                    this.Manager.Comment("reaching state \'S186\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S187\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S188\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S189\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S190\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S191\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S192\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S193\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S194\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker2))) != -1)) {
                                CreateCloseTestCaseS195();
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker)));
                    }
                    goto label6;
                }
                if ((temp9 == 1)) {
                    CreateCloseTestCaseS208();
                    goto label6;
                }
                if ((temp9 == 2)) {
                    CreateCloseTestCaseS40();
                    goto label6;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker2)));
            label6:
;
                goto label8;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,InvalidImpersonationLevel,NonDirectoryFile" +
                        ")\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S213\'");
                int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker3)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker4)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker5)));
                if ((temp10 == 0)) {
                    this.Manager.Comment("reaching state \'S214\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S215\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S216\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker7))) != -1)) {
                        this.Manager.Comment("reaching state \'S217\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S218\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S219\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker8))) != -1)) {
                            this.Manager.Comment("reaching state \'S220\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S221\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S222\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker9))) != -1)) {
                                CreateCloseTestCaseS223();
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker9)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker8)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker7)));
                    }
                    goto label7;
                }
                if ((temp10 == 1)) {
                    CreateCloseTestCaseS236();
                    goto label7;
                }
                if ((temp10 == 2)) {
                    CreateCloseTestCaseS237();
                    goto label7;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker3)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker4)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker5)));
            label7:
;
                goto label8;
            }
            if ((temp11 == 2)) {
                CreateCloseTestCaseS238();
                goto label8;
            }
            if ((temp11 == 3)) {
                CreateCloseTestCaseS243();
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS179ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S180");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS179CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S185");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S185");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S188");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S191");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(0)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the request, the server MUST query the attributes of the file after the close."", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Close Request.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags fiel" +
                    "d of the request, the server MUST query the attributes of the file after the clo" +
                    "se.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Clo" +
                    "se Request.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS195() {
            this.Manager.Comment("reaching state \'S195\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S196\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S197\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S200\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker4))) != -1)) {
                    this.Manager.Comment("reaching state \'S201\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S202\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S203\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker5))) != -1)) {
                        this.Manager.Comment("reaching state \'S204\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S205\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S206\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker6))) != -1)) {
                            this.Manager.Comment("reaching state \'S207\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker6)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker5)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker4)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker3)));
            }
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S197");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S203");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S206");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_BAD_IMPERSONATION_LEVEL,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_BAD_IMPERSONATION_LEVEL, status, "status of CreateResponse, state S185");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S185");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435458)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS208() {
            this.Manager.Comment("reaching state \'S208\'");
        }
        
        private void CreateCloseTestCaseS179CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S185");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S185");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS179ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S180");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS179CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S213");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S216");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S219");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S219");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(0)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S222");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the request, the server MUST query the attributes of the file after the close."", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Close Request.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags fiel" +
                    "d of the request, the server MUST query the attributes of the file after the clo" +
                    "se.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Clo" +
                    "se Request.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS223() {
            this.Manager.Comment("reaching state \'S223\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S224\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S225\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker10))) != -1)) {
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S228\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker11))) != -1)) {
                    this.Manager.Comment("reaching state \'S229\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S230\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S231\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker12))) != -1)) {
                        this.Manager.Comment("reaching state \'S232\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S233\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S234\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker13))) != -1)) {
                            this.Manager.Comment("reaching state \'S235\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker13)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker12)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker11)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS179CloseResponseChecker10)));
            }
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S225");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S225");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S228");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S228");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S231");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CloseResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S234");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S234");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS179CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S213");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS236() {
            this.Manager.Comment("reaching state \'S236\'");
        }
        
        private void CreateCloseTestCaseS179CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_BAD_IMPERSONATION_LEVEL,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_BAD_IMPERSONATION_LEVEL, status, "status of CreateResponse, state S213");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435458)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS237() {
            this.Manager.Comment("reaching state \'S237\'");
        }
        
        private void CreateCloseTestCaseS179ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S180");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS238() {
            this.Manager.Comment("reaching state \'S238\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
            this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Comment("reaching state \'S239\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S240\'");
            this.Manager.Comment("executing step \'call CreateRequest(StartWithPathSeparator,FileOpenReparsePointSet" +
                    ",FileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
            this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
            this.Manager.Comment("reaching state \'S241\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S242\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker6))) != -1)) {
                CreateCloseTestCaseS121();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker6)));
            }
        }
        
        private void CreateCloseTestCaseS179CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S242");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S242");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first character is a path separator character, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The first character in the file name of the Create Request is a path separator."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first ch" +
                    "aracter is a path separator character, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The first character in the file name of the Create Request is a path " +
                    "separator.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS179ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S180");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS243() {
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
            this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
            this.Manager.Comment("reaching state \'S244\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S245\'");
            this.Manager.Comment("executing step \'call CreateRequest(StartWithPathSeparator,FileOpenReparsePointSet" +
                    ",FileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
            this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
            this.Manager.Comment("reaching state \'S246\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S247\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker7))) != -1)) {
                CreateCloseTestCaseS248();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS179CreateResponseChecker7)));
            }
        }
        
        private void CreateCloseTestCaseS179CreateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S247");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first character is a path separator character, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The first character in the file name of the Create Request is a path separator."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first ch" +
                    "aracter is a path separator character, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The first character in the file name of the Create Request is a path " +
                    "separator.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS248() {
            this.Manager.Comment("reaching state \'S248\'");
        }
        #endregion
        
        #region Test Starting in S249
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS249() {
            this.Manager.BeginTest("CreateCloseTestCaseS249");
            this.Manager.Comment("reaching state \'S249\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp12;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp12);
            this.Manager.AddReturn(ReadConfigInfo, null, temp12);
            this.Manager.Comment("reaching state \'S250\'");
            int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS249ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS249ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS249ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS249ReadConfigChecker3)));
            if ((temp13 == 0)) {
                CreateCloseTestCaseS167();
                goto label9;
            }
            if ((temp13 == 1)) {
                CreateCloseTestCaseS173();
                goto label9;
            }
            if ((temp13 == 2)) {
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("executing step \'call CreateRequest(StartWithPathSeparator,FileOpenReparsePointSet" +
                        ",FileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S254\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S255\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS249CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS109();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS249CreateResponseChecker)));
                }
                goto label9;
            }
            if ((temp13 == 3)) {
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("executing step \'call CreateRequest(StartWithPathSeparator,FileOpenReparsePointSet" +
                        ",FileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S260\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS249CreateResponseChecker1))) != -1)) {
                    CreateCloseTestCaseS261();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS249CreateResponseChecker1)));
                }
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS249ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S250");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS249ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S250");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS249ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S250");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS249CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S255");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first character is a path separator character, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The first character in the file name of the Create Request is a path separator."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first ch" +
                    "aracter is a path separator character, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The first character in the file name of the Create Request is a path " +
                    "separator.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS249ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S250");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS249CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S260");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first character is a path separator character, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The first character in the file name of the Create Request is a path separator."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first ch" +
                    "aracter is a path separator character, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The first character in the file name of the Create Request is a path " +
                    "separator.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS261() {
            this.Manager.Comment("reaching state \'S261\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S262\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S263\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS249CloseResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S264\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S265\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S266\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS249CloseResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S267\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S268\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S269\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS249CloseResponseChecker2))) != -1)) {
                        this.Manager.Comment("reaching state \'S270\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S271\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S272\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS249CloseResponseChecker3))) != -1)) {
                            CreateCloseTestCaseS248();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS249CloseResponseChecker3)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS249CloseResponseChecker2)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS249CloseResponseChecker1)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS249CloseResponseChecker)));
            }
        }
        
        private void CreateCloseTestCaseS249CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S263");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S263");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS249CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S266");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S266");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS249CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S269");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S269");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS249CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S272");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S272");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S273
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS273() {
            this.Manager.BeginTest("CreateCloseTestCaseS273");
            this.Manager.Comment("reaching state \'S273\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp14;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp14);
            this.Manager.AddReturn(ReadConfigInfo, null, temp14);
            this.Manager.Comment("reaching state \'S274\'");
            int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS273ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS273ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS273ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS273ReadConfigChecker3)));
            if ((temp15 == 0)) {
                CreateCloseTestCaseS167();
                goto label10;
            }
            if ((temp15 == 1)) {
                CreateCloseTestCaseS173();
                goto label10;
            }
            if ((temp15 == 2)) {
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S276\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S277\'");
                this.Manager.Comment("executing step \'call CreateRequest(OtherInvalidFileName,FileOpenReparsePointSet,F" +
                        "ileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S278\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S279\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS273CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS109();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS273CreateResponseChecker)));
                }
                goto label10;
            }
            if ((temp15 == 3)) {
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,InvalidCreateContextSize,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.InvalidCreateContextSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S284\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS273CreateResponseChecker1))) != -1)) {
                    CreateCloseTestCaseS261();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS273CreateResponseChecker1)));
                }
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS273ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S274");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS273ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S274");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS273ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S274");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS273CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_OBJECT_NAME_INVALID,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_INVALID, status, "status of CreateResponse, state S279");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S279");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name fails to conform with the specification of a relative pathname in [MS-FSCC] section 2.1.5, the server MUST fail the request with STATUS_OBJECT_NAME_INVALID."", ""[TestInfo] The file name of the Create Request contains illegal character."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name fails to conform with the specification of a" +
                    " relative pathname in [MS-FSCC] section 2.1.5, the server MUST fail the request " +
                    "with STATUS_OBJECT_NAME_INVALID.\"");
            this.Manager.Checkpoint("\"[TestInfo] The file name of the Create Request contains illegal character.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS273ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S274");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS273CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S284");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the size of each individual create context is not equal to the DataLength of the create context, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The size of the create context in the Create Request is invalid."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the size of each individual create context is not equal to" +
                    " the DataLength of the create context, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The size of the create context in the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S285
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS285() {
            this.Manager.BeginTest("CreateCloseTestCaseS285");
            this.Manager.Comment("reaching state \'S285\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp16;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp16);
            this.Manager.AddReturn(ReadConfigInfo, null, temp16);
            this.Manager.Comment("reaching state \'S286\'");
            int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS285ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS285ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS285ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS285ReadConfigChecker3)));
            if ((temp18 == 0)) {
                CreateCloseTestCaseS167();
                goto label12;
            }
            if ((temp18 == 1)) {
                CreateCloseTestCaseS173();
                goto label12;
            }
            if ((temp18 == 2)) {
                this.Manager.Comment("reaching state \'S287\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S288\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S289\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,InvalidCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S290\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S291\'");
                int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS285CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS285CreateResponseChecker1)));
                if ((temp17 == 0)) {
                    CreateCloseTestCaseS292();
                    goto label11;
                }
                if ((temp17 == 1)) {
                    this.Manager.Comment("reaching state \'S304\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S305\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S306\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker4))) != -1)) {
                        this.Manager.Comment("reaching state \'S307\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S308\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S309\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S310\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S311\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S312\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker6))) != -1)) {
                                this.Manager.Comment("reaching state \'S313\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S314\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S315\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S316\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker7)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker6)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker5)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker4)));
                    }
                    goto label11;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS285CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS285CreateResponseChecker1)));
            label11:
;
                goto label12;
            }
            if ((temp18 == 3)) {
                this.Manager.Comment("reaching state \'S317\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S318\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseSet,ValidCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S321\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS285CreateResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S322\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S323\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S324\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker8))) != -1)) {
                        this.Manager.Comment("reaching state \'S325\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S326\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S327\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker9))) != -1)) {
                            this.Manager.Comment("reaching state \'S328\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S329\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S330\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker10))) != -1)) {
                                CreateCloseTestCaseS261();
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker10)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker9)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker8)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS285CreateResponseChecker2)));
                }
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS285ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS285ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS285ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS285CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S291");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S291");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context not specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error."", ""[TestInfo] The create context of Create Request is invalid"", ""[TestTag] UnexpectedContext"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context no" +
                    "t specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error.\"");
            this.Manager.Checkpoint("\"[TestInfo] The create context of Create Request is invalid\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS292() {
            this.Manager.Comment("reaching state \'S292\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S293\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S294\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S297\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S298\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S299\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S300\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker2))) != -1)) {
                        this.Manager.Comment("reaching state \'S301\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S302\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S303\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker3))) != -1)) {
                            CreateCloseTestCaseS165();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker3)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker2)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker1)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS285CloseResponseChecker)));
            }
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S294");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S294");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S297");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S297");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S300");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S300");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S303");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S303");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS285CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S291");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S291");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context not specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error."", ""[TestInfo] The create context of Create Request is invalid"", ""[TestTag] UnexpectedContext"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context no" +
                    "t specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error.\"");
            this.Manager.Checkpoint("\"[TestInfo] The create context of Create Request is invalid\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S306");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S306");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S309");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S309");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S312");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S312");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S315");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S315");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS285ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS285CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S321");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S321");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S324");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S324");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S327");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S327");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS285CloseResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(0)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the request, the server MUST query the attributes of the file after the close."", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Close Request.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags fiel" +
                    "d of the request, the server MUST query the attributes of the file after the clo" +
                    "se.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Clo" +
                    "se Request.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S331
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS331() {
            this.Manager.BeginTest("CreateCloseTestCaseS331");
            this.Manager.Comment("reaching state \'S331\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp19;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp19);
            this.Manager.AddReturn(ReadConfigInfo, null, temp19);
            this.Manager.Comment("reaching state \'S332\'");
            int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS331ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS331ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS331ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS331ReadConfigChecker3)));
            if ((temp20 == 0)) {
                CreateCloseTestCaseS167();
                goto label13;
            }
            if ((temp20 == 1)) {
                CreateCloseTestCaseS173();
                goto label13;
            }
            if ((temp20 == 2)) {
                this.Manager.Comment("reaching state \'S333\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S334\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S335\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,InvalidCreateContextSize,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.InvalidCreateContextSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S337\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS331CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS109();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS331CreateResponseChecker)));
                }
                goto label13;
            }
            if ((temp20 == 3)) {
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S340\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseNotSet,NoCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S342\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS331CreateResponseChecker1))) != -1)) {
                    CreateCloseTestCaseS343();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS331CreateResponseChecker1)));
                }
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS331ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S332");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS331ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S332");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS331ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S332");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS331CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S337");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S337");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the size of each individual create context is not equal to the DataLength of the create context, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The size of the create context in the Create Request is invalid."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the size of each individual create context is not equal to" +
                    " the DataLength of the create context, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The size of the create context in the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS331ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S332");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS331CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S342");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S342");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS343() {
            this.Manager.Comment("reaching state \'S343\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S344\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S345\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS331CloseResponseChecker))) != -1)) {
                CreateCloseTestCaseS261();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS331CloseResponseChecker)));
            }
        }
        
        private void CreateCloseTestCaseS331CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S345");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S345");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S346
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS346() {
            this.Manager.BeginTest("CreateCloseTestCaseS346");
            this.Manager.Comment("reaching state \'S346\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp21;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp21);
            this.Manager.AddReturn(ReadConfigInfo, null, temp21);
            this.Manager.Comment("reaching state \'S347\'");
            int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS346ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS346ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS346ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS346ReadConfigChecker3)));
            if ((temp22 == 0)) {
                CreateCloseTestCaseS167();
                goto label14;
            }
            if ((temp22 == 1)) {
                CreateCloseTestCaseS173();
                goto label14;
            }
            if ((temp22 == 2)) {
                this.Manager.Comment("reaching state \'S348\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseSet,ValidCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S351\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S352\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS346CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S353\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S354\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S355\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS346CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S356\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S357\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S358\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS346CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S359\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S360\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S361\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS346CloseResponseChecker2))) != -1)) {
                                CreateCloseTestCaseS109();
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS346CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS346CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS346CloseResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS346CreateResponseChecker)));
                }
                goto label14;
            }
            if ((temp22 == 3)) {
                this.Manager.Comment("reaching state \'S362\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S363\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S364\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,ValidCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S365\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S366\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS346CreateResponseChecker1))) != -1)) {
                    CreateCloseTestCaseS343();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS346CreateResponseChecker1)));
                }
                goto label14;
            }
            throw new InvalidOperationException("never reached");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS346ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S347");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS346ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S347");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS346ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S347");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS346CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S352");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S352");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS346CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S355");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S355");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS346CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S358");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S358");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS346CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S361");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(0)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the request, the server MUST query the attributes of the file after the close."", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Close Request.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags fiel" +
                    "d of the request, the server MUST query the attributes of the file after the clo" +
                    "se.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Clo" +
                    "se Request.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS346ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S347");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS346CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S366");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S367
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS367() {
            this.Manager.BeginTest("CreateCloseTestCaseS367");
            this.Manager.Comment("reaching state \'S367\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp23;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp23);
            this.Manager.AddReturn(ReadConfigInfo, null, temp23);
            this.Manager.Comment("reaching state \'S368\'");
            int temp24 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS367ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS367ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS367ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS367ReadConfigChecker3)));
            if ((temp24 == 0)) {
                CreateCloseTestCaseS167();
                goto label15;
            }
            if ((temp24 == 1)) {
                CreateCloseTestCaseS173();
                goto label15;
            }
            if ((temp24 == 2)) {
                this.Manager.Comment("reaching state \'S369\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S370\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S371\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseNotSet,NoCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S372\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S373\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS367CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS106();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS367CreateResponseChecker)));
                }
                goto label15;
            }
            if ((temp24 == 3)) {
                this.Manager.Comment("reaching state \'S374\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S376\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S377\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S378\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS367CreateResponseChecker1))) != -1)) {
                    CreateCloseTestCaseS343();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS367CreateResponseChecker1)));
                }
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS367ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S368");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS367ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S368");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS367ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S368");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS367CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S373");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS367ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S368");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS367CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S378");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S378");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S379
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS379() {
            this.Manager.BeginTest("CreateCloseTestCaseS379");
            this.Manager.Comment("reaching state \'S379\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp25;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp25);
            this.Manager.AddReturn(ReadConfigInfo, null, temp25);
            this.Manager.Comment("reaching state \'S380\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS379ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS379ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS379ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS379ReadConfigChecker3)));
            if ((temp27 == 0)) {
                CreateCloseTestCaseS167();
                goto label17;
            }
            if ((temp27 == 1)) {
                CreateCloseTestCaseS173();
                goto label17;
            }
            if ((temp27 == 2)) {
                this.Manager.Comment("reaching state \'S381\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,InvalidImpersonationLevel,NonDirectoryFile" +
                        ")\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S385\'");
                int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS379CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS379CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS379CreateResponseChecker2)));
                if ((temp26 == 0)) {
                    CreateCloseTestCaseS292();
                    goto label16;
                }
                if ((temp26 == 1)) {
                    this.Manager.Comment("reaching state \'S386\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S387\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S388\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS379CloseResponseChecker))) != -1)) {
                        CreateCloseTestCaseS152();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS379CloseResponseChecker)));
                    }
                    goto label16;
                }
                if ((temp26 == 2)) {
                    this.Manager.Comment("reaching state \'S389\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S390\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S391\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS379CloseResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S392\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S393\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S394\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS379CloseResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S395\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S396\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S397\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS379CloseResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S398\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S399\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S400\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS379CloseResponseChecker4))) != -1)) {
                                    CreateCloseTestCaseS166();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS379CloseResponseChecker4)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS379CloseResponseChecker3)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS379CloseResponseChecker2)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS379CloseResponseChecker1)));
                    }
                    goto label16;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS379CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS379CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS379CreateResponseChecker2)));
            label16:
;
                goto label17;
            }
            if ((temp27 == 3)) {
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S402\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'" +
                        "");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S405\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS379CreateResponseChecker3))) != -1)) {
                    CreateCloseTestCaseS343();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS379CreateResponseChecker3)));
                }
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS379ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS379ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS379ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS379CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S385");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS379CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S385");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS379CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S388");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S388");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS379CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_BAD_IMPERSONATION_LEVEL,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_BAD_IMPERSONATION_LEVEL, status, "status of CreateResponse, state S385");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435458)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS379CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S391");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS379CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS379CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS379CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S400");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S400");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS379ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS379CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S406
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS406() {
            this.Manager.BeginTest("CreateCloseTestCaseS406");
            this.Manager.Comment("reaching state \'S406\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp28;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp28);
            this.Manager.AddReturn(ReadConfigInfo, null, temp28);
            this.Manager.Comment("reaching state \'S407\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS406ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS406ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS406ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS406ReadConfigChecker3)));
            if ((temp29 == 0)) {
                CreateCloseTestCaseS167();
                goto label18;
            }
            if ((temp29 == 1)) {
                CreateCloseTestCaseS173();
                goto label18;
            }
            if ((temp29 == 2)) {
                this.Manager.Comment("reaching state \'S408\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S409\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S410\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,ValidCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S412\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS406CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS106();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS406CreateResponseChecker)));
                }
                goto label18;
            }
            if ((temp29 == 3)) {
                this.Manager.Comment("reaching state \'S413\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S414\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S415\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S416\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S417\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS406CreateResponseChecker1))) != -1)) {
                    CreateCloseTestCaseS343();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS406CreateResponseChecker1)));
                }
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS406ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S407");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS406ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S407");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS406ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S407");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS406CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S412");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S412");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS406ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S407");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS406CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S418
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS418() {
            this.Manager.BeginTest("CreateCloseTestCaseS418");
            this.Manager.Comment("reaching state \'S418\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp30;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp30);
            this.Manager.AddReturn(ReadConfigInfo, null, temp30);
            this.Manager.Comment("reaching state \'S419\'");
            int temp32 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS418ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS418ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS418ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS418ReadConfigChecker3)));
            if ((temp32 == 0)) {
                CreateCloseTestCaseS167();
                goto label20;
            }
            if ((temp32 == 1)) {
                CreateCloseTestCaseS173();
                goto label20;
            }
            if ((temp32 == 2)) {
                this.Manager.Comment("reaching state \'S420\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S421\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S422\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S423\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S424\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS418CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS106();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS418CreateResponseChecker)));
                }
                goto label20;
            }
            if ((temp32 == 3)) {
                this.Manager.Comment("reaching state \'S425\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S426\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S427\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,InvalidCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S428\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S429\'");
                int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS418CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS418CreateResponseChecker2)));
                if ((temp31 == 0)) {
                    this.Manager.Comment("reaching state \'S430\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S431\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S432\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS418CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S433\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S434\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S435\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS418CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S436\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S437\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S438\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS418CloseResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S439\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S440\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S441\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS418CloseResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S442\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS418CloseResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS418CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS418CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS418CloseResponseChecker)));
                    }
                    goto label19;
                }
                if ((temp31 == 1)) {
                    CreateCloseTestCaseS59();
                    goto label19;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS418CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS418CreateResponseChecker2)));
            label19:
;
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS418ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S419");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS418ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S419");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS418ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S419");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS418CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S424");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S424");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS418ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S419");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS418CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S429");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context not specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error."", ""[TestInfo] The create context of Create Request is invalid"", ""[TestTag] UnexpectedContext"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context no" +
                    "t specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error.\"");
            this.Manager.Checkpoint("\"[TestInfo] The create context of Create Request is invalid\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS418CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S432");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S432");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS418CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S435");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S435");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS418CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S438");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S438");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS418CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S441");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S441");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS418CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S429");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context not specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error."", ""[TestInfo] The create context of Create Request is invalid"", ""[TestTag] UnexpectedContext"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context no" +
                    "t specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error.\"");
            this.Manager.Checkpoint("\"[TestInfo] The create context of Create Request is invalid\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S443
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS443() {
            this.Manager.BeginTest("CreateCloseTestCaseS443");
            this.Manager.Comment("reaching state \'S443\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp33;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp33);
            this.Manager.AddReturn(ReadConfigInfo, null, temp33);
            this.Manager.Comment("reaching state \'S444\'");
            int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS443ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS443ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS443ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS443ReadConfigChecker3)));
            if ((temp34 == 0)) {
                CreateCloseTestCaseS167();
                goto label21;
            }
            if ((temp34 == 1)) {
                CreateCloseTestCaseS173();
                goto label21;
            }
            if ((temp34 == 2)) {
                this.Manager.Comment("reaching state \'S445\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S446\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S447\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'" +
                        "");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S448\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S449\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS443CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS106();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS443CreateResponseChecker)));
                }
                goto label21;
            }
            if ((temp34 == 3)) {
                this.Manager.Comment("reaching state \'S450\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Comment("reaching state \'S451\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S452\'");
                this.Manager.Comment("executing step \'call CreateRequest(OtherInvalidFileName,FileOpenReparsePointSet,F" +
                        "ileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S453\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S454\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS443CreateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S455\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S456\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S457\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS443CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S458\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S459\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S460\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS443CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S461\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S462\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S463\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS443CloseResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S464\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S465\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S466\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS443CloseResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S467\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS443CloseResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS443CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS443CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS443CloseResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS443CreateResponseChecker1)));
                }
                goto label21;
            }
            throw new InvalidOperationException("never reached");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS443ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S444");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS443ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S444");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS443ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S444");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS443CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S449");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S449");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS443ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S444");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS443CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_OBJECT_NAME_INVALID,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_INVALID, status, "status of CreateResponse, state S454");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S454");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name fails to conform with the specification of a relative pathname in [MS-FSCC] section 2.1.5, the server MUST fail the request with STATUS_OBJECT_NAME_INVALID."", ""[TestInfo] The file name of the Create Request contains illegal character."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name fails to conform with the specification of a" +
                    " relative pathname in [MS-FSCC] section 2.1.5, the server MUST fail the request " +
                    "with STATUS_OBJECT_NAME_INVALID.\"");
            this.Manager.Checkpoint("\"[TestInfo] The file name of the Create Request contains illegal character.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS443CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S457");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S457");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS443CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S460");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S460");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS443CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S463");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S463");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS443CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S466");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S466");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S468
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS468() {
            this.Manager.BeginTest("CreateCloseTestCaseS468");
            this.Manager.Comment("reaching state \'S468\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp35;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp35);
            this.Manager.AddReturn(ReadConfigInfo, null, temp35);
            this.Manager.Comment("reaching state \'S469\'");
            int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS468ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS468ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS468ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS468ReadConfigChecker3)));
            if ((temp36 == 0)) {
                CreateCloseTestCaseS238();
                goto label22;
            }
            if ((temp36 == 1)) {
                CreateCloseTestCaseS243();
                goto label22;
            }
            if ((temp36 == 2)) {
                this.Manager.Comment("reaching state \'S470\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S471\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S472\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseSet,ValidCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S473\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S474\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS468CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S475\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S476\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S477\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S478\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S479\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S480\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S481\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S482\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S483\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker2))) != -1)) {
                                CreateCloseTestCaseS484();
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS468CreateResponseChecker)));
                }
                goto label22;
            }
            if ((temp36 == 3)) {
                this.Manager.Comment("reaching state \'S496\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S497\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S498\'");
                this.Manager.Comment("executing step \'call CreateRequest(StartWithPathSeparator,FileOpenReparsePointSet" +
                        ",FileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S499\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S500\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS468CreateResponseChecker1))) != -1)) {
                    CreateCloseTestCaseS501();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS468CreateResponseChecker1)));
                }
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS468ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S469");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS468ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S469");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS468ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S469");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS468CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S474");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S474");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S477");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S477");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S480");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S480");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S483");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(0)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S483");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the request, the server MUST query the attributes of the file after the close."", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Close Request.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags fiel" +
                    "d of the request, the server MUST query the attributes of the file after the clo" +
                    "se.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Clo" +
                    "se Request.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS484() {
            this.Manager.Comment("reaching state \'S484\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S485\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S486\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S487\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S488\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S489\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker4))) != -1)) {
                    this.Manager.Comment("reaching state \'S490\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S491\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S492\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker5))) != -1)) {
                        this.Manager.Comment("reaching state \'S493\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S494\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S495\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker6))) != -1)) {
                            CreateCloseTestCaseS172();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker6)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker5)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker4)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker3)));
            }
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S486");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S486");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S489");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S489");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S492");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S492");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S495");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S495");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS468ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S469");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS468CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S500");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S500");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first character is a path separator character, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The first character in the file name of the Create Request is a path separator."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first ch" +
                    "aracter is a path separator character, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The first character in the file name of the Create Request is a path " +
                    "separator.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS501() {
            this.Manager.Comment("reaching state \'S501\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S502\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S503\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker7))) != -1)) {
                this.Manager.Comment("reaching state \'S504\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S505\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S506\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker8))) != -1)) {
                    this.Manager.Comment("reaching state \'S507\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S508\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S509\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker9))) != -1)) {
                        this.Manager.Comment("reaching state \'S510\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S511\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S512\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker10))) != -1)) {
                            CreateCloseTestCaseS178();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker10)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker9)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker8)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS468CloseResponseChecker7)));
            }
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S503");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S503");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S506");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S506");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S509");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S509");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS468CloseResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S512");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S513
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS513() {
            this.Manager.BeginTest("CreateCloseTestCaseS513");
            this.Manager.Comment("reaching state \'S513\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp37;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp37);
            this.Manager.AddReturn(ReadConfigInfo, null, temp37);
            this.Manager.Comment("reaching state \'S514\'");
            int temp38 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS513ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS513ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS513ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS513ReadConfigChecker3)));
            if ((temp38 == 0)) {
                CreateCloseTestCaseS238();
                goto label23;
            }
            if ((temp38 == 1)) {
                CreateCloseTestCaseS243();
                goto label23;
            }
            if ((temp38 == 2)) {
                this.Manager.Comment("reaching state \'S515\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S516\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S517\'");
                this.Manager.Comment("executing step \'call CreateRequest(StartWithPathSeparator,FileOpenReparsePointSet" +
                        ",FileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S519\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS513CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS484();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS513CreateResponseChecker)));
                }
                goto label23;
            }
            if ((temp38 == 3)) {
                this.Manager.Comment("reaching state \'S520\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S521\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S522\'");
                this.Manager.Comment("executing step \'call CreateRequest(OtherInvalidFileName,FileOpenReparsePointSet,F" +
                        "ileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S523\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S524\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS513CreateResponseChecker1))) != -1)) {
                    CreateCloseTestCaseS501();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS513CreateResponseChecker1)));
                }
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS513ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS513ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS513ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS513CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S519");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S519");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first character is a path separator character, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The first character in the file name of the Create Request is a path separator."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name length is greater than zero and the first ch" +
                    "aracter is a path separator character, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The first character in the file name of the Create Request is a path " +
                    "separator.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS513ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S514");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS513CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_OBJECT_NAME_INVALID,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_INVALID, status, "status of CreateResponse, state S524");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S524");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name fails to conform with the specification of a relative pathname in [MS-FSCC] section 2.1.5, the server MUST fail the request with STATUS_OBJECT_NAME_INVALID."", ""[TestInfo] The file name of the Create Request contains illegal character."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name fails to conform with the specification of a" +
                    " relative pathname in [MS-FSCC] section 2.1.5, the server MUST fail the request " +
                    "with STATUS_OBJECT_NAME_INVALID.\"");
            this.Manager.Checkpoint("\"[TestInfo] The file name of the Create Request contains illegal character.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S525
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS525() {
            this.Manager.BeginTest("CreateCloseTestCaseS525");
            this.Manager.Comment("reaching state \'S525\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp39;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp39);
            this.Manager.AddReturn(ReadConfigInfo, null, temp39);
            this.Manager.Comment("reaching state \'S526\'");
            int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS525ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS525ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS525ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS525ReadConfigChecker3)));
            if ((temp40 == 0)) {
                CreateCloseTestCaseS238();
                goto label24;
            }
            if ((temp40 == 1)) {
                CreateCloseTestCaseS243();
                goto label24;
            }
            if ((temp40 == 2)) {
                this.Manager.Comment("reaching state \'S527\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S528\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S529\'");
                this.Manager.Comment("executing step \'call CreateRequest(OtherInvalidFileName,FileOpenReparsePointSet,F" +
                        "ileDeteteOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S530\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S531\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS525CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS484();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS525CreateResponseChecker)));
                }
                goto label24;
            }
            if ((temp40 == 3)) {
                this.Manager.Comment("reaching state \'S532\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S533\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S534\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,InvalidCreateContextSize,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.InvalidCreateContextSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S535\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S536\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS525CreateResponseChecker1))) != -1)) {
                    CreateCloseTestCaseS501();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS525CreateResponseChecker1)));
                }
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS525ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S526");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS525ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S526");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS525ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S526");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS525CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_OBJECT_NAME_INVALID,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_INVALID, status, "status of CreateResponse, state S531");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S531");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the file name fails to conform with the specification of a relative pathname in [MS-FSCC] section 2.1.5, the server MUST fail the request with STATUS_OBJECT_NAME_INVALID."", ""[TestInfo] The file name of the Create Request contains illegal character."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the file name fails to conform with the specification of a" +
                    " relative pathname in [MS-FSCC] section 2.1.5, the server MUST fail the request " +
                    "with STATUS_OBJECT_NAME_INVALID.\"");
            this.Manager.Checkpoint("\"[TestInfo] The file name of the Create Request contains illegal character.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS525ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S526");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS525CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S536");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S536");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the size of each individual create context is not equal to the DataLength of the create context, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The size of the create context in the Create Request is invalid."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the size of each individual create context is not equal to" +
                    " the DataLength of the create context, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The size of the create context in the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S537
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS537() {
            this.Manager.BeginTest("CreateCloseTestCaseS537");
            this.Manager.Comment("reaching state \'S537\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp41;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp41);
            this.Manager.AddReturn(ReadConfigInfo, null, temp41);
            this.Manager.Comment("reaching state \'S538\'");
            int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS537ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS537ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS537ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS537ReadConfigChecker3)));
            if ((temp43 == 0)) {
                CreateCloseTestCaseS238();
                goto label26;
            }
            if ((temp43 == 1)) {
                CreateCloseTestCaseS243();
                goto label26;
            }
            if ((temp43 == 2)) {
                this.Manager.Comment("reaching state \'S539\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S540\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S541\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,InvalidCreateContextSize,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.InvalidCreateContextSize, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S542\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S543\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS537CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS484();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS537CreateResponseChecker)));
                }
                goto label26;
            }
            if ((temp43 == 3)) {
                this.Manager.Comment("reaching state \'S544\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S545\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S546\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,InvalidCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S547\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S548\'");
                int temp42 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS537CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS537CreateResponseChecker2)));
                if ((temp42 == 0)) {
                    this.Manager.Comment("reaching state \'S549\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S550\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S551\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S552\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S553\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S554\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S555\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S556\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S557\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S558\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S559\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S560\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S561\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker)));
                    }
                    goto label25;
                }
                if ((temp42 == 1)) {
                    CreateCloseTestCaseS562();
                    goto label25;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS537CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS537CreateResponseChecker2)));
            label25:
;
                goto label26;
            }
            throw new InvalidOperationException("never reached");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS537ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S538");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS537ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S538");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS537ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S538");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS537CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S543");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the size of each individual create context is not equal to the DataLength of the create context, the server MUST fail the request with STATUS_INVALID_PARAMETER."", ""[TestInfo] The size of the create context in the Create Request is invalid."", ""[TestTag] OutOfBoundary""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the size of each individual create context is not equal to" +
                    " the DataLength of the create context, the server MUST fail the request with STA" +
                    "TUS_INVALID_PARAMETER.\"");
            this.Manager.Checkpoint("\"[TestInfo] The size of the create context in the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] OutOfBoundary\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS537ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S538");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS537CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S548");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S548");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context not specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error."", ""[TestInfo] The create context of Create Request is invalid"", ""[TestTag] UnexpectedContext"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context no" +
                    "t specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error.\"");
            this.Manager.Checkpoint("\"[TestInfo] The create context of Create Request is invalid\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS537CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S551");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S551");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS537CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS537CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S557");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS537CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S560");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S560");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS537CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S548");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S548");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context not specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error."", ""[TestInfo] The create context of Create Request is invalid"", ""[TestTag] UnexpectedContext"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context no" +
                    "t specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error.\"");
            this.Manager.Checkpoint("\"[TestInfo] The create context of Create Request is invalid\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS562() {
            this.Manager.Comment("reaching state \'S562\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S563\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S564\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker4))) != -1)) {
                this.Manager.Comment("reaching state \'S565\'");
                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                        "penDurableFileID)\'");
                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                this.Manager.Comment("reaching state \'S566\'");
                this.Manager.Comment("checking step \'return CloseRequest\'");
                this.Manager.Comment("reaching state \'S567\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker5))) != -1)) {
                    this.Manager.Comment("reaching state \'S568\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S569\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S570\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker6))) != -1)) {
                        this.Manager.Comment("reaching state \'S571\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S572\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S573\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker7))) != -1)) {
                            CreateCloseTestCaseS236();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker7)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker6)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker5)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS537CloseResponseChecker4)));
            }
        }
        
        private void CreateCloseTestCaseS537CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S564");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S564");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS537CloseResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S567");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S567");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS537CloseResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S570");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S570");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS537CloseResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S573");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S573");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S574
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS574() {
            this.Manager.BeginTest("CreateCloseTestCaseS574");
            this.Manager.Comment("reaching state \'S574\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp44;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp44);
            this.Manager.AddReturn(ReadConfigInfo, null, temp44);
            this.Manager.Comment("reaching state \'S575\'");
            int temp46 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS574ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS574ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS574ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS574ReadConfigChecker3)));
            if ((temp46 == 0)) {
                CreateCloseTestCaseS238();
                goto label28;
            }
            if ((temp46 == 1)) {
                CreateCloseTestCaseS243();
                goto label28;
            }
            if ((temp46 == 2)) {
                this.Manager.Comment("reaching state \'S576\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S577\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S578\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,ValidCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S579\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S580\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS574CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS581();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS574CreateResponseChecker)));
                }
                goto label28;
            }
            if ((temp46 == 3)) {
                this.Manager.Comment("reaching state \'S584\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S585\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S586\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,InvalidImpersonationLevel,NonDirectoryFile" +
                        ")\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S587\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S588\'");
                int temp45 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS574CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS574CreateResponseChecker2)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS574CreateResponseChecker3)));
                if ((temp45 == 0)) {
                    CreateCloseTestCaseS562();
                    goto label27;
                }
                if ((temp45 == 1)) {
                    this.Manager.Comment("reaching state \'S589\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S590\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S591\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker1))) != -1)) {
                        CreateCloseTestCaseS223();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker1)));
                    }
                    goto label27;
                }
                if ((temp45 == 2)) {
                    this.Manager.Comment("reaching state \'S592\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S593\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S594\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker2))) != -1)) {
                        this.Manager.Comment("reaching state \'S595\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S596\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S597\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker3))) != -1)) {
                            this.Manager.Comment("reaching state \'S598\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S599\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S600\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker4))) != -1)) {
                                this.Manager.Comment("reaching state \'S601\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S602\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S603\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker5))) != -1)) {
                                    CreateCloseTestCaseS237();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker5)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker4)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker3)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker2)));
                    }
                    goto label27;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS574CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS574CreateResponseChecker2)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS574CreateResponseChecker3)));
            label27:
;
                goto label28;
            }
            throw new InvalidOperationException("never reached");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS574ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S575");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS574ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S575");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS574ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S575");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS574CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S580");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S580");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS581() {
            this.Manager.Comment("reaching state \'S581\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S582\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S583\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker))) != -1)) {
                CreateCloseTestCaseS484();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS574CloseResponseChecker)));
            }
        }
        
        private void CreateCloseTestCaseS574CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S583");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S583");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS574ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S575");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS574CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S588");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S588");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS574CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S588");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S588");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS574CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S591");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S591");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS574CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_BAD_IMPERSONATION_LEVEL,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_BAD_IMPERSONATION_LEVEL, status, "status of CreateResponse, state S588");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S588");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435458)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS574CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S594");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S594");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS574CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S597");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS574CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S600");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS574CloseResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S603");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S603");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S604
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS604() {
            this.Manager.BeginTest("CreateCloseTestCaseS604");
            this.Manager.Comment("reaching state \'S604\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp47;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp47);
            this.Manager.AddReturn(ReadConfigInfo, null, temp47);
            this.Manager.Comment("reaching state \'S605\'");
            int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS604ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS604ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS604ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS604ReadConfigChecker3)));
            if ((temp48 == 0)) {
                CreateCloseTestCaseS238();
                goto label29;
            }
            if ((temp48 == 1)) {
                CreateCloseTestCaseS243();
                goto label29;
            }
            if ((temp48 == 2)) {
                this.Manager.Comment("reaching state \'S606\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S607\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S608\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S609\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S610\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS604CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS581();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS604CreateResponseChecker)));
                }
                goto label29;
            }
            if ((temp48 == 3)) {
                this.Manager.Comment("reaching state \'S611\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S612\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S613\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseSet,ValidCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S614\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S615\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS604CreateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S616\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                    this.Manager.Comment("reaching state \'S617\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S618\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS604CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S619\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                "oOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S620\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S621\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS604CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S622\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S623\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S624\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS604CloseResponseChecker2))) != -1)) {
                                CreateCloseTestCaseS501();
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS604CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS604CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS604CloseResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS604CreateResponseChecker1)));
                }
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS604ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S605");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS604ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S605");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS604ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S605");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS604CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S610");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S610");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS604ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S605");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS604CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S615");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S615");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS604CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S618");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S618");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS604CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S621");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S621");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS604CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S624");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(0)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S624");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the request, the server MUST query the attributes of the file after the close."", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Close Request.""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.10: If SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags fiel" +
                    "d of the request, the server MUST query the attributes of the file after the clo" +
                    "se.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is set in the Flags field of the Clo" +
                    "se Request.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S625
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS625() {
            this.Manager.BeginTest("CreateCloseTestCaseS625");
            this.Manager.Comment("reaching state \'S625\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp49;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp49);
            this.Manager.AddReturn(ReadConfigInfo, null, temp49);
            this.Manager.Comment("reaching state \'S626\'");
            int temp50 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS625ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS625ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS625ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS625ReadConfigChecker3)));
            if ((temp50 == 0)) {
                CreateCloseTestCaseS238();
                goto label30;
            }
            if ((temp50 == 1)) {
                CreateCloseTestCaseS243();
                goto label30;
            }
            if ((temp50 == 2)) {
                this.Manager.Comment("reaching state \'S627\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S628\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S629\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'" +
                        "");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S630\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S631\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS625CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS581();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS625CreateResponseChecker)));
                }
                goto label30;
            }
            if ((temp50 == 3)) {
                this.Manager.Comment("reaching state \'S632\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S633\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S634\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseNotSet,NoCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S635\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S636\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS625CreateResponseChecker1))) != -1)) {
                    CreateCloseTestCaseS637();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS625CreateResponseChecker1)));
                }
                goto label30;
            }
            throw new InvalidOperationException("never reached");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS625ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S626");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS625ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S626");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS625ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S626");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS625CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S631");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S631");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS625ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S626");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS625CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S636");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S636");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS637() {
            this.Manager.Comment("reaching state \'S637\'");
            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                    "ToOpenDurableFileID)\'");
            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
            this.Manager.Comment("reaching state \'S638\'");
            this.Manager.Comment("checking step \'return CloseRequest\'");
            this.Manager.Comment("reaching state \'S639\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS625CloseResponseChecker))) != -1)) {
                CreateCloseTestCaseS501();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS625CloseResponseChecker)));
            }
        }
        
        private void CreateCloseTestCaseS625CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S639");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S639");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S640
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS640() {
            this.Manager.BeginTest("CreateCloseTestCaseS640");
            this.Manager.Comment("reaching state \'S640\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp51;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp51);
            this.Manager.AddReturn(ReadConfigInfo, null, temp51);
            this.Manager.Comment("reaching state \'S641\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS640ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS640ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS640ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS640ReadConfigChecker3)));
            if ((temp53 == 0)) {
                CreateCloseTestCaseS238();
                goto label32;
            }
            if ((temp53 == 1)) {
                CreateCloseTestCaseS243();
                goto label32;
            }
            if ((temp53 == 2)) {
                this.Manager.Comment("reaching state \'S642\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S643\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S644\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,InvalidImpersonationLevel,NonDirectoryFile" +
                        ")\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S645\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S646\'");
                int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS640CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS640CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS640CreateResponseChecker2)));
                if ((temp52 == 0)) {
                    CreateCloseTestCaseS28();
                    goto label31;
                }
                if ((temp52 == 1)) {
                    this.Manager.Comment("reaching state \'S647\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S648\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S649\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS640CloseResponseChecker))) != -1)) {
                        CreateCloseTestCaseS195();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS640CloseResponseChecker)));
                    }
                    goto label31;
                }
                if ((temp52 == 2)) {
                    this.Manager.Comment("reaching state \'S650\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S651\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S652\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS640CloseResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S653\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S654\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S655\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS640CloseResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S656\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S657\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S658\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS640CloseResponseChecker3))) != -1)) {
                                this.Manager.Comment("reaching state \'S659\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S660\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S661\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS640CloseResponseChecker4))) != -1)) {
                                    CreateCloseTestCaseS208();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS640CloseResponseChecker4)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS640CloseResponseChecker3)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS640CloseResponseChecker2)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS640CloseResponseChecker1)));
                    }
                    goto label31;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS640CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS640CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS640CreateResponseChecker2)));
            label31:
;
                goto label32;
            }
            if ((temp53 == 3)) {
                this.Manager.Comment("reaching state \'S662\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S663\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S664\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,ValidCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S665\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S666\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS640CreateResponseChecker3))) != -1)) {
                    CreateCloseTestCaseS637();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS640CreateResponseChecker3)));
                }
                goto label32;
            }
            throw new InvalidOperationException("never reached");
        label32:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS640ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S641");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS640ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S641");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS640ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S641");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS640CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S646");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S646");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS640CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S646");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S646");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS640CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS640CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_BAD_IMPERSONATION_LEVEL,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_BAD_IMPERSONATION_LEVEL, status, "status of CreateResponse, state S646");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S646");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435458)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS640CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S652");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S652");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS640CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S655");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S655");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS640CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S658");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S658");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS640CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S661");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S661");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS640ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S641");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS640CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S666");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S666");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S667
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS667() {
            this.Manager.BeginTest("CreateCloseTestCaseS667");
            this.Manager.Comment("reaching state \'S667\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp54;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp54);
            this.Manager.AddReturn(ReadConfigInfo, null, temp54);
            this.Manager.Comment("reaching state \'S668\'");
            int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS667ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS667ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS667ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS667ReadConfigChecker3)));
            if ((temp55 == 0)) {
                CreateCloseTestCaseS238();
                goto label33;
            }
            if ((temp55 == 1)) {
                CreateCloseTestCaseS243();
                goto label33;
            }
            if ((temp55 == 2)) {
                this.Manager.Comment("reaching state \'S669\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S670\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S671\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S672\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S673\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS667CreateResponseChecker))) != -1)) {
                    CreateCloseTestCaseS581();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS667CreateResponseChecker)));
                }
                goto label33;
            }
            if ((temp55 == 3)) {
                this.Manager.Comment("reaching state \'S674\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Comment("reaching state \'S675\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S676\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,NoCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S677\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S678\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS667CreateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S679\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S680\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S681\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS667CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S682\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                                "ToOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S683\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S684\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS667CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S685\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S686\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S687\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS667CloseResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S688\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                        "ToOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                                this.Manager.Comment("reaching state \'S689\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S690\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS667CloseResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S691\'");
                                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                            "oOpenDurableFileID)\'");
                                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                    this.Manager.Comment("reaching state \'S692\'");
                                    this.Manager.Comment("checking step \'return CloseRequest\'");
                                    this.Manager.Comment("reaching state \'S693\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS667CloseResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S694\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS667CloseResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS667CloseResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS667CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS667CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS667CloseResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS667CreateResponseChecker1)));
                }
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS667ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S668");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS667ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S668");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS667ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S668");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS667CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S673");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S673");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS667ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S668");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS667CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S678");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S678");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS667CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S681");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S681");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS667CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S684");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S684");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS667CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S687");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S687");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS667CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S690");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S690");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS667CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S693");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S695
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS695() {
            this.Manager.BeginTest("CreateCloseTestCaseS695");
            this.Manager.Comment("reaching state \'S695\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp56;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp56);
            this.Manager.AddReturn(ReadConfigInfo, null, temp56);
            this.Manager.Comment("reaching state \'S696\'");
            int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS695ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS695ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS695ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS695ReadConfigChecker3)));
            if ((temp58 == 0)) {
                CreateCloseTestCaseS238();
                goto label35;
            }
            if ((temp58 == 1)) {
                CreateCloseTestCaseS243();
                goto label35;
            }
            if ((temp58 == 2)) {
                this.Manager.Comment("reaching state \'S697\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21);
                this.Manager.Comment("reaching state \'S698\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S699\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseSet,InvalidCreateContext,ValidImpersonationLevel,DirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(0)));
                this.Manager.Comment("reaching state \'S700\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S701\'");
                int temp57 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS695CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS695CreateResponseChecker1)));
                if ((temp57 == 0)) {
                    this.Manager.Comment("reaching state \'S702\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S703\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S704\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S705\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S706\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S707\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S708\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S709\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S710\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S711\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S712\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S713\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S714\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker)));
                    }
                    goto label34;
                }
                if ((temp57 == 1)) {
                    this.Manager.Comment("reaching state \'S715\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S716\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S717\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker4))) != -1)) {
                        this.Manager.Comment("reaching state \'S718\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S719\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S720\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S721\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S722\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S723\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker6))) != -1)) {
                                this.Manager.Comment("reaching state \'S724\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S725\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S726\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S727\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker7)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker6)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker5)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS695CloseResponseChecker4)));
                    }
                    goto label34;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS695CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS695CreateResponseChecker1)));
            label34:
;
                goto label35;
            }
            if ((temp58 == 3)) {
                this.Manager.Comment("reaching state \'S728\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002);
                this.Manager.Comment("reaching state \'S729\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S730\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'" +
                        "");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S731\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S732\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS695CreateResponseChecker2))) != -1)) {
                    CreateCloseTestCaseS637();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS695CreateResponseChecker2)));
                }
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS695ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S696");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS695ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S696");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS695ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S696");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS695CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S701");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S701");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context not specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error."", ""[TestInfo] The create context of Create Request is invalid"", ""[TestTag] UnexpectedContext"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context no" +
                    "t specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error.\"");
            this.Manager.Checkpoint("\"[TestInfo] The create context of Create Request is invalid\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS695CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S704");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S704");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS695CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S707");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S707");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS695CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S710");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS695CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S713");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S713");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS695CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_INVALID_PARAMETER,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_INVALID_PARAMETER, status, "status of CreateResponse, state S701");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S701");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context not specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error."", ""[TestInfo] The create context of Create Request is invalid"", ""[TestTag] UnexpectedContext"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: The server SHOULD fail any request having a create context no" +
                    "t specified in section 2.2.13.2, with a STATUS_INVALID_PARAMETER error.\"");
            this.Manager.Checkpoint("\"[TestInfo] The create context of Create Request is invalid\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS695CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S717");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS695CloseResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S720");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S720");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS695CloseResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S723");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S723");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS695CloseResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S726");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S726");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS695ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S696");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS695CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S732");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S732");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        #endregion
        
        #region Test Starting in S733
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS733() {
            this.Manager.BeginTest("CreateCloseTestCaseS733");
            this.Manager.Comment("reaching state \'S733\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp59;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp59);
            this.Manager.AddReturn(ReadConfigInfo, null, temp59);
            this.Manager.Comment("reaching state \'S734\'");
            int temp61 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS733ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS733ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS733ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS733ReadConfigChecker3)));
            if ((temp61 == 0)) {
                CreateCloseTestCaseS173();
                goto label37;
            }
            if ((temp61 == 1)) {
                CreateCloseTestCaseS238();
                goto label37;
            }
            if ((temp61 == 2)) {
                CreateCloseTestCaseS243();
                goto label37;
            }
            if ((temp61 == 3)) {
                this.Manager.Comment("reaching state \'S735\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30);
                this.Manager.Comment("reaching state \'S736\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S737\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointNotSet,FileD" +
                        "eteteOnCloseNotSet,ValidCreateContext,InvalidImpersonationLevel,NonDirectoryFile" +
                        ")\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType.ValidCreateContext, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S738\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S739\'");
                int temp60 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS733CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS733CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS733CreateResponseChecker2)));
                if ((temp60 == 0)) {
                    this.Manager.Comment("reaching state \'S740\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S741\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S742\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S743\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                                "ToOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S744\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S745\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S746\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S747\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S748\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S749\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                        "ToOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                                this.Manager.Comment("reaching state \'S750\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S751\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S752\'");
                                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                            "oOpenDurableFileID)\'");
                                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                    this.Manager.Comment("reaching state \'S753\'");
                                    this.Manager.Comment("checking step \'return CloseRequest\'");
                                    this.Manager.Comment("reaching state \'S754\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S755\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker)));
                    }
                    goto label36;
                }
                if ((temp60 == 1)) {
                    this.Manager.Comment("reaching state \'S756\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S757\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S758\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker5))) != -1)) {
                        this.Manager.Comment("reaching state \'S759\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S760\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S761\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker6))) != -1)) {
                            this.Manager.Comment("reaching state \'S762\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S763\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S764\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker7))) != -1)) {
                                this.Manager.Comment("reaching state \'S765\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S766\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S767\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S768\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker8)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker7)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker6)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker5)));
                    }
                    goto label36;
                }
                if ((temp60 == 2)) {
                    this.Manager.Comment("reaching state \'S769\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S770\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S771\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker9))) != -1)) {
                        this.Manager.Comment("reaching state \'S772\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                "penDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S773\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S774\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker10))) != -1)) {
                            this.Manager.Comment("reaching state \'S775\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                    "ToOpenDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                            this.Manager.Comment("reaching state \'S776\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S777\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker11))) != -1)) {
                                this.Manager.Comment("reaching state \'S778\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                        "oOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                this.Manager.Comment("reaching state \'S779\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S780\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S781\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker12)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker11)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker10)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS733CloseResponseChecker9)));
                    }
                    goto label36;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS733CreateResponseChecker)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS733CreateResponseChecker1)), new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS733CreateResponseChecker2)));
            label36:
;
                goto label37;
            }
            throw new InvalidOperationException("never reached");
        label37:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS733ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S734");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS733ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S734");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS733ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S734");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS733ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S734");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS733CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S739");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S739");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v1.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S742");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S742");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S745");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S745");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S748");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S748");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S751");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S751");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S754");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S754");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(status,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S739");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S739");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is NonWindows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v1.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.status, "v2 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S758");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S758");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S761");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S761");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S764");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S764");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S767");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S767");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_BAD_IMPERSONATION_LEVEL,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_BAD_IMPERSONATION_LEVEL, status, "status of CreateResponse, state S739");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S739");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the values specified in section 2.2.13, the server SHOULD fail the request with STATUS_BAD_IMPERSONATION_LEVEL."", ""[TestInfo] The ImpersonationLevel of the Create Request is invalid."", ""[TestTag] UnexpectedFields"", ""[TestInfo] The SUT platform is Windows""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435458)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the ImpersonationLevel in the request is not one of the va" +
                    "lues specified in section 2.2.13, the server SHOULD fail the request with STATUS" +
                    "_BAD_IMPERSONATION_LEVEL.\"");
            this.Manager.Checkpoint("\"[TestInfo] The ImpersonationLevel of the Create Request is invalid.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is Windows\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S771");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S771");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S774");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S774");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S777");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S777");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS733CloseResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S780");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S780");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S782
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb2002)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateClose)]
        public void CreateCloseTestCaseS782() {
            this.Manager.BeginTest("CreateCloseTestCaseS782");
            this.Manager.Comment("reaching state \'S782\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig temp62;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ICreateCloseAdapterInstance.ReadConfig(out temp62);
            this.Manager.AddReturn(ReadConfigInfo, null, temp62);
            this.Manager.Comment("reaching state \'S783\'");
            int temp63 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS782ReadConfigChecker)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS782ReadConfigChecker1)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS782ReadConfigChecker2)), new ExpectedReturn(CreateCloseTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.CreateCloseTestCaseS782ReadConfigChecker3)));
            if ((temp63 == 0)) {
                CreateCloseTestCaseS173();
                goto label38;
            }
            if ((temp63 == 1)) {
                CreateCloseTestCaseS238();
                goto label38;
            }
            if ((temp63 == 2)) {
                CreateCloseTestCaseS243();
                goto label38;
            }
            if ((temp63 == 3)) {
                this.Manager.Comment("reaching state \'S784\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302)\'");
                this.ICreateCloseAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302);
                this.Manager.Comment("reaching state \'S785\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S786\'");
                this.Manager.Comment("executing step \'call CreateRequest(ValidFileName,FileOpenReparsePointSet,FileDete" +
                        "teOnCloseNotSet,NoCreateContext,ValidImpersonationLevel,NonDirectoryFile)\'");
                this.ICreateCloseAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileNameType.ValidFileName, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileOpenReparsePointType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateOptionsFileDeleteOnCloseType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.ImpersonationLevelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateFileType)(1)));
                this.Manager.Comment("reaching state \'S787\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S788\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS782CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S789\'");
                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                            "ToOpenDurableFileID)\'");
                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                    this.Manager.Comment("reaching state \'S790\'");
                    this.Manager.Comment("checking step \'return CloseRequest\'");
                    this.Manager.Comment("reaching state \'S791\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS782CloseResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S792\'");
                        this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribNotSet,ValidFileIdVolatile,Equal" +
                                "ToOpenDurableFileID)\'");
                        this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                        this.Manager.Comment("reaching state \'S793\'");
                        this.Manager.Comment("checking step \'return CloseRequest\'");
                        this.Manager.Comment("reaching state \'S794\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS782CloseResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S795\'");
                            this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,EqualToO" +
                                    "penDurableFileID)\'");
                            this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                            this.Manager.Comment("reaching state \'S796\'");
                            this.Manager.Comment("checking step \'return CloseRequest\'");
                            this.Manager.Comment("reaching state \'S797\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS782CloseResponseChecker2))) != -1)) {
                                this.Manager.Comment("reaching state \'S798\'");
                                this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,ValidFileIdVolatile,NotEqual" +
                                        "ToOpenDurableFileID)\'");
                                this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(1)));
                                this.Manager.Comment("reaching state \'S799\'");
                                this.Manager.Comment("checking step \'return CloseRequest\'");
                                this.Manager.Comment("reaching state \'S800\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS782CloseResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S801\'");
                                    this.Manager.Comment("executing step \'call CloseRequest(PostQueryAttribSet,InvalidFileIdVolatile,EqualT" +
                                            "oOpenDurableFileID)\'");
                                    this.ICreateCloseAdapterInstance.CloseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CloseFlagType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdVolatileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.FileIdPersistentType)(0)));
                                    this.Manager.Comment("reaching state \'S802\'");
                                    this.Manager.Comment("checking step \'return CloseRequest\'");
                                    this.Manager.Comment("reaching state \'S803\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS782CloseResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S804\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS782CloseResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS782CloseResponseChecker3)));
                                }
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS782CloseResponseChecker2)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS782CloseResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CloseResponseInfo, null, new CloseResponseDelegate1(this.CreateCloseTestCaseS782CloseResponseChecker)));
                    }
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(CreateCloseTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.CreateCloseTestCaseS782CreateResponseChecker)));
                }
                goto label38;
            }
            throw new InvalidOperationException("never reached");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void CreateCloseTestCaseS782ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S783");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 768");
        }
        
        private void CreateCloseTestCaseS782ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S783");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 514");
        }
        
        private void CreateCloseTestCaseS782ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S783");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 528");
        }
        
        private void CreateCloseTestCaseS782ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c, c, "c of ReadConfig, state S783");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionServerSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionServerSupported == 770");
        }
        
        private void CreateCloseTestCaseS782CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig config) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S788");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.c1, config, "config of CreateResponse, state S788");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open object for this open and insert it into Session.OpenTable and GlobalOpenTable. "", ""[TestInfo] The Create Request doesn't contain any invalid fields, the open is created successfully and server should return STATUS_SUCCESS""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.CreateCloseConfig>(this.Manager, this.v1, this.c1, "v1 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v1.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v1.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the open is successful, the server MUST allocate an open o" +
                    "bject for this open and insert it into Session.OpenTable and GlobalOpenTable. \"");
            this.Manager.Checkpoint("\"[TestInfo] The Create Request doesn\'t contain any invalid fields, the open is cr" +
                    "eated successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
        }
        
        private void CreateCloseTestCaseS782CloseResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_SUCCESS,QueryResponseNotExist)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CloseResponse, state S791");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus)(1)), queryResponseStatus, "queryResponseStatus of CloseResponse, state S791");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestInfo] The Close Request doesn't contain any invalid fields, the open is closed successfully and server should return STATUS_SUCCESS"", ""[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should not query the attribute of the file after the close""");
                throw;
            }
            this.Manager.Checkpoint("\"[TestInfo] The Close Request doesn\'t contain any invalid fields, the open is clo" +
                    "sed successfully and server should return STATUS_SUCCESS\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CLOSE_FLAG_POSTQUERY_ATTRIB is not set, then the server should n" +
                    "ot query the attribute of the file after the close\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void CreateCloseTestCaseS782CloseResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S794");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS782CloseResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S797");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S797");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] The Open was not be created or was closed before.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] The Open was not be created or was closed before.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS782CloseResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S800");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S800");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Persistent is not equal to Open.DurableFileId.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void CreateCloseTestCaseS782CloseResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.CreateClose.QueryResponseStatus queryResponseStatus) {
            this.Manager.Comment("checking step \'event CloseResponse(STATUS_FILE_CLOSED,queryResponseStatus)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_CLOSED, status, "status of CloseResponse, state S803");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.queryResponseStatus, (System.Int32)queryResponseStatus, "queryResponseStatus of CloseResponse, state S803");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] InvalidIdentifier"", ""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED."", ""[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot locate the open using FileId.Volatile as the lookup key.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.queryResponseStatus, "v3 == queryResponseStatus");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.10: Next, the server MUST locate the open being closed by performing a lookup in the Session.OpenTable, using FileId.Volatile of the request as the lookup key. If no open is found, or if Open.DurableFileId is not equal to FileId.Persistent, the server MUST fail the request with STATUS_FILE_CLOSED.""");
            this.Manager.Checkpoint("\"[TestInfo] FileId.Volatile of the Close Request is invalid, so the server cannot" +
                    " locate the open using FileId.Volatile as the lookup key.\"");
            this.Manager.Comment("Unbinding variable \'queryResponseStatus\'");
            this.queryResponseStatus.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
    }
}
