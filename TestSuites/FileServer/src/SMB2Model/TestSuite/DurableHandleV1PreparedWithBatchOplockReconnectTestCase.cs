// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DurableHandleV1PreparedWithBatchOplockReconnectTestCase : PtfTestClassBase {
        
        public DurableHandleV1PreparedWithBatchOplockReconnectTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c);
        
        public delegate void OpenResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c);
        
        public delegate void PreConstraintDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig).MakeByRefType());
        
        static System.Reflection.EventInfo OpenResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "OpenResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter IHandleAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> c1;
        
        private IVariable<int> durableHandleResponseContext;
        
        private IVariable<int> leaseResponseContext;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> v3;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IHandleAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter))));
            this.Manager.Subscribe(OpenResponseInfo, this.IHandleAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("c1");
            this.durableHandleResponseContext = this.Manager.CreateVariable<int>("durableHandleResponseContext");
            this.leaseResponseContext = this.Manager.CreateVariable<int>("leaseResponseContext");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("v3");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0ReadConfigChecker3)));
            if ((temp10 == 0)) {
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S17\'");
                int temp3 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)));
                if ((temp3 == 0)) {
                    this.Manager.Comment("reaching state \'S18\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S19\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS20();
                    goto label2;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S17\'.");
            label2:
;
                goto label9;
            }
            if ((temp10 == 1)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S4\'");
                int temp6 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)));
                if ((temp6 == 0)) {
                    this.Manager.Comment("reaching state \'S5\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                            "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S6\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS7();
                    goto label5;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S4\'.");
            label5:
;
                goto label9;
            }
            if ((temp10 == 2)) {
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S30\'");
                int temp9 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)));
                if ((temp9 == 0)) {
                    this.Manager.Comment("reaching state \'S31\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S32\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S33\'");
                    int temp8 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)));
                    if ((temp8 == 0)) {
                        this.Manager.Comment("reaching state \'S34\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S35\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S36\'");
                        int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker8)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker9)));
                        if ((temp7 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS37();
                            goto label6;
                        }
                        if ((temp7 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS38();
                            goto label6;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker8)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker9)));
                    label6:
;
                        goto label7;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S33\'.");
                label7:
;
                    goto label8;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S30\'.");
            label8:
;
                goto label9;
            }
            if ((temp10 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS20() {
            this.Manager.Comment("reaching state \'S20\'");
            int temp2 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)));
            if ((temp2 == 0)) {
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S23\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker3)));
                if ((temp1 == 0)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS24();
                    goto label0;
                }
                if ((temp1 == 1)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS25();
                    goto label0;
                }
                if ((temp1 == 2)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS26();
                    goto label0;
                }
                if ((temp1 == 3)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS27();
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker3)));
            label0:
;
                goto label1;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S20\'.");
        label1:
;
        }
        
        private void PreConstraintChecker1() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS24() {
            this.Manager.Comment("reaching state \'S24\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS26() {
            this.Manager.Comment("reaching state \'S26\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS27() {
            this.Manager.Comment("reaching state \'S27\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker2() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS7() {
            this.Manager.Comment("reaching state \'S7\'");
            int temp5 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
            if ((temp5 == 0)) {
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S10\'");
                int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker4)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker5)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker6)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker7)));
                if ((temp4 == 0)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS11();
                    goto label3;
                }
                if ((temp4 == 1)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS12();
                    goto label3;
                }
                if ((temp4 == 2)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS13();
                    goto label3;
                }
                if ((temp4 == 3)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS14();
                    goto label3;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker4)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker5)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker6)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker7)));
            label3:
;
                goto label4;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S7\'.");
        label4:
;
        }
        
        private void PreConstraintChecker3() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS11() {
            this.Manager.Comment("reaching state \'S11\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS12() {
            this.Manager.Comment("reaching state \'S12\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS14() {
            this.Manager.Comment("reaching state \'S14\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker5() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS37() {
            this.Manager.Comment("reaching state \'S37\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S36");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS38() {
            this.Manager.Comment("reaching state \'S38\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39() {
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S39\'.");
        }
        #endregion
        
        #region Test Starting in S109
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109");
            this.Manager.Comment("reaching state \'S109\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp11;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp11);
            this.Manager.AddReturn(ReadConfigInfo, null, temp11);
            this.Manager.Comment("reaching state \'S110\'");
            int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109ReadConfigChecker3)));
            if ((temp15 == 0)) {
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S113\'");
                int temp12 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)));
                if ((temp12 == 0)) {
                    this.Manager.Comment("reaching state \'S114\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S115\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S116\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS117();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109OpenResponseChecker)));
                    }
                    goto label10;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S113\'.");
            label10:
;
                goto label13;
            }
            if ((temp15 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label13;
            }
            if ((temp15 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label13;
            }
            if ((temp15 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS62();
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker6() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS117() {
            this.Manager.Comment("reaching state \'S117\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118() {
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                    "leV1,BatchOplock)\'");
            this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                    "UST set Open.IsDurable to TRUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S120\'");
            int temp13 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S123\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109OpenResponseChecker1))) != -1)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS124();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109OpenResponseChecker1)));
                }
                goto label11;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S120\'.");
        label11:
;
        }
        
        private void PreConstraintChecker7() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS124() {
            this.Manager.Comment("reaching state \'S124\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS62() {
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                    "dleV1,BatchOplock)\'");
            this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                    "UST set Open.IsDurable to TRUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S64\'");
            int temp14 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)));
            if ((temp14 == 0)) {
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                        ")\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S67\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109OpenResponseChecker2))) != -1)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS68();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109OpenResponseChecker2)));
                }
                goto label12;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S64\'.");
        label12:
;
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS109OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S67");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S67");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S67");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS68() {
            this.Manager.Comment("reaching state \'S68\'");
        }
        #endregion
        
        #region Test Starting in S125
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125");
            this.Manager.Comment("reaching state \'S125\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp16;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp16);
            this.Manager.AddReturn(ReadConfigInfo, null, temp16);
            this.Manager.Comment("reaching state \'S126\'");
            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125ReadConfigChecker3)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S129\'");
                int temp17 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)));
                if ((temp17 == 0)) {
                    this.Manager.Comment("reaching state \'S130\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S131\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S132\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS117();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125OpenResponseChecker)));
                    }
                    goto label14;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S129\'.");
            label14:
;
                goto label16;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S133\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S135\'");
                int temp18 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)));
                if ((temp18 == 0)) {
                    this.Manager.Comment("reaching state \'S136\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S137\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S138\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS124();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125OpenResponseChecker1)));
                    }
                    goto label15;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S135\'.");
            label15:
;
                goto label16;
            }
            if ((temp19 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label16;
            }
            if ((temp19 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS62();
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S126");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S132");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S132");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S132");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S126");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S126");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS125ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S126");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S139
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139");
            this.Manager.Comment("reaching state \'S139\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp20;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp20);
            this.Manager.AddReturn(ReadConfigInfo, null, temp20);
            this.Manager.Comment("reaching state \'S140\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139ReadConfigChecker3)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S143\'");
                int temp21 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
                if ((temp21 == 0)) {
                    this.Manager.Comment("reaching state \'S144\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                            ")\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S145\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S146\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS117();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139OpenResponseChecker)));
                    }
                    goto label17;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S143\'.");
            label17:
;
                goto label19;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S147\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S148\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S149\'");
                int temp22 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S150\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                            ")\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S151\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S152\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS124();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139OpenResponseChecker1)));
                    }
                    goto label18;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S149\'.");
            label18:
;
                goto label19;
            }
            if ((temp23 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label19;
            }
            if ((temp23 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS62();
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S140");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker11() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S146");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S146");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S146");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S140");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker12() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S152");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S152");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S152");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S140");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS139ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S140");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S153
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153");
            this.Manager.Comment("reaching state \'S153\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp24;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp24);
            this.Manager.AddReturn(ReadConfigInfo, null, temp24);
            this.Manager.Comment("reaching state \'S154\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153ReadConfigChecker3)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S157\'");
                int temp25 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)));
                if ((temp25 == 0)) {
                    this.Manager.Comment("reaching state \'S158\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                            "d)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S159\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S160\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS117();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153OpenResponseChecker)));
                    }
                    goto label20;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S157\'.");
            label20:
;
                goto label22;
            }
            if ((temp27 == 1)) {
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S163\'");
                int temp26 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)));
                if ((temp26 == 0)) {
                    this.Manager.Comment("reaching state \'S164\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                            "d)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S165\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S166\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS124();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153OpenResponseChecker1)));
                    }
                    goto label21;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S163\'.");
            label21:
;
                goto label22;
            }
            if ((temp27 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label22;
            }
            if ((temp27 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS62();
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S154");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker13() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S160");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S160");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S154");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S166");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S166");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S166");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S166");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S154");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS153ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S154");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S167
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167");
            this.Manager.Comment("reaching state \'S167\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp28;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp28);
            this.Manager.AddReturn(ReadConfigInfo, null, temp28);
            this.Manager.Comment("reaching state \'S168\'");
            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167ReadConfigChecker3)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S171\'");
                int temp31 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
                if ((temp31 == 0)) {
                    this.Manager.Comment("reaching state \'S172\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                            "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S173\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS174();
                    goto label25;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S171\'.");
            label25:
;
                goto label29;
            }
            if ((temp35 == 1)) {
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S180\'");
                int temp34 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)));
                if ((temp34 == 0)) {
                    this.Manager.Comment("reaching state \'S181\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                            "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S182\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS105();
                    goto label28;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S180\'.");
            label28:
;
                goto label29;
            }
            if ((temp35 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label29;
            }
            if ((temp35 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS62();
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S168");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS174() {
            this.Manager.Comment("reaching state \'S174\'");
            int temp30 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)));
            if ((temp30 == 0)) {
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                        "d)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S176\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S177\'");
                int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker1)));
                if ((temp29 == 0)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS51();
                    goto label23;
                }
                if ((temp29 == 1)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS52();
                    goto label23;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker1)));
            label23:
;
                goto label24;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S174\'.");
        label24:
;
        }
        
        private void PreConstraintChecker16() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S177");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S177");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S177");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS51() {
            this.Manager.Comment("reaching state \'S51\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S177");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S177");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S177");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS52() {
            this.Manager.Comment("reaching state \'S52\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S168");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker17() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS105() {
            this.Manager.Comment("reaching state \'S105\'");
            int temp33 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)));
            if ((temp33 == 0)) {
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                        "d)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S108\'");
                int temp32 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker3)));
                if ((temp32 == 0)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS37();
                    goto label26;
                }
                if ((temp32 == 1)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS38();
                    goto label26;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker3)));
            label26:
;
                goto label27;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S105\'.");
        label27:
;
        }
        
        private void PreConstraintChecker18() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S108");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S108");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S108");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S108");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S108");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S108");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S108");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S108");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S168");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS167ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S168");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S183
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183");
            this.Manager.Comment("reaching state \'S183\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp36;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp36);
            this.Manager.AddReturn(ReadConfigInfo, null, temp36);
            this.Manager.Comment("reaching state \'S184\'");
            int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183ReadConfigChecker3)));
            if ((temp43 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label36;
            }
            if ((temp43 == 1)) {
                this.Manager.Comment("reaching state \'S185\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S187\'");
                int temp39 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)));
                if ((temp39 == 0)) {
                    this.Manager.Comment("reaching state \'S188\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S189\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S190\'");
                    int temp38 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker20)));
                    if ((temp38 == 0)) {
                        this.Manager.Comment("reaching state \'S191\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S192\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S193\'");
                        int temp37 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker1)));
                        if ((temp37 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS194();
                            goto label30;
                        }
                        if ((temp37 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS195();
                            goto label30;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker1)));
                    label30:
;
                        goto label31;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S190\'.");
                label31:
;
                    goto label32;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S187\'.");
            label32:
;
                goto label36;
            }
            if ((temp43 == 2)) {
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S198\'");
                int temp42 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker21)));
                if ((temp42 == 0)) {
                    this.Manager.Comment("reaching state \'S199\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S200\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S201\'");
                    int temp41 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker22)));
                    if ((temp41 == 0)) {
                        this.Manager.Comment("reaching state \'S202\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S203\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S204\'");
                        int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker3)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker4)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker5)));
                        if ((temp40 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS11();
                            goto label33;
                        }
                        if ((temp40 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS12();
                            goto label33;
                        }
                        if ((temp40 == 2)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS13();
                            goto label33;
                        }
                        if ((temp40 == 3)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS14();
                            goto label33;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker3)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker4)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker5)));
                    label33:
;
                        goto label34;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S201\'.");
                label34:
;
                    goto label35;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S198\'.");
            label35:
;
                goto label36;
            }
            if ((temp43 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label36;
            }
            throw new InvalidOperationException("never reached");
        label36:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S184");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S184");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker19() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker20() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S193");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S193");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S193");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S193");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS194() {
            this.Manager.Comment("reaching state \'S194\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S193");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S193");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S193");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S193");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS195() {
            this.Manager.Comment("reaching state \'S195\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S184");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker21() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker22() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS183ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S184");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S205
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205");
            this.Manager.Comment("reaching state \'S205\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp44;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp44);
            this.Manager.AddReturn(ReadConfigInfo, null, temp44);
            this.Manager.Comment("reaching state \'S206\'");
            int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205ReadConfigChecker3)));
            if ((temp51 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label43;
            }
            if ((temp51 == 1)) {
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S209\'");
                int temp47 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker23)));
                if ((temp47 == 0)) {
                    this.Manager.Comment("reaching state \'S210\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S211\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S212\'");
                    int temp46 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker24)));
                    if ((temp46 == 0)) {
                        this.Manager.Comment("reaching state \'S213\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S214\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S215\'");
                        int temp45 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker1)));
                        if ((temp45 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS194();
                            goto label37;
                        }
                        if ((temp45 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS195();
                            goto label37;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker1)));
                    label37:
;
                        goto label38;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S212\'.");
                label38:
;
                    goto label39;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S209\'.");
            label39:
;
                goto label43;
            }
            if ((temp51 == 2)) {
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S218\'");
                int temp50 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker25)));
                if ((temp50 == 0)) {
                    this.Manager.Comment("reaching state \'S219\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S220\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S221\'");
                    int temp49 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker26)));
                    if ((temp49 == 0)) {
                        this.Manager.Comment("reaching state \'S222\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                                "d)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S223\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S224\'");
                        int temp48 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker3)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker4)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker5)));
                        if ((temp48 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS11();
                            goto label40;
                        }
                        if ((temp48 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS12();
                            goto label40;
                        }
                        if ((temp48 == 2)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS13();
                            goto label40;
                        }
                        if ((temp48 == 3)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS14();
                            goto label40;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker3)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker4)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker5)));
                    label40:
;
                        goto label41;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S221\'.");
                label41:
;
                    goto label42;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S218\'.");
            label42:
;
                goto label43;
            }
            if ((temp51 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S206");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S206");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker23() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker24() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S215");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S215");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S215");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S215");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S215");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S215");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S206");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker25() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker26() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S224");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S224");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S224");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S224");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S224");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS205ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S206");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S225
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225");
            this.Manager.Comment("reaching state \'S225\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp52;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp52);
            this.Manager.AddReturn(ReadConfigInfo, null, temp52);
            this.Manager.Comment("reaching state \'S226\'");
            int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225ReadConfigChecker3)));
            if ((temp59 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label50;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S229\'");
                int temp55 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker27)));
                if ((temp55 == 0)) {
                    this.Manager.Comment("reaching state \'S230\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S231\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S232\'");
                    int temp54 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker28)));
                    if ((temp54 == 0)) {
                        this.Manager.Comment("reaching state \'S233\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S234\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S235\'");
                        int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker1)));
                        if ((temp53 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS194();
                            goto label44;
                        }
                        if ((temp53 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS195();
                            goto label44;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker1)));
                    label44:
;
                        goto label45;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S232\'.");
                label45:
;
                    goto label46;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S229\'.");
            label46:
;
                goto label50;
            }
            if ((temp59 == 2)) {
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S238\'");
                int temp58 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker29)));
                if ((temp58 == 0)) {
                    this.Manager.Comment("reaching state \'S239\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S240\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S241\'");
                    int temp57 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker30)));
                    if ((temp57 == 0)) {
                        this.Manager.Comment("reaching state \'S242\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S243\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S244\'");
                        int temp56 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker3)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker4)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker5)));
                        if ((temp56 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS11();
                            goto label47;
                        }
                        if ((temp56 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS12();
                            goto label47;
                        }
                        if ((temp56 == 2)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS13();
                            goto label47;
                        }
                        if ((temp56 == 3)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS14();
                            goto label47;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker3)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker4)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker5)));
                    label47:
;
                        goto label48;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S241\'.");
                label48:
;
                    goto label49;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S238\'.");
            label49:
;
                goto label50;
            }
            if ((temp59 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker27() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker28() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S235");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S235");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S235");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S235");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S235");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S235");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S235");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S235");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker29() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker30() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S244");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS225ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S226");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S245
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245");
            this.Manager.Comment("reaching state \'S245\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp60;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp60);
            this.Manager.AddReturn(ReadConfigInfo, null, temp60);
            this.Manager.Comment("reaching state \'S246\'");
            int temp63 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245ReadConfigChecker3)));
            if ((temp63 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label53;
            }
            if ((temp63 == 1)) {
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S249\'");
                int temp61 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker31)));
                if ((temp61 == 0)) {
                    this.Manager.Comment("reaching state \'S250\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S251\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S252\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS253();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245OpenResponseChecker)));
                    }
                    goto label51;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S249\'.");
            label51:
;
                goto label53;
            }
            if ((temp63 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label53;
            }
            if ((temp63 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S246");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S246");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker31() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS253() {
            this.Manager.Comment("reaching state \'S253\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S246");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254() {
            this.Manager.Comment("reaching state \'S254\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                    "leV1,BatchOplock)\'");
            this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                    "UST set Open.IsDurable to TRUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
            this.Manager.Comment("reaching state \'S255\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S256\'");
            int temp62 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker32)));
            if ((temp62 == 0)) {
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                        ")\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S259\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245OpenResponseChecker1))) != -1)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS260();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245OpenResponseChecker1)));
                }
                goto label52;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S256\'.");
        label52:
;
        }
        
        private void PreConstraintChecker32() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S259");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S259");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S259");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S259");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS260() {
            this.Manager.Comment("reaching state \'S260\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS245ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S246");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S261
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261");
            this.Manager.Comment("reaching state \'S261\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp64;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp64);
            this.Manager.AddReturn(ReadConfigInfo, null, temp64);
            this.Manager.Comment("reaching state \'S262\'");
            int temp67 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261ReadConfigChecker3)));
            if ((temp67 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label56;
            }
            if ((temp67 == 1)) {
                this.Manager.Comment("reaching state \'S263\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S264\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S265\'");
                int temp65 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker33)));
                if ((temp65 == 0)) {
                    this.Manager.Comment("reaching state \'S266\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S267\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S268\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS253();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261OpenResponseChecker)));
                    }
                    goto label54;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S265\'.");
            label54:
;
                goto label56;
            }
            if ((temp67 == 2)) {
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S270\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S271\'");
                int temp66 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker34)));
                if ((temp66 == 0)) {
                    this.Manager.Comment("reaching state \'S272\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                            "d)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S273\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S274\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS260();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261OpenResponseChecker1)));
                    }
                    goto label55;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S271\'.");
            label55:
;
                goto label56;
            }
            if ((temp67 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S262");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S262");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker33() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S268");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S268");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S268");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S268");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S262");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker34() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S274");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S274");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S274");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS261ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S262");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S275
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275");
            this.Manager.Comment("reaching state \'S275\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp68;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp68);
            this.Manager.AddReturn(ReadConfigInfo, null, temp68);
            this.Manager.Comment("reaching state \'S276\'");
            int temp71 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275ReadConfigChecker3)));
            if ((temp71 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label59;
            }
            if ((temp71 == 1)) {
                this.Manager.Comment("reaching state \'S277\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S278\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S279\'");
                int temp69 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker35)));
                if ((temp69 == 0)) {
                    this.Manager.Comment("reaching state \'S280\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                            ")\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S281\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S282\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS253();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275OpenResponseChecker)));
                    }
                    goto label57;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S279\'.");
            label57:
;
                goto label59;
            }
            if ((temp71 == 2)) {
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S284\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S285\'");
                int temp70 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker36)));
                if ((temp70 == 0)) {
                    this.Manager.Comment("reaching state \'S286\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S287\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S288\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS260();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275OpenResponseChecker1)));
                    }
                    goto label58;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S285\'.");
            label58:
;
                goto label59;
            }
            if ((temp71 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S276");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S276");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker35() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S282");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S282");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S282");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S282");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S276");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker36() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S288");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S288");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S288");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS275ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S276");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S289
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289");
            this.Manager.Comment("reaching state \'S289\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp72;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp72);
            this.Manager.AddReturn(ReadConfigInfo, null, temp72);
            this.Manager.Comment("reaching state \'S290\'");
            int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289ReadConfigChecker3)));
            if ((temp75 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label62;
            }
            if ((temp75 == 1)) {
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S293\'");
                int temp73 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker37)));
                if ((temp73 == 0)) {
                    this.Manager.Comment("reaching state \'S294\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                            "d)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S295\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S296\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS253();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289OpenResponseChecker)));
                    }
                    goto label60;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S293\'.");
            label60:
;
                goto label62;
            }
            if ((temp75 == 2)) {
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S298\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S299\'");
                int temp74 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker38)));
                if ((temp74 == 0)) {
                    this.Manager.Comment("reaching state \'S300\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S301\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S302\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289OpenResponseChecker1))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS260();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289OpenResponseChecker1)));
                    }
                    goto label61;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S299\'.");
            label61:
;
                goto label62;
            }
            if ((temp75 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label62;
            }
            throw new InvalidOperationException("never reached");
        label62:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker37() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S296");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S296");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S296");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S296");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker38() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S302");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S302");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S302");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S302");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS289ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S303
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303");
            this.Manager.Comment("reaching state \'S303\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp76;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp76);
            this.Manager.AddReturn(ReadConfigInfo, null, temp76);
            this.Manager.Comment("reaching state \'S304\'");
            int temp81 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303ReadConfigChecker3)));
            if ((temp81 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label67;
            }
            if ((temp81 == 1)) {
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S307\'");
                int temp79 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker39)));
                if ((temp79 == 0)) {
                    this.Manager.Comment("reaching state \'S308\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                            "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S309\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS310();
                    goto label65;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S307\'.");
            label65:
;
                goto label67;
            }
            if ((temp81 == 2)) {
                this.Manager.Comment("reaching state \'S314\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S316\'");
                int temp80 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker41)));
                if ((temp80 == 0)) {
                    this.Manager.Comment("reaching state \'S317\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S318\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS7();
                    goto label66;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S316\'.");
            label66:
;
                goto label67;
            }
            if ((temp81 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label67;
            }
            throw new InvalidOperationException("never reached");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S304");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S304");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker39() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS310() {
            this.Manager.Comment("reaching state \'S310\'");
            int temp78 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker40)));
            if ((temp78 == 0)) {
                this.Manager.Comment("reaching state \'S311\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                        "d)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S312\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S313\'");
                int temp77 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303OpenResponseChecker1)));
                if ((temp77 == 0)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS194();
                    goto label63;
                }
                if ((temp77 == 1)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS195();
                    goto label63;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303OpenResponseChecker1)));
            label63:
;
                goto label64;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S310\'.");
        label64:
;
        }
        
        private void PreConstraintChecker40() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S313");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S313");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S304");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker41() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS303ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S304");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S319
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319");
            this.Manager.Comment("reaching state \'S319\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp82;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp82);
            this.Manager.AddReturn(ReadConfigInfo, null, temp82);
            this.Manager.Comment("reaching state \'S320\'");
            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319ReadConfigChecker3)));
            if ((temp87 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label72;
            }
            if ((temp87 == 1)) {
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S323\'");
                int temp85 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker42)));
                if ((temp85 == 0)) {
                    this.Manager.Comment("reaching state \'S324\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S325\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S326\'");
                    int temp84 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker43)));
                    if ((temp84 == 0)) {
                        this.Manager.Comment("reaching state \'S327\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                                "d)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S328\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S329\'");
                        int temp83 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker3)));
                        if ((temp83 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS330();
                            goto label68;
                        }
                        if ((temp83 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS331();
                            goto label68;
                        }
                        if ((temp83 == 2)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS332();
                            goto label68;
                        }
                        if ((temp83 == 3)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS333();
                            goto label68;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker3)));
                    label68:
;
                        goto label69;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S326\'.");
                label69:
;
                    goto label70;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S323\'.");
            label70:
;
                goto label72;
            }
            if ((temp87 == 2)) {
                this.Manager.Comment("reaching state \'S334\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S335\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S336\'");
                int temp86 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker44)));
                if ((temp86 == 0)) {
                    this.Manager.Comment("reaching state \'S337\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S338\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS174();
                    goto label71;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S336\'.");
            label71:
;
                goto label72;
            }
            if ((temp87 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label72;
            }
            throw new InvalidOperationException("never reached");
        label72:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker42() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker43() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S329");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS330() {
            this.Manager.Comment("reaching state \'S330\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S329");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS331() {
            this.Manager.Comment("reaching state \'S331\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S329");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS332() {
            this.Manager.Comment("reaching state \'S332\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S329");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S329");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS333() {
            this.Manager.Comment("reaching state \'S333\'");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker44() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS319ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S320");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S339
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339");
            this.Manager.Comment("reaching state \'S339\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp88;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp88);
            this.Manager.AddReturn(ReadConfigInfo, null, temp88);
            this.Manager.Comment("reaching state \'S340\'");
            int temp92 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339ReadConfigChecker3)));
            if ((temp92 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label76;
            }
            if ((temp92 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label76;
            }
            if ((temp92 == 2)) {
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S343\'");
                int temp91 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker45)));
                if ((temp91 == 0)) {
                    this.Manager.Comment("reaching state \'S344\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S345\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S346\'");
                    int temp90 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker46)));
                    if ((temp90 == 0)) {
                        this.Manager.Comment("reaching state \'S347\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S348\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S349\'");
                        int temp89 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker3)));
                        if ((temp89 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS330();
                            goto label73;
                        }
                        if ((temp89 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS331();
                            goto label73;
                        }
                        if ((temp89 == 2)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS332();
                            goto label73;
                        }
                        if ((temp89 == 3)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS333();
                            goto label73;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker3)));
                    label73:
;
                        goto label74;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S346\'.");
                label74:
;
                    goto label75;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S343\'.");
            label75:
;
                goto label76;
            }
            if ((temp92 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label76;
            }
            throw new InvalidOperationException("never reached");
        label76:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S340");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S340");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S340");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker45() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker46() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS339ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S340");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S350
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350");
            this.Manager.Comment("reaching state \'S350\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp93;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp93);
            this.Manager.AddReturn(ReadConfigInfo, null, temp93);
            this.Manager.Comment("reaching state \'S351\'");
            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350ReadConfigChecker3)));
            if ((temp97 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label80;
            }
            if ((temp97 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label80;
            }
            if ((temp97 == 2)) {
                this.Manager.Comment("reaching state \'S352\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S353\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S354\'");
                int temp96 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker47)));
                if ((temp96 == 0)) {
                    this.Manager.Comment("reaching state \'S355\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S356\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S357\'");
                    int temp95 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker48)));
                    if ((temp95 == 0)) {
                        this.Manager.Comment("reaching state \'S358\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S359\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S360\'");
                        int temp94 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker3)));
                        if ((temp94 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS330();
                            goto label77;
                        }
                        if ((temp94 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS331();
                            goto label77;
                        }
                        if ((temp94 == 2)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS332();
                            goto label77;
                        }
                        if ((temp94 == 3)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS333();
                            goto label77;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker3)));
                    label77:
;
                        goto label78;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S357\'.");
                label78:
;
                    goto label79;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S354\'.");
            label79:
;
                goto label80;
            }
            if ((temp97 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label80;
            }
            throw new InvalidOperationException("never reached");
        label80:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S351");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S351");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S351");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker47() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker48() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S360");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S360");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S360");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S360");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S360");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS350ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S351");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S361
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS361() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS361");
            this.Manager.Comment("reaching state \'S361\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp98;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp98);
            this.Manager.AddReturn(ReadConfigInfo, null, temp98);
            this.Manager.Comment("reaching state \'S362\'");
            int temp99 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS361ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS361ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS361ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS361ReadConfigChecker3)));
            if ((temp99 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label81;
            }
            if ((temp99 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label81;
            }
            if ((temp99 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label81;
            }
            if ((temp99 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS62();
                goto label81;
            }
            throw new InvalidOperationException("never reached");
        label81:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS361ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S362");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS361ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S362");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS361ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S362");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS361ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S362");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S363
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363");
            this.Manager.Comment("reaching state \'S363\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp100;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp100);
            this.Manager.AddReturn(ReadConfigInfo, null, temp100);
            this.Manager.Comment("reaching state \'S364\'");
            int temp102 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363ReadConfigChecker3)));
            if ((temp102 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label83;
            }
            if ((temp102 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label83;
            }
            if ((temp102 == 2)) {
                this.Manager.Comment("reaching state \'S365\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S366\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S367\'");
                int temp101 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker49)));
                if ((temp101 == 0)) {
                    this.Manager.Comment("reaching state \'S368\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                            "d)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S369\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S370\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS68();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363OpenResponseChecker)));
                    }
                    goto label82;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S367\'.");
            label82:
;
                goto label83;
            }
            if ((temp102 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label83;
            }
            throw new InvalidOperationException("never reached");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S364");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S364");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S364");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker49() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S370");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S370");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S370");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS363ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S364");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S371
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371");
            this.Manager.Comment("reaching state \'S371\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp103;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp103);
            this.Manager.AddReturn(ReadConfigInfo, null, temp103);
            this.Manager.Comment("reaching state \'S372\'");
            int temp105 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371ReadConfigChecker3)));
            if ((temp105 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label85;
            }
            if ((temp105 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label85;
            }
            if ((temp105 == 2)) {
                this.Manager.Comment("reaching state \'S373\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S374\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S375\'");
                int temp104 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker50)));
                if ((temp104 == 0)) {
                    this.Manager.Comment("reaching state \'S376\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S377\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S378\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS68();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371OpenResponseChecker)));
                    }
                    goto label84;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S375\'.");
            label84:
;
                goto label85;
            }
            if ((temp105 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label85;
            }
            throw new InvalidOperationException("never reached");
        label85:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S372");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S372");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S372");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker50() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S378");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S378");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S378");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S378");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS371ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S372");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S379
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379");
            this.Manager.Comment("reaching state \'S379\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp106;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp106);
            this.Manager.AddReturn(ReadConfigInfo, null, temp106);
            this.Manager.Comment("reaching state \'S380\'");
            int temp108 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379ReadConfigChecker3)));
            if ((temp108 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label87;
            }
            if ((temp108 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label87;
            }
            if ((temp108 == 2)) {
                this.Manager.Comment("reaching state \'S381\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S383\'");
                int temp107 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker51)));
                if ((temp107 == 0)) {
                    this.Manager.Comment("reaching state \'S384\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S385\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S386\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS68();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379OpenResponseChecker)));
                    }
                    goto label86;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S383\'.");
            label86:
;
                goto label87;
            }
            if ((temp108 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker51() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S386");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S386");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S386");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S386");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS379ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S387
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387");
            this.Manager.Comment("reaching state \'S387\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp109;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp109);
            this.Manager.AddReturn(ReadConfigInfo, null, temp109);
            this.Manager.Comment("reaching state \'S388\'");
            int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387ReadConfigChecker3)));
            if ((temp113 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label91;
            }
            if ((temp113 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label91;
            }
            if ((temp113 == 2)) {
                this.Manager.Comment("reaching state \'S389\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S390\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S391\'");
                int temp112 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker52)));
                if ((temp112 == 0)) {
                    this.Manager.Comment("reaching state \'S392\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                            "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S393\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS394();
                    goto label90;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S391\'.");
            label90:
;
                goto label91;
            }
            if ((temp113 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label91;
            }
            throw new InvalidOperationException("never reached");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S388");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S388");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S388");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker52() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS394() {
            this.Manager.Comment("reaching state \'S394\'");
            int temp111 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker53)));
            if ((temp111 == 0)) {
                this.Manager.Comment("reaching state \'S395\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                        "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S396\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S397\'");
                int temp110 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker3)));
                if ((temp110 == 0)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS330();
                    goto label88;
                }
                if ((temp110 == 1)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS331();
                    goto label88;
                }
                if ((temp110 == 2)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS332();
                    goto label88;
                }
                if ((temp110 == 3)) {
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS333();
                    goto label88;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker3)));
            label88:
;
                goto label89;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S394\'.");
        label89:
;
        }
        
        private void PreConstraintChecker53() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S397");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS387ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S388");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        #endregion
        
        #region Test Starting in S398
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398");
            this.Manager.Comment("reaching state \'S398\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp114;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp114);
            this.Manager.AddReturn(ReadConfigInfo, null, temp114);
            this.Manager.Comment("reaching state \'S399\'");
            int temp118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398ReadConfigChecker3)));
            if ((temp118 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label95;
            }
            if ((temp118 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label95;
            }
            if ((temp118 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label95;
            }
            if ((temp118 == 3)) {
                this.Manager.Comment("reaching state \'S400\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S402\'");
                int temp117 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker54)));
                if ((temp117 == 0)) {
                    this.Manager.Comment("reaching state \'S403\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S404\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S405\'");
                    int temp116 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker55)));
                    if ((temp116 == 0)) {
                        this.Manager.Comment("reaching state \'S406\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S407\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S408\'");
                        int temp115 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker3)));
                        if ((temp115 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS24();
                            goto label92;
                        }
                        if ((temp115 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS25();
                            goto label92;
                        }
                        if ((temp115 == 2)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS26();
                            goto label92;
                        }
                        if ((temp115 == 3)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS27();
                            goto label92;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker3)));
                    label92:
;
                        goto label93;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S405\'.");
                label93:
;
                    goto label94;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S402\'.");
            label94:
;
                goto label95;
            }
            throw new InvalidOperationException("never reached");
        label95:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S399");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S399");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S399");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S399");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker54() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker55() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S408");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S408");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S408");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS398OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S408");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S408");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40");
            this.Manager.Comment("reaching state \'S40\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp119;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp119);
            this.Manager.AddReturn(ReadConfigInfo, null, temp119);
            this.Manager.Comment("reaching state \'S41\'");
            int temp126 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40ReadConfigChecker3)));
            if ((temp126 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label102;
            }
            if ((temp126 == 1)) {
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S44\'");
                int temp122 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker56)));
                if ((temp122 == 0)) {
                    this.Manager.Comment("reaching state \'S45\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S46\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S47\'");
                    int temp121 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker57)));
                    if ((temp121 == 0)) {
                        this.Manager.Comment("reaching state \'S48\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S49\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S50\'");
                        int temp120 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker1)));
                        if ((temp120 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS51();
                            goto label96;
                        }
                        if ((temp120 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS52();
                            goto label96;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker1)));
                    label96:
;
                        goto label97;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S47\'.");
                label97:
;
                    goto label98;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S44\'.");
            label98:
;
                goto label102;
            }
            if ((temp126 == 2)) {
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S55\'");
                int temp125 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker58)));
                if ((temp125 == 0)) {
                    this.Manager.Comment("reaching state \'S56\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S57\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S58\'");
                    int temp124 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker59)));
                    if ((temp124 == 0)) {
                        this.Manager.Comment("reaching state \'S59\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S60\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S61\'");
                        int temp123 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker3)));
                        if ((temp123 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS37();
                            goto label99;
                        }
                        if ((temp123 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS38();
                            goto label99;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker3)));
                    label99:
;
                        goto label100;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S58\'.");
                label100:
;
                    goto label101;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S55\'.");
            label101:
;
                goto label102;
            }
            if ((temp126 == 3)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS62();
                goto label102;
            }
            throw new InvalidOperationException("never reached");
        label102:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S41");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S41");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker56() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker57() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S41");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker58() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker59() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S61");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S61");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S61");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S61");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S61");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S61");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS40ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S41");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S409
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409");
            this.Manager.Comment("reaching state \'S409\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp127;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp127);
            this.Manager.AddReturn(ReadConfigInfo, null, temp127);
            this.Manager.Comment("reaching state \'S410\'");
            int temp131 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409ReadConfigChecker3)));
            if ((temp131 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label106;
            }
            if ((temp131 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label106;
            }
            if ((temp131 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label106;
            }
            if ((temp131 == 3)) {
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S412\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S413\'");
                int temp130 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker60)));
                if ((temp130 == 0)) {
                    this.Manager.Comment("reaching state \'S414\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S415\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S416\'");
                    int temp129 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker61)));
                    if ((temp129 == 0)) {
                        this.Manager.Comment("reaching state \'S417\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                                "d)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S418\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S419\'");
                        int temp128 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker3)));
                        if ((temp128 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS24();
                            goto label103;
                        }
                        if ((temp128 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS25();
                            goto label103;
                        }
                        if ((temp128 == 2)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS26();
                            goto label103;
                        }
                        if ((temp128 == 3)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS27();
                            goto label103;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker3)));
                    label103:
;
                        goto label104;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S416\'.");
                label104:
;
                    goto label105;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S413\'.");
            label105:
;
                goto label106;
            }
            throw new InvalidOperationException("never reached");
        label106:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S410");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S410");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S410");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S410");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker60() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker61() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S419");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S419");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S419");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS409OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S419");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S419");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S420
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420");
            this.Manager.Comment("reaching state \'S420\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp132;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp132);
            this.Manager.AddReturn(ReadConfigInfo, null, temp132);
            this.Manager.Comment("reaching state \'S421\'");
            int temp136 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420ReadConfigChecker3)));
            if ((temp136 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label110;
            }
            if ((temp136 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label110;
            }
            if ((temp136 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label110;
            }
            if ((temp136 == 3)) {
                this.Manager.Comment("reaching state \'S422\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S423\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S424\'");
                int temp135 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker62)));
                if ((temp135 == 0)) {
                    this.Manager.Comment("reaching state \'S425\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S426\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S427\'");
                    int temp134 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker63)));
                    if ((temp134 == 0)) {
                        this.Manager.Comment("reaching state \'S428\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S429\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S430\'");
                        int temp133 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker3)));
                        if ((temp133 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS24();
                            goto label107;
                        }
                        if ((temp133 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS25();
                            goto label107;
                        }
                        if ((temp133 == 2)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS26();
                            goto label107;
                        }
                        if ((temp133 == 3)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS27();
                            goto label107;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker1)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker3)));
                    label107:
;
                        goto label108;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S427\'.");
                label108:
;
                    goto label109;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S424\'.");
            label109:
;
                goto label110;
            }
            throw new InvalidOperationException("never reached");
        label110:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S421");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S421");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S421");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S421");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker62() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker63() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S430");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S430");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S430");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS420OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S430");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S430");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S431
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431");
            this.Manager.Comment("reaching state \'S431\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp137;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp137);
            this.Manager.AddReturn(ReadConfigInfo, null, temp137);
            this.Manager.Comment("reaching state \'S432\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431ReadConfigChecker3)));
            if ((temp139 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label112;
            }
            if ((temp139 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label112;
            }
            if ((temp139 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label112;
            }
            if ((temp139 == 3)) {
                this.Manager.Comment("reaching state \'S433\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S434\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S435\'");
                int temp138 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker64)));
                if ((temp138 == 0)) {
                    this.Manager.Comment("reaching state \'S436\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                            ")\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S437\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S438\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS439();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431OpenResponseChecker)));
                    }
                    goto label111;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S435\'.");
            label111:
;
                goto label112;
            }
            throw new InvalidOperationException("never reached");
        label112:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S432");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S432");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S432");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S432");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker64() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS431OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S438");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S438");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S438");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S438");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS439() {
            this.Manager.Comment("reaching state \'S439\'");
        }
        #endregion
        
        #region Test Starting in S440
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440");
            this.Manager.Comment("reaching state \'S440\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp140;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp140);
            this.Manager.AddReturn(ReadConfigInfo, null, temp140);
            this.Manager.Comment("reaching state \'S441\'");
            int temp142 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440ReadConfigChecker3)));
            if ((temp142 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label114;
            }
            if ((temp142 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label114;
            }
            if ((temp142 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label114;
            }
            if ((temp142 == 3)) {
                this.Manager.Comment("reaching state \'S442\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S443\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S444\'");
                int temp141 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker65)));
                if ((temp141 == 0)) {
                    this.Manager.Comment("reaching state \'S445\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,DifferentClient,SameCreateGui" +
                            "d)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S446\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S447\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS439();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440OpenResponseChecker)));
                    }
                    goto label113;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S444\'.");
            label113:
;
                goto label114;
            }
            throw new InvalidOperationException("never reached");
        label114:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S441");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S441");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S441");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S441");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker65() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS440OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S447");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S447");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S447");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S447");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S448
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448");
            this.Manager.Comment("reaching state \'S448\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp143;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp143);
            this.Manager.AddReturn(ReadConfigInfo, null, temp143);
            this.Manager.Comment("reaching state \'S449\'");
            int temp145 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448ReadConfigChecker3)));
            if ((temp145 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label116;
            }
            if ((temp145 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label116;
            }
            if ((temp145 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label116;
            }
            if ((temp145 == 3)) {
                this.Manager.Comment("reaching state \'S450\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S451\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S452\'");
                int temp144 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker66)));
                if ((temp144 == 0)) {
                    this.Manager.Comment("reaching state \'S453\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                            "eGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S454\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S455\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS439();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448OpenResponseChecker)));
                    }
                    goto label115;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S452\'.");
            label115:
;
                goto label116;
            }
            throw new InvalidOperationException("never reached");
        label116:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S449");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S449");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S449");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S449");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker66() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS448OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S455");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S455");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S455");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S455");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S456
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456");
            this.Manager.Comment("reaching state \'S456\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp146;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp146);
            this.Manager.AddReturn(ReadConfigInfo, null, temp146);
            this.Manager.Comment("reaching state \'S457\'");
            int temp148 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456ReadConfigChecker3)));
            if ((temp148 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label118;
            }
            if ((temp148 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label118;
            }
            if ((temp148 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label118;
            }
            if ((temp148 == 3)) {
                this.Manager.Comment("reaching state \'S458\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S459\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S460\'");
                int temp147 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker67)));
                if ((temp147 == 0)) {
                    this.Manager.Comment("reaching state \'S461\'");
                    this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                            "2ReconnectContextNotExist,BatchOplock,SameLeaseKey,SameClient,SameCreateGuid)\'");
                    this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                    this.Manager.Comment("reaching state \'S462\'");
                    this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                    this.Manager.Comment("reaching state \'S463\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456OpenResponseChecker))) != -1)) {
                        DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS439();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456OpenResponseChecker)));
                    }
                    goto label117;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S460\'.");
            label117:
;
                goto label118;
            }
            throw new InvalidOperationException("never reached");
        label118:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S457");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S457");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S457");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S457");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker67() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS456OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S463");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S463");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S463");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S463");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.Session is not NULL."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.Session is not NULL, the server MUST fail the request with STA" +
                    "TUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.Session is not NULL.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S464
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS464() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS464");
            this.Manager.Comment("reaching state \'S464\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp149;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp149);
            this.Manager.AddReturn(ReadConfigInfo, null, temp149);
            this.Manager.Comment("reaching state \'S465\'");
            int temp151 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS464ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS464ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS464ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS464ReadConfigChecker3)));
            if ((temp151 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label120;
            }
            if ((temp151 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label120;
            }
            if ((temp151 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label120;
            }
            if ((temp151 == 3)) {
                this.Manager.Comment("reaching state \'S466\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S467\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S468\'");
                int temp150 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker68)));
                if ((temp150 == 0)) {
                    this.Manager.Comment("reaching state \'S469\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tOpen.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH and Open.OplockS" +
                            "tate is equal to Held, and Open.IsDurable is TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The above condition is met.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S470\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS20();
                    goto label119;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S468\'.");
            label119:
;
                goto label120;
            }
            throw new InvalidOperationException("never reached");
        label120:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS464ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S465");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS464ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S465");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS464ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S465");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS464ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S465");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker68() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        #endregion
        
        #region Test Starting in S471
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS471() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS471");
            this.Manager.Comment("reaching state \'S471\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp152;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp152);
            this.Manager.AddReturn(ReadConfigInfo, null, temp152);
            this.Manager.Comment("reaching state \'S472\'");
            int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS471ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS471ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS471ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS471ReadConfigChecker3)));
            if ((temp154 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label122;
            }
            if ((temp154 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label122;
            }
            if ((temp154 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label122;
            }
            if ((temp154 == 3)) {
                this.Manager.Comment("reaching state \'S473\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S474\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S475\'");
                int temp153 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker69)));
                if ((temp153 == 0)) {
                    this.Manager.Comment("reaching state \'S476\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S477\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS310();
                    goto label121;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S475\'.");
            label121:
;
                goto label122;
            }
            throw new InvalidOperationException("never reached");
        label122:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS471ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S472");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS471ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S472");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS471ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S472");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS471ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S472");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker69() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        #endregion
        
        #region Test Starting in S478
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS478() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS478");
            this.Manager.Comment("reaching state \'S478\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp155;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp155);
            this.Manager.AddReturn(ReadConfigInfo, null, temp155);
            this.Manager.Comment("reaching state \'S479\'");
            int temp157 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS478ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS478ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS478ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS478ReadConfigChecker3)));
            if ((temp157 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS118();
                goto label124;
            }
            if ((temp157 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS254();
                goto label124;
            }
            if ((temp157 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label124;
            }
            if ((temp157 == 3)) {
                this.Manager.Comment("reaching state \'S480\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,NonCAShare,DurableHan" +
                        "dleV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S481\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S482\'");
                int temp156 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker70)));
                if ((temp156 == 0)) {
                    this.Manager.Comment("reaching state \'S483\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S484\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS394();
                    goto label123;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S482\'.");
            label123:
;
                goto label124;
            }
            throw new InvalidOperationException("never reached");
        label124:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS478ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S479");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS478ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S479");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS478ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S479");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS478ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S479");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker70() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        #endregion
        
        #region Test Starting in S69
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69");
            this.Manager.Comment("reaching state \'S69\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp158;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp158);
            this.Manager.AddReturn(ReadConfigInfo, null, temp158);
            this.Manager.Comment("reaching state \'S70\'");
            int temp165 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69ReadConfigChecker3)));
            if ((temp165 == 0)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label131;
            }
            if ((temp165 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS62();
                goto label131;
            }
            if ((temp165 == 2)) {
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S72\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S73\'");
                int temp161 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker71)));
                if ((temp161 == 0)) {
                    this.Manager.Comment("reaching state \'S74\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S75\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S76\'");
                    int temp160 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker72)));
                    if ((temp160 == 0)) {
                        this.Manager.Comment("reaching state \'S77\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,DifferentClient,SameCreat" +
                                "eGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S78\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S79\'");
                        int temp159 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker1)));
                        if ((temp159 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS51();
                            goto label125;
                        }
                        if ((temp159 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS52();
                            goto label125;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker1)));
                    label125:
;
                        goto label126;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S76\'.");
                label126:
;
                    goto label127;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S73\'.");
            label127:
;
                goto label131;
            }
            if ((temp165 == 3)) {
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S82\'");
                int temp164 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker73)));
                if ((temp164 == 0)) {
                    this.Manager.Comment("reaching state \'S83\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S84\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S85\'");
                    int temp163 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker74)));
                    if ((temp163 == 0)) {
                        this.Manager.Comment("reaching state \'S86\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S87\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S88\'");
                        int temp162 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker3)));
                        if ((temp162 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS37();
                            goto label128;
                        }
                        if ((temp162 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS38();
                            goto label128;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker2)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker3)));
                    label128:
;
                        goto label129;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S85\'.");
                label129:
;
                    goto label130;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S82\'.");
            label130:
;
                goto label131;
            }
            throw new InvalidOperationException("never reached");
        label131:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S70");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S70");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S70");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker71() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker72() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S79");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S79");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S79");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S79");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S79");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S79");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S79");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S79");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S70");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker73() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker74() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S88");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S88");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S88");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS69OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S88");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S88");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S88");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S89
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89() {
            this.Manager.BeginTest("DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89");
            this.Manager.Comment("reaching state \'S89\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp166;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp166);
            this.Manager.AddReturn(ReadConfigInfo, null, temp166);
            this.Manager.Comment("reaching state \'S90\'");
            int temp171 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89ReadConfigChecker)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89ReadConfigChecker1)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89ReadConfigChecker2)), new ExpectedReturn(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89ReadConfigChecker3)));
            if ((temp171 == 0)) {
                this.Manager.Comment("reaching state \'S100\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S102\'");
                int temp167 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker75)));
                if ((temp167 == 0)) {
                    this.Manager.Comment("reaching state \'S103\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S104\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS105();
                    goto label132;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S102\'.");
            label132:
;
                goto label136;
            }
            if ((temp171 == 1)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS39();
                goto label136;
            }
            if ((temp171 == 2)) {
                DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS62();
                goto label136;
            }
            if ((temp171 == 3)) {
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("executing step \'call PrepareOpen(Smb21,PersistentBitNotSet,NonCAShare,DurableHand" +
                        "leV1,BatchOplock)\'");
                this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock);
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. \"");
                this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return PrepareOpen\'");
                this.Manager.Comment("reaching state \'S93\'");
                int temp170 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker76)));
                if ((temp170 == 0)) {
                    this.Manager.Comment("reaching state \'S94\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S95\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S96\'");
                    int temp169 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker77)));
                    if ((temp169 == 0)) {
                        this.Manager.Comment("reaching state \'S97\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextExist,DurableV" +
                                "2ReconnectContextNotExist,NoOplockOrLease,SameLeaseKey,SameClient,SameCreateGuid" +
                                ")\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S98\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S99\'");
                        int temp168 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89OpenResponseChecker1)));
                        if ((temp168 == 0)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS51();
                            goto label133;
                        }
                        if ((temp168 == 1)) {
                            DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS52();
                            goto label133;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89OpenResponseChecker)), new ExpectedEvent(DurableHandleV1PreparedWithBatchOplockReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89OpenResponseChecker1)));
                    label133:
;
                        goto label134;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S96\'.");
                label134:
;
                    goto label135;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S93\'.");
            label135:
;
                goto label136;
            }
            throw new InvalidOperationException("never reached");
        label136:
;
            this.Manager.EndTest();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S90");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker75() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S90");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S90");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S90");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker76() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PreConstraintChecker77() {
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S99");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S99");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S99");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void DurableHandleV1PreparedWithBatchOplockReconnectTestCaseS89OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S99");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S99");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S99");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. """);
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
    }
}
